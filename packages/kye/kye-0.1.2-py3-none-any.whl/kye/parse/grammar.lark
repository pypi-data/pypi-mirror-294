?start: statements

_line_delimited{item}: [ item (","? item)* ","? ]
_comma_delimited{item}: [ item ("," item)* ","? ]
_binary_exp{self,child,op}: child | self op child

statements: _line_delimited{ statement }

?statement: model_def
          | type_def
          | edge_def
          | if_stmt
          | op_stmt
          | ASSERT exp   -> assert_stmt
          | NULL exp     -> null_stmt

ASSERT: "assert"
NULL: "null"

model_def: TYPE index* block
type_def: TYPE ":" exp

edge_def: EDGE STRING? index* CARDINALITY? (":" exp | block)
        // For select statments where you can specify an edge by just listing its name
        | EDGE

if_stmt: "if" exp block ( "else" block )?

op_stmt: "operation" OPERATION+ (exp (":" exp)?)?

index: "(" _comma_delimited{ EDGE } ")"

block: "{" _line_delimited{ statement } "}"

OPERATION: ">" | "<" | "-" | "+" | "~" | "*" | "/" | "%"

CARDINALITY: "*" | "?" | "+" | "!"

?exp: is_exp

?is_exp: _binary_exp{is_exp, or_exp, "is"}

?or_exp: _binary_exp{or_exp, xor_exp, "|"}

?xor_exp: _binary_exp{xor_exp, and_exp, "^"}

?and_exp: _binary_exp{and_exp, comp_exp, "&"}

?comp_exp: _binary_exp{comp_exp, mult_exp, COMPARISON_OP}
COMPARISON_OP: "!=" | "==" | ">=" | "<=" | ">" | "<"

?mult_exp: _binary_exp{mult_exp, add_exp, MULTIPLICATION_OP}
MULTIPLICATION_OP: "*" | "/" | "%"

?add_exp: _binary_exp{add_exp, unary_exp, ADDITION_OP}
ADDITION_OP: "+" | "-"

?unary_exp: value_exp
          | UNARY_OP unary_exp
UNARY_OP: "!" | "~"

?value_exp: atom_exp
          | literal

?atom_exp: identifier
         | "(" exp ")"                              -> paren_exp
         | atom_exp "[" _comma_delimited{ exp } "]" -> filter_exp
         | atom_exp "(" _comma_delimited{ exp } ")" -> call_exp
         | atom_exp block                           -> select_exp
         | atom_exp "." EDGE                        -> dot_exp

identifier: TYPE FORMAT? -> type_identifier
          | EDGE         -> edge_identifier

literal: NUMBER
       | STRING
       | BOOLEAN
       | REGEX

TYPE: /[A-Z]+[a-z][a-zA-Z0-9]*/
EDGE: /[a-z_]+[a-z_A-Z0-9]*/

DIGIT: "0".."9"
INT: DIGIT+
SIGNED_INT: ["+"|"-"] INT
DECIMAL: INT "." INT

_EXP: ("e"|"E") SIGNED_INT
FLOAT: INT _EXP | DECIMAL _EXP?

NUMBER: ["+"|"-"] (FLOAT | INT)

BOOLEAN: "TRUE" | "FALSE"

FORMAT: "<" /.*?/ ">"
REGEX: "/" /.*?/ "/"

%ignore WS
%ignore COMMENT
%import common.WS
%import common.ESCAPED_STRING -> STRING
%import common.SH_COMMENT -> COMMENT