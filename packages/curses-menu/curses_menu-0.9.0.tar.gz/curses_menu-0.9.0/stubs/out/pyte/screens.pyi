from typing import List, NamedTuple

from _typeshed import Incomplete

from .streams import Stream as Stream

class Margins(NamedTuple):
    top: Incomplete
    bottom: Incomplete

class Savepoint(NamedTuple):
    cursor: Incomplete
    g0_charset: Incomplete
    g1_charset: Incomplete
    charset: Incomplete
    origin: Incomplete
    wrap: Incomplete

class Char:
    def __new__(
        cls,
        data,
        fg: str = ...,
        bg: str = ...,
        bold: bool = ...,
        italics: bool = ...,
        underscore: bool = ...,
        strikethrough: bool = ...,
        reverse: bool = ...,
        blink: bool = ...,
    ): ...

class Cursor:
    x: Incomplete
    y: Incomplete
    attrs: Incomplete
    hidden: bool
    def __init__(self, x, y, attrs=...) -> None: ...

class StaticDefaultDict(dict):
    default: Incomplete
    def __init__(self, default) -> None: ...
    def __missing__(self, key): ...

class Screen:
    @property
    def default_char(self): ...
    savepoints: Incomplete
    columns: Incomplete
    lines: Incomplete
    buffer: Incomplete
    dirty: Incomplete
    def __init__(self, columns: int, lines: int): ...
    @property
    def display(self) -> List[str]: ...
    margins: Incomplete
    mode: Incomplete
    title: str
    icon_name: str
    charset: int
    g0_charset: Incomplete
    g1_charset: Incomplete
    tabstops: Incomplete
    cursor: Incomplete
    saved_columns: Incomplete
    def reset(self) -> None: ...
    def resize(
        self, lines: Incomplete | None = ..., columns: Incomplete | None = ...
    ) -> None: ...
    def set_margins(
        self, top: Incomplete | None = ..., bottom: Incomplete | None = ...
    ) -> None: ...
    def set_mode(self, *modes, **kwargs) -> None: ...
    def reset_mode(self, *modes, **kwargs) -> None: ...
    def define_charset(self, code, mode) -> None: ...
    def shift_in(self) -> None: ...
    def shift_out(self) -> None: ...
    def draw(self, data) -> None: ...
    def set_title(self, param) -> None: ...
    def set_icon_name(self, param) -> None: ...
    def carriage_return(self) -> None: ...
    def index(self) -> None: ...
    def reverse_index(self) -> None: ...
    def linefeed(self) -> None: ...
    def tab(self) -> None: ...
    def backspace(self) -> None: ...
    def save_cursor(self) -> None: ...
    def restore_cursor(self) -> None: ...
    def insert_lines(self, count: Incomplete | None = ...) -> None: ...
    def delete_lines(self, count: Incomplete | None = ...) -> None: ...
    def insert_characters(self, count: Incomplete | None = ...) -> None: ...
    def delete_characters(self, count: Incomplete | None = ...) -> None: ...
    def erase_characters(self, count: Incomplete | None = ...) -> None: ...
    def erase_in_line(self, how: int = ..., private: bool = ...) -> None: ...
    def erase_in_display(self, how: int = ..., *args, **kwargs) -> None: ...
    def set_tab_stop(self) -> None: ...
    def clear_tab_stop(self, how: int = ...) -> None: ...
    def ensure_hbounds(self) -> None: ...
    def ensure_vbounds(self, use_margins: Incomplete | None = ...) -> None: ...
    def cursor_up(self, count: Incomplete | None = ...) -> None: ...
    def cursor_up1(self, count: Incomplete | None = ...) -> None: ...
    def cursor_down(self, count: Incomplete | None = ...) -> None: ...
    def cursor_down1(self, count: Incomplete | None = ...) -> None: ...
    def cursor_back(self, count: Incomplete | None = ...) -> None: ...
    def cursor_forward(self, count: Incomplete | None = ...) -> None: ...
    def cursor_position(
        self, line: Incomplete | None = ..., column: Incomplete | None = ...
    ) -> None: ...
    def cursor_to_column(self, column: Incomplete | None = ...) -> None: ...
    def cursor_to_line(self, line: Incomplete | None = ...) -> None: ...
    def bell(self, *args) -> None: ...
    def alignment_display(self) -> None: ...
    def select_graphic_rendition(self, *attrs) -> None: ...
    def report_device_attributes(self, mode: int = ..., **kwargs) -> None: ...
    def report_device_status(self, mode) -> None: ...
    def write_process_input(self, data) -> None: ...
    def debug(self, *args, **kwargs) -> None: ...

class DiffScreen(Screen):
    def __init__(self, *args, **kwargs) -> None: ...

class History(NamedTuple):
    top: Incomplete
    bottom: Incomplete
    ratio: Incomplete
    size: Incomplete
    position: Incomplete

class HistoryScreen(Screen):
    history: Incomplete
    def __init__(
        self, columns, lines, history: int = ..., ratio: float = ...
    ) -> None: ...
    def __getattribute__(self, attr): ...
    def before_event(self, event) -> None: ...
    def after_event(self, event) -> None: ...
    def reset(self) -> None: ...
    def erase_in_display(self, how: int = ..., *args, **kwargs) -> None: ...
    def index(self) -> None: ...
    def reverse_index(self) -> None: ...
    dirty: Incomplete
    def prev_page(self) -> None: ...
    def next_page(self) -> None: ...

class DebugEvent:
    @staticmethod
    def from_string(line): ...
    def __call__(self, screen): ...

class DebugScreen:
    to: Incomplete
    only: Incomplete
    def __init__(self, to=..., only=...) -> None: ...
    def only_wrapper(self, attr): ...
    def __getattribute__(self, attr): ...
