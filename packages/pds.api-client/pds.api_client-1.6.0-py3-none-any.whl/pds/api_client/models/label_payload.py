# coding: utf-8

"""
    Planetary Data System DOI Service API

    PDS API for managing DOI registration with OSTI service.  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pds.api_client.configuration import Configuration


class LabelPayload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'title': 'str',
        'publication_date': 'datetime',
        'product_type_specific': 'str',
        'author_last_name': 'str',
        'author_first_name': 'str',
        'related_resource': 'str'
    }

    attribute_map = {
        'status': 'status',
        'title': 'title',
        'publication_date': 'publication_date',
        'product_type_specific': 'product_type_specific',
        'author_last_name': 'author_last_name',
        'author_first_name': 'author_first_name',
        'related_resource': 'related_resource'
    }

    def __init__(self, status=None, title=None, publication_date=None, product_type_specific=None, author_last_name=None, author_first_name=None, related_resource=None, local_vars_configuration=None):  # noqa: E501
        """LabelPayload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._title = None
        self._publication_date = None
        self._product_type_specific = None
        self._author_last_name = None
        self._author_first_name = None
        self._related_resource = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if title is not None:
            self.title = title
        if publication_date is not None:
            self.publication_date = publication_date
        if product_type_specific is not None:
            self.product_type_specific = product_type_specific
        if author_last_name is not None:
            self.author_last_name = author_last_name
        if author_first_name is not None:
            self.author_first_name = author_first_name
        if related_resource is not None:
            self.related_resource = related_resource

    @property
    def status(self):
        """Gets the status of this LabelPayload.  # noqa: E501


        :return: The status of this LabelPayload.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LabelPayload.


        :param status: The status of this LabelPayload.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this LabelPayload.  # noqa: E501


        :return: The title of this LabelPayload.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LabelPayload.


        :param title: The title of this LabelPayload.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def publication_date(self):
        """Gets the publication_date of this LabelPayload.  # noqa: E501


        :return: The publication_date of this LabelPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this LabelPayload.


        :param publication_date: The publication_date of this LabelPayload.  # noqa: E501
        :type: datetime
        """

        self._publication_date = publication_date

    @property
    def product_type_specific(self):
        """Gets the product_type_specific of this LabelPayload.  # noqa: E501


        :return: The product_type_specific of this LabelPayload.  # noqa: E501
        :rtype: str
        """
        return self._product_type_specific

    @product_type_specific.setter
    def product_type_specific(self, product_type_specific):
        """Sets the product_type_specific of this LabelPayload.


        :param product_type_specific: The product_type_specific of this LabelPayload.  # noqa: E501
        :type: str
        """

        self._product_type_specific = product_type_specific

    @property
    def author_last_name(self):
        """Gets the author_last_name of this LabelPayload.  # noqa: E501


        :return: The author_last_name of this LabelPayload.  # noqa: E501
        :rtype: str
        """
        return self._author_last_name

    @author_last_name.setter
    def author_last_name(self, author_last_name):
        """Sets the author_last_name of this LabelPayload.


        :param author_last_name: The author_last_name of this LabelPayload.  # noqa: E501
        :type: str
        """

        self._author_last_name = author_last_name

    @property
    def author_first_name(self):
        """Gets the author_first_name of this LabelPayload.  # noqa: E501


        :return: The author_first_name of this LabelPayload.  # noqa: E501
        :rtype: str
        """
        return self._author_first_name

    @author_first_name.setter
    def author_first_name(self, author_first_name):
        """Sets the author_first_name of this LabelPayload.


        :param author_first_name: The author_first_name of this LabelPayload.  # noqa: E501
        :type: str
        """

        self._author_first_name = author_first_name

    @property
    def related_resource(self):
        """Gets the related_resource of this LabelPayload.  # noqa: E501


        :return: The related_resource of this LabelPayload.  # noqa: E501
        :rtype: str
        """
        return self._related_resource

    @related_resource.setter
    def related_resource(self, related_resource):
        """Sets the related_resource of this LabelPayload.


        :param related_resource: The related_resource of this LabelPayload.  # noqa: E501
        :type: str
        """

        self._related_resource = related_resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LabelPayload):
            return True

        return self.to_dict() != other.to_dict()
