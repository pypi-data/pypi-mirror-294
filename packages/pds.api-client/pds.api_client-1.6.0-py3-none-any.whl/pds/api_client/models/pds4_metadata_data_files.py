# coding: utf-8

"""
    Planetary Data System Registry API

    Federated PDS API which provides actionable end points standardized between the different nodes.   # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pds.api_client.configuration import Configuration


class Pds4MetadataDataFiles(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_name': 'str',
        'file_ref': 'str',
        'creation_date': 'str',
        'file_size': 'str',
        'md5_checksum': 'str',
        'mime_type': 'str'
    }

    attribute_map = {
        'file_name': 'file_name',
        'file_ref': 'file_ref',
        'creation_date': 'creation_date',
        'file_size': 'file_size',
        'md5_checksum': 'md5_checksum',
        'mime_type': 'mime_type'
    }

    def __init__(self, file_name=None, file_ref=None, creation_date=None, file_size=None, md5_checksum=None, mime_type=None, local_vars_configuration=None):  # noqa: E501
        """Pds4MetadataDataFiles - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_name = None
        self._file_ref = None
        self._creation_date = None
        self._file_size = None
        self._md5_checksum = None
        self._mime_type = None
        self.discriminator = None

        if file_name is not None:
            self.file_name = file_name
        if file_ref is not None:
            self.file_ref = file_ref
        if creation_date is not None:
            self.creation_date = creation_date
        if file_size is not None:
            self.file_size = file_size
        if md5_checksum is not None:
            self.md5_checksum = md5_checksum
        if mime_type is not None:
            self.mime_type = mime_type

    @property
    def file_name(self):
        """Gets the file_name of this Pds4MetadataDataFiles.  # noqa: E501


        :return: The file_name of this Pds4MetadataDataFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Pds4MetadataDataFiles.


        :param file_name: The file_name of this Pds4MetadataDataFiles.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_ref(self):
        """Gets the file_ref of this Pds4MetadataDataFiles.  # noqa: E501


        :return: The file_ref of this Pds4MetadataDataFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_ref

    @file_ref.setter
    def file_ref(self, file_ref):
        """Sets the file_ref of this Pds4MetadataDataFiles.


        :param file_ref: The file_ref of this Pds4MetadataDataFiles.  # noqa: E501
        :type: str
        """

        self._file_ref = file_ref

    @property
    def creation_date(self):
        """Gets the creation_date of this Pds4MetadataDataFiles.  # noqa: E501


        :return: The creation_date of this Pds4MetadataDataFiles.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Pds4MetadataDataFiles.


        :param creation_date: The creation_date of this Pds4MetadataDataFiles.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def file_size(self):
        """Gets the file_size of this Pds4MetadataDataFiles.  # noqa: E501


        :return: The file_size of this Pds4MetadataDataFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Pds4MetadataDataFiles.


        :param file_size: The file_size of this Pds4MetadataDataFiles.  # noqa: E501
        :type: str
        """

        self._file_size = file_size

    @property
    def md5_checksum(self):
        """Gets the md5_checksum of this Pds4MetadataDataFiles.  # noqa: E501


        :return: The md5_checksum of this Pds4MetadataDataFiles.  # noqa: E501
        :rtype: str
        """
        return self._md5_checksum

    @md5_checksum.setter
    def md5_checksum(self, md5_checksum):
        """Sets the md5_checksum of this Pds4MetadataDataFiles.


        :param md5_checksum: The md5_checksum of this Pds4MetadataDataFiles.  # noqa: E501
        :type: str
        """

        self._md5_checksum = md5_checksum

    @property
    def mime_type(self):
        """Gets the mime_type of this Pds4MetadataDataFiles.  # noqa: E501


        :return: The mime_type of this Pds4MetadataDataFiles.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Pds4MetadataDataFiles.


        :param mime_type: The mime_type of this Pds4MetadataDataFiles.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pds4MetadataDataFiles):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pds4MetadataDataFiles):
            return True

        return self.to_dict() != other.to_dict()
