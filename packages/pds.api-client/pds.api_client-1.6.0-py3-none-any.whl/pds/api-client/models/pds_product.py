# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product).   # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pds.api-client.models.metadata import Metadata
from pds.api-client.models.reference import Reference

class PdsProduct(BaseModel):
    """
    default PDS product description format for the API.
    """
    description: Optional[StrictStr] = None
    id: StrictStr = Field(..., description="identifier lidvid of the collection")
    investigations: Optional[conlist(Reference)] = Field(None, description="list of missions or observing campaigns which produced the data")
    metadata: Metadata = ...
    observing_system_components: Optional[conlist(Reference)] = Field(None, description="list of instruments or platforms generating the data")
    properties: Optional[Dict[str, conlist(StrictStr)]] = Field(None, description="properties extracted from pds4 model, syntax for property name is <namespace>:<property>[/<namespace>:<property>]*")
    start_date_time: Optional[StrictStr] = Field(None, description="start date time of the observations in ISO8601")
    stop_date_time: Optional[StrictStr] = Field(None, description="stop date time of the observations in ISO8601")
    targets: Optional[conlist(Reference)] = Field(None, description="list of targets or feature of interest the observation.")
    title: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties = ["description", "id", "investigations", "metadata", "observing_system_components", "properties", "start_date_time", "stop_date_time", "targets", "title", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PdsProduct:
        """Create an instance of PdsProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in investigations (list)
        _items = []
        if self.investigations:
            for _item in self.investigations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['investigations'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in observing_system_components (list)
        _items = []
        if self.observing_system_components:
            for _item in self.observing_system_components:
                if _item:
                    _items.append(_item.to_dict())
            _dict['observing_system_components'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item in self.targets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['targets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PdsProduct:
        """Create an instance of PdsProduct from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PdsProduct.parse_obj(obj)

        _obj = PdsProduct.parse_obj({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "investigations": [Reference.from_dict(_item) for _item in obj.get("investigations")] if obj.get("investigations") is not None else None,
            "metadata": Metadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "observing_system_components": [Reference.from_dict(_item) for _item in obj.get("observing_system_components")] if obj.get("observing_system_components") is not None else None,
            "properties": obj.get("properties"),
            "start_date_time": obj.get("start_date_time"),
            "stop_date_time": obj.get("stop_date_time"),
            "targets": [Reference.from_dict(_item) for _item in obj.get("targets")] if obj.get("targets") is not None else None,
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj

