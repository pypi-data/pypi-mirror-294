# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product).   # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Reference(BaseModel):
    """
    object describing a reference to a different product. TODO The properties should be defined by a standard (xlink, json-ld) to be chosen
    """
    description: Optional[StrictStr] = Field(None, description="longer description for the external reference, can be displayed in a tooltip")
    href: Optional[StrictStr] = Field(None, description="external reference url of the current reference resolvable by the current API server, http://pds.nasa.gov/api/products/urn:nasa...")
    id: StrictStr = Field(..., description="external reference, here lidvid urn")
    title: Optional[StrictStr] = Field(None, description="name to display for the external reference")
    type: Optional[StrictStr] = Field(None, description="type of the external reference, can be displayed as an icon for example")
    __properties = ["description", "href", "id", "title", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Reference:
        """Create an instance of Reference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Reference:
        """Create an instance of Reference from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Reference.parse_obj(obj)

        _obj = Reference.parse_obj({
            "description": obj.get("description"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj

