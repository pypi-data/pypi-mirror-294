# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from pds.api_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pds.api_client import schemas  # noqa: F401

from pds.api_client.model.error_message import ErrorMessage
from pds.api_client.model.pds4_products import Pds4Products
from pds.api_client.model.pds_products import PdsProducts
from pds.api_client.model.wyriwyg_products import WyriwygProducts

from . import path

# Query params


class FieldsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FieldsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class LimitSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_minimum = 0


class SortSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SortSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class StartSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_minimum = 0
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'fields': typing.Union[FieldsSchema, list, tuple, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'sort': typing.Union[SortSchema, list, tuple, ],
        'start': typing.Union[StartSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_fields = api_client.QueryParameter(
    name="fields",
    style=api_client.ParameterStyle.FORM,
    schema=FieldsSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_start = api_client.QueryParameter(
    name="start",
    style=api_client.ParameterStyle.FORM,
    schema=StartSchema,
    explode=True,
)
# Path params
IdentifierSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'identifier': typing.Union[IdentifierSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_identifier = api_client.PathParameter(
    name="identifier",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IdentifierSchema,
    required=True,
)
SchemaFor200ResponseBody = schemas.DictSchema
SchemaFor200ResponseBody = PdsProducts
SchemaFor200ResponseBodyApplicationCsv = WyriwygProducts
SchemaFor200ResponseBodyApplicationJson = PdsProducts
SchemaFor200ResponseBodyApplicationKvpjson = WyriwygProducts
SchemaFor200ResponseBodyApplicationVndNasaPdsPds4json = Pds4Products
SchemaFor200ResponseBodyApplicationVndNasaPdsPds4xml = Pds4Products
SchemaFor200ResponseBodyApplicationXml = PdsProducts
SchemaFor200ResponseBodyTextCsv = WyriwygProducts
SchemaFor200ResponseBodyTextHtml = PdsProducts
SchemaFor200ResponseBodyTextXml = PdsProducts


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBody,
        SchemaFor200ResponseBody,
        SchemaFor200ResponseBodyApplicationCsv,
        SchemaFor200ResponseBodyApplicationJson,
        SchemaFor200ResponseBodyApplicationKvpjson,
        SchemaFor200ResponseBodyApplicationVndNasaPdsPds4json,
        SchemaFor200ResponseBodyApplicationVndNasaPdsPds4xml,
        SchemaFor200ResponseBodyApplicationXml,
        SchemaFor200ResponseBodyTextCsv,
        SchemaFor200ResponseBodyTextHtml,
        SchemaFor200ResponseBodyTextXml,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        '*': api_client.MediaType(
            schema=SchemaFor200ResponseBody),
        '*/*': api_client.MediaType(
            schema=SchemaFor200ResponseBody),
        'application/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationCsv),
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'application/kvp+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationKvpjson),
        'application/vnd.nasa.pds.pds4+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationVndNasaPdsPds4json),
        'application/vnd.nasa.pds.pds4+xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationVndNasaPdsPds4xml),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
        'text/html': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextHtml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)
SchemaFor400ResponseBody = ErrorMessage
SchemaFor400ResponseBody = ErrorMessage
SchemaFor400ResponseBodyApplicationCsv = ErrorMessage
SchemaFor400ResponseBodyApplicationJson = ErrorMessage
SchemaFor400ResponseBodyApplicationKvpjson = ErrorMessage
SchemaFor400ResponseBodyApplicationVndNasaPdsPds4json = ErrorMessage
SchemaFor400ResponseBodyApplicationVndNasaPdsPds4xml = ErrorMessage
SchemaFor400ResponseBodyApplicationXml = ErrorMessage
SchemaFor400ResponseBodyTextCsv = ErrorMessage
SchemaFor400ResponseBodyTextHtml = ErrorMessage
SchemaFor400ResponseBodyTextXml = ErrorMessage


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBody,
        SchemaFor400ResponseBody,
        SchemaFor400ResponseBodyApplicationCsv,
        SchemaFor400ResponseBodyApplicationJson,
        SchemaFor400ResponseBodyApplicationKvpjson,
        SchemaFor400ResponseBodyApplicationVndNasaPdsPds4json,
        SchemaFor400ResponseBodyApplicationVndNasaPdsPds4xml,
        SchemaFor400ResponseBodyApplicationXml,
        SchemaFor400ResponseBodyTextCsv,
        SchemaFor400ResponseBodyTextHtml,
        SchemaFor400ResponseBodyTextXml,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        '*': api_client.MediaType(
            schema=SchemaFor400ResponseBody),
        '*/*': api_client.MediaType(
            schema=SchemaFor400ResponseBody),
        'application/csv': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationCsv),
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
        'application/kvp+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationKvpjson),
        'application/vnd.nasa.pds.pds4+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationVndNasaPdsPds4json),
        'application/vnd.nasa.pds.pds4+xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationVndNasaPdsPds4xml),
        'application/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationXml),
        'text/csv': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextCsv),
        'text/html': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextHtml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextXml),
    },
)
SchemaFor404ResponseBody = ErrorMessage
SchemaFor404ResponseBody = ErrorMessage
SchemaFor404ResponseBodyApplicationCsv = ErrorMessage
SchemaFor404ResponseBodyApplicationJson = ErrorMessage
SchemaFor404ResponseBodyApplicationKvpjson = ErrorMessage
SchemaFor404ResponseBodyApplicationVndNasaPdsPds4json = ErrorMessage
SchemaFor404ResponseBodyApplicationVndNasaPdsPds4xml = ErrorMessage
SchemaFor404ResponseBodyApplicationXml = ErrorMessage
SchemaFor404ResponseBodyTextCsv = ErrorMessage
SchemaFor404ResponseBodyTextHtml = ErrorMessage
SchemaFor404ResponseBodyTextXml = ErrorMessage


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBody,
        SchemaFor404ResponseBody,
        SchemaFor404ResponseBodyApplicationCsv,
        SchemaFor404ResponseBodyApplicationJson,
        SchemaFor404ResponseBodyApplicationKvpjson,
        SchemaFor404ResponseBodyApplicationVndNasaPdsPds4json,
        SchemaFor404ResponseBodyApplicationVndNasaPdsPds4xml,
        SchemaFor404ResponseBodyApplicationXml,
        SchemaFor404ResponseBodyTextCsv,
        SchemaFor404ResponseBodyTextHtml,
        SchemaFor404ResponseBodyTextXml,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        '*': api_client.MediaType(
            schema=SchemaFor404ResponseBody),
        '*/*': api_client.MediaType(
            schema=SchemaFor404ResponseBody),
        'application/csv': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationCsv),
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
        'application/kvp+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationKvpjson),
        'application/vnd.nasa.pds.pds4+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationVndNasaPdsPds4json),
        'application/vnd.nasa.pds.pds4+xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationVndNasaPdsPds4xml),
        'application/xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationXml),
        'text/csv': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextCsv),
        'text/html': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextHtml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextXml),
    },
)
SchemaFor500ResponseBody = ErrorMessage
SchemaFor500ResponseBody = ErrorMessage
SchemaFor500ResponseBodyApplicationCsv = ErrorMessage
SchemaFor500ResponseBodyApplicationJson = ErrorMessage
SchemaFor500ResponseBodyApplicationKvpjson = ErrorMessage
SchemaFor500ResponseBodyApplicationVndNasaPdsPds4json = ErrorMessage
SchemaFor500ResponseBodyApplicationVndNasaPdsPds4xml = ErrorMessage
SchemaFor500ResponseBodyApplicationXml = ErrorMessage
SchemaFor500ResponseBodyTextCsv = ErrorMessage
SchemaFor500ResponseBodyTextHtml = ErrorMessage
SchemaFor500ResponseBodyTextXml = ErrorMessage


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBody,
        SchemaFor500ResponseBody,
        SchemaFor500ResponseBodyApplicationCsv,
        SchemaFor500ResponseBodyApplicationJson,
        SchemaFor500ResponseBodyApplicationKvpjson,
        SchemaFor500ResponseBodyApplicationVndNasaPdsPds4json,
        SchemaFor500ResponseBodyApplicationVndNasaPdsPds4xml,
        SchemaFor500ResponseBodyApplicationXml,
        SchemaFor500ResponseBodyTextCsv,
        SchemaFor500ResponseBodyTextHtml,
        SchemaFor500ResponseBodyTextXml,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        '*': api_client.MediaType(
            schema=SchemaFor500ResponseBody),
        '*/*': api_client.MediaType(
            schema=SchemaFor500ResponseBody),
        'application/csv': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationCsv),
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'application/kvp+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationKvpjson),
        'application/vnd.nasa.pds.pds4+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationVndNasaPdsPds4json),
        'application/vnd.nasa.pds.pds4+xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationVndNasaPdsPds4xml),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
        'text/csv': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextCsv),
        'text/html': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextHtml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextXml),
    },
)
SchemaFor501ResponseBody = ErrorMessage
SchemaFor501ResponseBody = ErrorMessage
SchemaFor501ResponseBodyApplicationCsv = ErrorMessage
SchemaFor501ResponseBodyApplicationJson = ErrorMessage
SchemaFor501ResponseBodyApplicationKvpjson = ErrorMessage
SchemaFor501ResponseBodyApplicationVndNasaPdsPds4json = ErrorMessage
SchemaFor501ResponseBodyApplicationVndNasaPdsPds4xml = ErrorMessage
SchemaFor501ResponseBodyApplicationXml = ErrorMessage
SchemaFor501ResponseBodyTextCsv = ErrorMessage
SchemaFor501ResponseBodyTextHtml = ErrorMessage
SchemaFor501ResponseBodyTextXml = ErrorMessage


@dataclass
class ApiResponseFor501(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor501ResponseBody,
        SchemaFor501ResponseBody,
        SchemaFor501ResponseBodyApplicationCsv,
        SchemaFor501ResponseBodyApplicationJson,
        SchemaFor501ResponseBodyApplicationKvpjson,
        SchemaFor501ResponseBodyApplicationVndNasaPdsPds4json,
        SchemaFor501ResponseBodyApplicationVndNasaPdsPds4xml,
        SchemaFor501ResponseBodyApplicationXml,
        SchemaFor501ResponseBodyTextCsv,
        SchemaFor501ResponseBodyTextHtml,
        SchemaFor501ResponseBodyTextXml,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_501 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor501,
    content={
        '*': api_client.MediaType(
            schema=SchemaFor501ResponseBody),
        '*/*': api_client.MediaType(
            schema=SchemaFor501ResponseBody),
        'application/csv': api_client.MediaType(
            schema=SchemaFor501ResponseBodyApplicationCsv),
        'application/json': api_client.MediaType(
            schema=SchemaFor501ResponseBodyApplicationJson),
        'application/kvp+json': api_client.MediaType(
            schema=SchemaFor501ResponseBodyApplicationKvpjson),
        'application/vnd.nasa.pds.pds4+json': api_client.MediaType(
            schema=SchemaFor501ResponseBodyApplicationVndNasaPdsPds4json),
        'application/vnd.nasa.pds.pds4+xml': api_client.MediaType(
            schema=SchemaFor501ResponseBodyApplicationVndNasaPdsPds4xml),
        'application/xml': api_client.MediaType(
            schema=SchemaFor501ResponseBodyApplicationXml),
        'text/csv': api_client.MediaType(
            schema=SchemaFor501ResponseBodyTextCsv),
        'text/html': api_client.MediaType(
            schema=SchemaFor501ResponseBodyTextHtml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor501ResponseBodyTextXml),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '404': _response_for_404,
    '500': _response_for_500,
    '501': _response_for_501,
}
_all_accept_content_types = (
    '*',
    '*/*',
    'application/csv',
    'application/json',
    'application/kvp+json',
    'application/vnd.nasa.pds.pds4+json',
    'application/vnd.nasa.pds.pds4+xml',
    'application/xml',
    'text/csv',
    'text/html',
    'text/xml',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _products_lidvid_collections_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _products_lidvid_collections_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _products_lidvid_collections_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _products_lidvid_collections_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        deprecated
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_identifier,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_fields,
            request_query_limit,
            request_query_sort,
            request_query_start,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class ProductsLidvidCollections(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def products_lidvid_collections(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def products_lidvid_collections(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def products_lidvid_collections(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def products_lidvid_collections(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._products_lidvid_collections_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._products_lidvid_collections_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


