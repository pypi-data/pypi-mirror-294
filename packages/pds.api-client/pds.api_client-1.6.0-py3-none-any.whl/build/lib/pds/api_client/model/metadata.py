# coding: utf-8

"""
    Registry API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). The detailed syntax for querying the end-point is given in the reference documentation.   # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pds.api_client import schemas  # noqa: F401


class Metadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "label_url",
        }
        
        class properties:
            label_url = schemas.StrSchema
            archive_status = schemas.StrSchema
            creation_date_time = schemas.StrSchema
            update_date_time = schemas.StrSchema
            version = schemas.StrSchema
            __annotations__ = {
                "label_url": label_url,
                "archive_status": archive_status,
                "creation_date_time": creation_date_time,
                "update_date_time": update_date_time,
                "version": version,
            }
    
    label_url: MetaOapg.properties.label_url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_url"]) -> MetaOapg.properties.label_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archive_status"]) -> MetaOapg.properties.archive_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date_time"]) -> MetaOapg.properties.creation_date_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_date_time"]) -> MetaOapg.properties.update_date_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label_url", "archive_status", "creation_date_time", "update_date_time", "version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_url"]) -> MetaOapg.properties.label_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archive_status"]) -> typing.Union[MetaOapg.properties.archive_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date_time"]) -> typing.Union[MetaOapg.properties.creation_date_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_date_time"]) -> typing.Union[MetaOapg.properties.update_date_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label_url", "archive_status", "creation_date_time", "update_date_time", "version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        label_url: typing.Union[MetaOapg.properties.label_url, str, ],
        archive_status: typing.Union[MetaOapg.properties.archive_status, str, schemas.Unset] = schemas.unset,
        creation_date_time: typing.Union[MetaOapg.properties.creation_date_time, str, schemas.Unset] = schemas.unset,
        update_date_time: typing.Union[MetaOapg.properties.update_date_time, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Metadata':
        return super().__new__(
            cls,
            *_args,
            label_url=label_url,
            archive_status=archive_status,
            creation_date_time=creation_date_time,
            update_date_time=update_date_time,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )
