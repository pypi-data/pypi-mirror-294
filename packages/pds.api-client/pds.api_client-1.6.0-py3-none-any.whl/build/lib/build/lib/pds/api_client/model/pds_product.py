# coding: utf-8

"""
    Registry API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). The detailed syntax for querying the end-point is given in the reference documentation.   # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pds.api_client import schemas  # noqa: F401


class PdsProduct(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    default PDS product description format for the API.
    """


    class MetaOapg:
        required = {
            "metadata",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['Metadata']:
                return Metadata
            type = schemas.StrSchema
            title = schemas.StrSchema
            description = schemas.StrSchema
            start_date_time = schemas.StrSchema
            stop_date_time = schemas.StrSchema
            
            
            class investigations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Reference']:
                        return Reference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Reference'], typing.List['Reference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'investigations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Reference':
                    return super().__getitem__(i)
            
            
            class observing_system_components(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Reference']:
                        return Reference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Reference'], typing.List['Reference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'observing_system_components':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Reference':
                    return super().__getitem__(i)
            
            
            class targets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Reference']:
                        return Reference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Reference'], typing.List['Reference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Reference':
                    return super().__getitem__(i)
            
            
            class properties(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['PropertyArrayValues']:
                        return PropertyArrayValues
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'PropertyArrayValues':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'PropertyArrayValues':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'PropertyArrayValues',
                ) -> 'properties':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "metadata": metadata,
                "type": type,
                "title": title,
                "description": description,
                "start_date_time": start_date_time,
                "stop_date_time": stop_date_time,
                "investigations": investigations,
                "observing_system_components": observing_system_components,
                "targets": targets,
                "properties": properties,
            }
    
    metadata: 'Metadata'
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'Metadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date_time"]) -> MetaOapg.properties.start_date_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stop_date_time"]) -> MetaOapg.properties.stop_date_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investigations"]) -> MetaOapg.properties.investigations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observing_system_components"]) -> MetaOapg.properties.observing_system_components: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targets"]) -> MetaOapg.properties.targets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "metadata", "type", "title", "description", "start_date_time", "stop_date_time", "investigations", "observing_system_components", "targets", "properties", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'Metadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date_time"]) -> typing.Union[MetaOapg.properties.start_date_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stop_date_time"]) -> typing.Union[MetaOapg.properties.stop_date_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investigations"]) -> typing.Union[MetaOapg.properties.investigations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observing_system_components"]) -> typing.Union[MetaOapg.properties.observing_system_components, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targets"]) -> typing.Union[MetaOapg.properties.targets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "metadata", "type", "title", "description", "start_date_time", "stop_date_time", "investigations", "observing_system_components", "targets", "properties", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'Metadata',
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        start_date_time: typing.Union[MetaOapg.properties.start_date_time, str, schemas.Unset] = schemas.unset,
        stop_date_time: typing.Union[MetaOapg.properties.stop_date_time, str, schemas.Unset] = schemas.unset,
        investigations: typing.Union[MetaOapg.properties.investigations, list, tuple, schemas.Unset] = schemas.unset,
        observing_system_components: typing.Union[MetaOapg.properties.observing_system_components, list, tuple, schemas.Unset] = schemas.unset,
        targets: typing.Union[MetaOapg.properties.targets, list, tuple, schemas.Unset] = schemas.unset,
        properties: typing.Union[MetaOapg.properties.properties, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PdsProduct':
        return super().__new__(
            cls,
            *_args,
            metadata=metadata,
            id=id,
            type=type,
            title=title,
            description=description,
            start_date_time=start_date_time,
            stop_date_time=stop_date_time,
            investigations=investigations,
            observing_system_components=observing_system_components,
            targets=targets,
            properties=properties,
            _configuration=_configuration,
            **kwargs,
        )

from pds.api_client.model.metadata import Metadata
from pds.api_client.model.property_array_values import PropertyArrayValues
from pds.api_client.model.reference import Reference
