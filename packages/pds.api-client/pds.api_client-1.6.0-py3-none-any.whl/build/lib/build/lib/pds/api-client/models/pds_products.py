# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product).   # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, conlist
from pds.api-client.models.pds_product import PdsProduct
from pds.api-client.models.summary import Summary

class PdsProducts(BaseModel):
    """
    PdsProducts
    """
    data: conlist(PdsProduct) = ...
    summary: Summary = ...
    __properties = ["data", "summary"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PdsProducts:
        """Create an instance of PdsProducts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PdsProducts:
        """Create an instance of PdsProducts from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PdsProducts.parse_obj(obj)

        _obj = PdsProducts.parse_obj({
            "data": [PdsProduct.from_dict(_item) for _item in obj.get("data")] if obj.get("data") is not None else None,
            "summary": Summary.from_dict(obj.get("summary")) if obj.get("summary") is not None else None
        })
        return _obj

