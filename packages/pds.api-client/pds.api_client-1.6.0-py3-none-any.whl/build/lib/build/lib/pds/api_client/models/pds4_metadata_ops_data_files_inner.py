# coding: utf-8

"""
    Registry API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). The detailed syntax for querying the end-point is given in the reference documentation.   # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Pds4MetadataOpsDataFilesInner(BaseModel):
    """
    Pds4MetadataOpsDataFilesInner
    """
    opsfile_name: Optional[StrictStr] = Field(None, alias="ops:file_name")
    opsfile_ref: Optional[StrictStr] = Field(None, alias="ops:file_ref")
    opscreation_date: Optional[StrictStr] = Field(None, alias="ops:creation_date")
    opsfile_size: Optional[StrictStr] = Field(None, alias="ops:file_size")
    opsmd5_checksum: Optional[StrictStr] = Field(None, alias="ops:md5_checksum")
    opsmime_type: Optional[StrictStr] = Field(None, alias="ops:mime_type")
    __properties = ["ops:file_name", "ops:file_ref", "ops:creation_date", "ops:file_size", "ops:md5_checksum", "ops:mime_type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Pds4MetadataOpsDataFilesInner:
        """Create an instance of Pds4MetadataOpsDataFilesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Pds4MetadataOpsDataFilesInner:
        """Create an instance of Pds4MetadataOpsDataFilesInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Pds4MetadataOpsDataFilesInner.parse_obj(obj)

        _obj = Pds4MetadataOpsDataFilesInner.parse_obj({
            "opsfile_name": obj.get("ops:file_name"),
            "opsfile_ref": obj.get("ops:file_ref"),
            "opscreation_date": obj.get("ops:creation_date"),
            "opsfile_size": obj.get("ops:file_size"),
            "opsmd5_checksum": obj.get("ops:md5_checksum"),
            "opsmime_type": obj.get("ops:mime_type")
        })
        return _obj

