# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product).   # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class Metadata(BaseModel):
    """
    Metadata
    """
    archive_status: Optional[StrictStr] = None
    creation_date_time: Optional[StrictStr] = None
    label_url: StrictStr = ...
    update_date_time: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    __properties = ["archive_status", "creation_date_time", "label_url", "update_date_time", "version"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Metadata:
        """Create an instance of Metadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Metadata:
        """Create an instance of Metadata from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Metadata.parse_obj(obj)

        _obj = Metadata.parse_obj({
            "archive_status": obj.get("archive_status"),
            "creation_date_time": obj.get("creation_date_time"),
            "label_url": obj.get("label_url"),
            "update_date_time": obj.get("update_date_time"),
            "version": obj.get("version")
        })
        return _obj

