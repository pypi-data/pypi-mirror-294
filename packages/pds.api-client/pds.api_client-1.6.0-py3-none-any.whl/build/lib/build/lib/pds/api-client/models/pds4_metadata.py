# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product).   # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pds.api-client.models.pds4_metadata_ops_data_file import Pds4MetadataOpsDataFile
from pds.api-client.models.pds4_metadata_ops_label_file_info import Pds4MetadataOpsLabelFileInfo
from pds.api-client.models.pds4_metadata_ops_tracking_meta import Pds4MetadataOpsTrackingMeta

class Pds4Metadata(BaseModel):
    """
    Pds4Metadata
    """
    node_name: Optional[StrictStr] = None
    ops_data_files: Optional[conlist(Pds4MetadataOpsDataFile)] = Field(None, alias="ops:Data_Files")
    ops_label_file_info: Optional[Pds4MetadataOpsLabelFileInfo] = Field(None, alias="ops:Label_File_Info")
    ops_tracking_meta: Optional[Pds4MetadataOpsTrackingMeta] = Field(None, alias="ops:Tracking_Meta")
    __properties = ["node_name", "ops:Data_Files", "ops:Label_File_Info", "ops:Tracking_Meta"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Pds4Metadata:
        """Create an instance of Pds4Metadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ops_data_files (list)
        _items = []
        if self.ops_data_files:
            for _item in self.ops_data_files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ops:Data_Files'] = _items
        # override the default output from pydantic by calling `to_dict()` of ops_label_file_info
        if self.ops_label_file_info:
            _dict['ops:Label_File_Info'] = self.ops_label_file_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ops_tracking_meta
        if self.ops_tracking_meta:
            _dict['ops:Tracking_Meta'] = self.ops_tracking_meta.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Pds4Metadata:
        """Create an instance of Pds4Metadata from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Pds4Metadata.parse_obj(obj)

        _obj = Pds4Metadata.parse_obj({
            "node_name": obj.get("node_name"),
            "ops_data_files": [Pds4MetadataOpsDataFile.from_dict(_item) for _item in obj.get("ops:Data_Files")] if obj.get("ops:Data_Files") is not None else None,
            "ops_label_file_info": Pds4MetadataOpsLabelFileInfo.from_dict(obj.get("ops:Label_File_Info")) if obj.get("ops:Label_File_Info") is not None else None,
            "ops_tracking_meta": Pds4MetadataOpsTrackingMeta.from_dict(obj.get("ops:Tracking_Meta")) if obj.get("ops:Tracking_Meta") is not None else None
        })
        return _obj

