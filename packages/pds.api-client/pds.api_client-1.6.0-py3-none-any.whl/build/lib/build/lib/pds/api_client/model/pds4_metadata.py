# coding: utf-8

"""
    Registry API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). The detailed syntax for querying the end-point is given in the reference documentation.   # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pds.api_client import schemas  # noqa: F401


class Pds4Metadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            node_name = schemas.StrSchema
            
            
            class ops_label_file_info(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        opsfile_name = schemas.StrSchema
                        opsfile_ref = schemas.StrSchema
                        opscreation_date = schemas.StrSchema
                        opsfile_size = schemas.StrSchema
                        opsmd5_checksum = schemas.StrSchema
                        __annotations__ = {
                            "ops:file_name": opsfile_name,
                            "ops:file_ref": opsfile_ref,
                            "ops:creation_date": opscreation_date,
                            "ops:file_size": opsfile_size,
                            "ops:md5_checksum": opsmd5_checksum,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ops:file_name"]) -> MetaOapg.properties.opsfile_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ops:file_ref"]) -> MetaOapg.properties.opsfile_ref: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ops:creation_date"]) -> MetaOapg.properties.opscreation_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ops:file_size"]) -> MetaOapg.properties.opsfile_size: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ops:md5_checksum"]) -> MetaOapg.properties.opsmd5_checksum: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["ops:file_name", "ops:file_ref", "ops:creation_date", "ops:file_size", "ops:md5_checksum", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ops:file_name"]) -> typing.Union[MetaOapg.properties.opsfile_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ops:file_ref"]) -> typing.Union[MetaOapg.properties.opsfile_ref, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ops:creation_date"]) -> typing.Union[MetaOapg.properties.opscreation_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ops:file_size"]) -> typing.Union[MetaOapg.properties.opsfile_size, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ops:md5_checksum"]) -> typing.Union[MetaOapg.properties.opsmd5_checksum, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ops:file_name", "ops:file_ref", "ops:creation_date", "ops:file_size", "ops:md5_checksum", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ops_label_file_info':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ops_data_files(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                opsfile_name = schemas.StrSchema
                                opsfile_ref = schemas.StrSchema
                                opscreation_date = schemas.StrSchema
                                opsfile_size = schemas.StrSchema
                                opsmd5_checksum = schemas.StrSchema
                                opsmime_type = schemas.StrSchema
                                __annotations__ = {
                                    "ops:file_name": opsfile_name,
                                    "ops:file_ref": opsfile_ref,
                                    "ops:creation_date": opscreation_date,
                                    "ops:file_size": opsfile_size,
                                    "ops:md5_checksum": opsmd5_checksum,
                                    "ops:mime_type": opsmime_type,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ops:file_name"]) -> MetaOapg.properties.opsfile_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ops:file_ref"]) -> MetaOapg.properties.opsfile_ref: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ops:creation_date"]) -> MetaOapg.properties.opscreation_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ops:file_size"]) -> MetaOapg.properties.opsfile_size: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ops:md5_checksum"]) -> MetaOapg.properties.opsmd5_checksum: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ops:mime_type"]) -> MetaOapg.properties.opsmime_type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["ops:file_name", "ops:file_ref", "ops:creation_date", "ops:file_size", "ops:md5_checksum", "ops:mime_type", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ops:file_name"]) -> typing.Union[MetaOapg.properties.opsfile_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ops:file_ref"]) -> typing.Union[MetaOapg.properties.opsfile_ref, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ops:creation_date"]) -> typing.Union[MetaOapg.properties.opscreation_date, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ops:file_size"]) -> typing.Union[MetaOapg.properties.opsfile_size, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ops:md5_checksum"]) -> typing.Union[MetaOapg.properties.opsmd5_checksum, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ops:mime_type"]) -> typing.Union[MetaOapg.properties.opsmime_type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ops:file_name", "ops:file_ref", "ops:creation_date", "ops:file_size", "ops:md5_checksum", "ops:mime_type", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ops_data_files':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class ops_tracking_meta(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        opsarchive_status = schemas.StrSchema
                        __annotations__ = {
                            "ops:archive_status": opsarchive_status,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ops:archive_status"]) -> MetaOapg.properties.opsarchive_status: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["ops:archive_status", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ops:archive_status"]) -> typing.Union[MetaOapg.properties.opsarchive_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ops:archive_status", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ops_tracking_meta':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "node_name": node_name,
                "ops:Label_File_Info": ops_label_file_info,
                "ops:Data_Files": ops_data_files,
                "ops:Tracking_Meta": ops_tracking_meta,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["node_name"]) -> MetaOapg.properties.node_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ops:Label_File_Info"]) -> MetaOapg.properties.ops_label_file_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ops:Data_Files"]) -> MetaOapg.properties.ops_data_files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ops:Tracking_Meta"]) -> MetaOapg.properties.ops_tracking_meta: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["node_name", "ops:Label_File_Info", "ops:Data_Files", "ops:Tracking_Meta", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["node_name"]) -> typing.Union[MetaOapg.properties.node_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ops:Label_File_Info"]) -> typing.Union[MetaOapg.properties.ops_label_file_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ops:Data_Files"]) -> typing.Union[MetaOapg.properties.ops_data_files, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ops:Tracking_Meta"]) -> typing.Union[MetaOapg.properties.ops_tracking_meta, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["node_name", "ops:Label_File_Info", "ops:Data_Files", "ops:Tracking_Meta", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        node_name: typing.Union[MetaOapg.properties.node_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Pds4Metadata':
        return super().__new__(
            cls,
            *_args,
            node_name=node_name,
            _configuration=_configuration,
            **kwargs,
        )
