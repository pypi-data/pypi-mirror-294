Quat:
    x is Real: 0
    y is Real: 0
    z is Real: 0
    w is Real: 1

    # Applies this quaternion as a rotation to a vector, returns the
    # rotated vector.
    fn rotate(v: Vec3) -> Vec3

    fn conj() -> Quat
    fn inverse() -> Quat

    # Creates a quaternion that represents a rotation of angle radians
    # around the specified axis.
    static fn angle_axis(angle: Real, axis: Math.Vec3) -> Quat

    # Creates a quaternion that represents a rotation that would rotate
    # the from vector to the to vector.
    static fn from_to(from: Vec3, to: Vec3) -> Quat

    # Normalizes a quaternion
    static fn normal(q : Quat) -> Quat

    # Creates a new quaternion with the specified values
    static fn from_xyzw(x : Real, y : Real, z : Real, w : Real) -> Quat

# Operator overloads

operator *(lhs: Quat, rhs: Real) -> Quat
operator *(lhs: Real, rhs: Quat) -> Quat
operator *(lhs: Quat, rhs: Quat) -> Quat

operator /(lhs: Quat, rhs: Real) -> Quat
operator /(lhs: Quat, rhs: Quat) -> Quat

operator +(lhs: Quat, rhs: Quat) -> Quat
operator -(lhs: Quat, rhs: Quat) -> Quat
operator -(operand: Quat) -> Quat
