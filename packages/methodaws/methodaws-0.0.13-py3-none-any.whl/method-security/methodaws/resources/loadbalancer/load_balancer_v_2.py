# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .ip_address_type import IpAddressType
from .listener import Listener
from .load_balancer_state import LoadBalancerState
from .target_group import TargetGroup


class LoadBalancerV2(UniversalBaseModel):
    """
    LoadBalancer represents a load balancer that distributes incoming network traffic across multiple servers.
    As defined by the AWS Go SDK (https://pkg.go.dev/github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2@v1.33.1/types#LoadBalancer)
    """

    arn: str
    name: str
    created_time: dt.datetime = pydantic.Field(alias="createdTime")
    dns_name: str = pydantic.Field(alias="dnsName")
    ip_address_type: IpAddressType = pydantic.Field(alias="ipAddressType")
    security_group_ids: typing.List[str] = pydantic.Field(alias="securityGroupIds")
    state: typing.Optional[LoadBalancerState] = None
    vpc_id: str = pydantic.Field(alias="vpcId")
    listeners: typing.Optional[typing.List[Listener]] = None
    subnet_ids: typing.List[str] = pydantic.Field(alias="subnetIds")
    hosted_zone_id: typing.Optional[str] = pydantic.Field(alias="hostedZoneId", default=None)
    target_groups: typing.List[TargetGroup] = pydantic.Field(alias="targetGroups")

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
