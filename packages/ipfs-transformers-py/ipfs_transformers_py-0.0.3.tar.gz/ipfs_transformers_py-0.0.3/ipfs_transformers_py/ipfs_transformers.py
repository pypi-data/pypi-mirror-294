import os
import asyncio

class AutoDownloadModel():
	def __init__(self, collection=None, meta=None):
		if os.getuid() == 0:
			if meta is not None and type (meta) == dict:
				if "local_path" in meta:
					self.local_path = meta["local_path"]			
				else:
					self.local_path = "/huggingface/"
				if "ipfs_path" in meta:
					self.ipfs_path = meta["ipfs_path"]
				else:
					self.ipfs_path = "/ipfs/"
				if "s3_cfg" in meta:
					self.s3cfg = meta["s3_cfg"]
				else:
					self.s3cfg = None
				if "role" in meta:
					self.role = meta["role"]
				else:
					self.role = "leecher"
			else:
				self.local_path = "/huggingface/"
				self.ipfs_path = "/ipfs/"
				self.s3cfg = None
				self.role = "leecher"
				meta = {
					"local_path": self.local_path,
					"ipfs_path": self.ipfs_path,
					"s3_cfg": self.s3cfg,
					"role": self.role
				}
		else:
			if meta is not None and type (meta) == dict:
				if "local_path" in meta:
					self.local_path = meta["local_path"]
				else:
					self.local_path = os.path.join(os.getenv("HOME") , ".cache/huggingface/")
				if "ipfs_path" in meta:
					self.ipfs_path = meta["ipfs_path"]
				else:
					self.ipfs_path = os.path.join(os.getenv("HOME") , ".cache/ipfs/")
				if "s3_cfg" in meta:
					self.s3cfg = meta["s3_cfg"]
				else:
					self.s3cfg = None
				if "role" in meta:
					self.role = meta["role"]
				else:
					self.role = "leecher"
					pass
			else:
				self.local_path = os.path.join(os.getenv("HOME") , ".cache/huggingface/")
				self.ipfs_path = os.path.join(os.getenv("HOME") , ".cache/ipfs/")
				self.s3cfg = None
				self.role = "leecher"
				meta = {
					"local_path": self.local_path,
					"ipfs_path": self.ipfs_path,
					"s3_cfg": self.s3cfg,
					"role": self.role
				}
				pass
			pass
		
		import ipfs_model_manager 
		self.model_manager = ipfs_model_manager.ipfs_model_manager(resources=collection, meta=meta)
		self.model_manager.load_collection_cache()
		self.model_manager.load_collection()		
		self.model_manager.state(src = 'local')
				
	def download(self, **kwargs):
		# NOTE: Add kwarg for output directory where downloads are stored
		# if "local_path" in kwargs:
		# 	self.local_path = kwargs["local_path"]
		# if "ipfs_path" in kwargs:
		# 	self.ipfs_path = kwargs["ipfs_path"]
		
		# self.model_manager.run_once()
		asyncio.run(self.model_manager.run_once())
		model_name = None
		cid = None
		if "model_name" in kwargs:
			if "/" in kwargs["model_name"]:
				model_name = kwargs["model_name"].split("/")[1]
				pass
			elif "https://" in kwargs["model_name"]:
				model_name = kwargs["model_name"].split("/")[-1]
				pass
			else:
				model_name = kwargs["model_name"]
			pass
		elif "cid" in kwargs:
			cid = kwargs["cid"]
		if model_name != None:
			try:
				results = self.model_manager.download_model(model_name, **kwargs)
			except Exception as e:
				raise e
			finally:
				pass
			return os.path.join(self.local_path, model_name)
		else:
			try:
				results = self.model_manager.download_ipfs(cid, os.path.join(self.local_path, cid), **kwargs)
			except Exception as e:
				raise e
			finally:
				pass
			return os.path.join(self.local_path, cid)
		pass


class ASTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ASTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ASTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ASTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ASTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ASTFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ASTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ASTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ASTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ASTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ASTForAudioClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ASTForAudioClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ASTForAudioClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ASTForAudioClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ASTForAudioClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ASTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ASTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ASTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ASTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ASTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ASTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ASTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ASTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ASTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ASTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlbertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlbertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlbertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlbertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlbertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlignConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlignConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlignConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlignConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlignConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlignModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlignModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlignModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlignModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlignModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlignPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlignPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlignPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlignPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlignPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlignProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlignProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlignProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlignProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlignProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlignTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlignTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlignTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlignTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlignTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlignTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlignTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlignTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlignTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlignTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlignVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlignVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlignVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlignVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlignVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AlignVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AlignVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AlignVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AlignVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AlignVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AltCLIPConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AltCLIPConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AltCLIPConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AltCLIPConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AltCLIPConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AltCLIPModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AltCLIPModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AltCLIPModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AltCLIPModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AltCLIPModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AltCLIPPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AltCLIPPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AltCLIPPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AltCLIPPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AltCLIPPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AltCLIPProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AltCLIPProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AltCLIPProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AltCLIPProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AltCLIPProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AltCLIPTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AltCLIPTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AltCLIPTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AltCLIPTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AltCLIPTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AltCLIPTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AltCLIPTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AltCLIPTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AltCLIPTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AltCLIPTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AltCLIPVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AltCLIPVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AltCLIPVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AltCLIPVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AltCLIPVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AltCLIPVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AltCLIPVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AltCLIPVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AltCLIPVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AltCLIPVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForAudioClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForAudioClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForAudioClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForAudioClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForAudioClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForAudioFrameClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForAudioXVector(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForAudioXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForAudioXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForAudioXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForAudioXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForDepthEstimation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForDepthEstimation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForDepthEstimation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForDepthEstimation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForDepthEstimation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForDocumentQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForDocumentQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForDocumentQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForDocumentQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForDocumentQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForImageSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForImageSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForImageSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForImageSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForImageSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForImageToImage(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForImageToImage
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForImageToImage.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForImageToImage
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForImageToImage.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForInstanceSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForInstanceSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForInstanceSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForInstanceSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForInstanceSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForKeypointDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForKeypointDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForKeypointDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForKeypointDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForKeypointDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForMaskGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForMaskGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForMaskGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForMaskGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForMaskGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForMaskedImageModeling(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForNextSentencePrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForSeq2SeqLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForSeq2SeqLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForSeq2SeqLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForSeq2SeqLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForSeq2SeqLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForSpeechSeq2Seq(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForSpeechSeq2Seq
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForSpeechSeq2Seq.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForSpeechSeq2Seq
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForSpeechSeq2Seq.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForTableQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForTableQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForTableQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForTableQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForTableQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForTextEncoding(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForTextEncoding
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForTextEncoding.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForTextEncoding
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForTextEncoding.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForTextToSpectrogram(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForTextToSpectrogram
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForTextToSpectrogram.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForTextToSpectrogram
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForTextToSpectrogram.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForTextToWaveform(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForTextToWaveform
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForTextToWaveform.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForTextToWaveform
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForTextToWaveform.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForUniversalSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForUniversalSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForUniversalSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForUniversalSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForUniversalSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForVideoClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForVideoClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForVideoClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForVideoClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForVideoClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForVision2Seq(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForVision2Seq
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForVision2Seq.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForVision2Seq
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForVision2Seq.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForVisualQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForVisualQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForVisualQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForVisualQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForVisualQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForZeroShotImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForZeroShotImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForZeroShotImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForZeroShotImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForZeroShotImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelForZeroShotObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelForZeroShotObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelForZeroShotObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelForZeroShotObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelForZeroShotObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoModelWithLMHead(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoModelWithLMHead
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoModelWithLMHead.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoModelWithLMHead
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoModelWithLMHead.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoformerForPrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoformerForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoformerForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoformerForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoformerForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class AutoformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import AutoformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return AutoformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import AutoformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return AutoformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkCausalModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkCausalModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkCausalModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkCausalModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkCausalModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkCoarseConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkCoarseConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkCoarseConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkCoarseConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkCoarseConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkCoarseModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkCoarseModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkCoarseModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkCoarseModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkCoarseModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkFineConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkFineConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkFineConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkFineConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkFineConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkFineModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkFineModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkFineModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkFineModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkFineModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkSemanticConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkSemanticConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkSemanticConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkSemanticConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkSemanticConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarkSemanticModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarkSemanticModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarkSemanticModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarkSemanticModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarkSemanticModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartPretrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartPretrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartPretrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartPretrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartPretrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BartTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BartTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BartTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BartTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BartTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BarthezTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BarthezTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BarthezTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BarthezTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BarthezTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitForMaskedImageModeling(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BeitPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BeitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BeitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BeitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BeitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertForNextSentencePrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertGenerationConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertGenerationConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertGenerationConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertGenerationConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertGenerationConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertGenerationDecoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertGenerationDecoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertGenerationDecoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertGenerationDecoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertGenerationDecoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertGenerationEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertGenerationEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertGenerationEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertGenerationEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertGenerationEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertGenerationPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertGenerationPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertGenerationPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertGenerationPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertGenerationPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertJapaneseTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertJapaneseTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertJapaneseTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertJapaneseTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertJapaneseTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertLMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BertweetTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BertweetTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BertweetTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BertweetTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BertweetTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdPegasusConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdPegasusConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdPegasusConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdPegasusConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdPegasusConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdPegasusForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdPegasusForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdPegasusForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdPegasusForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdPegasusForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdPegasusForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdPegasusForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdPegasusForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdPegasusForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdPegasusForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdPegasusForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdPegasusForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdPegasusForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdPegasusForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdPegasusForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdPegasusForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdPegasusForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdPegasusForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdPegasusForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdPegasusForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdPegasusModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdPegasusModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdPegasusModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdPegasusModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdPegasusModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdPegasusPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdPegasusPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdPegasusPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdPegasusPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdPegasusPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BigBirdTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BigBirdTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BigBirdTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BigBirdTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BigBirdTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BioGptConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BioGptConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BioGptConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BioGptConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BioGptConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BioGptForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BioGptForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BioGptForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BioGptForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BioGptForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BioGptForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BioGptForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BioGptForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BioGptForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BioGptForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BioGptForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BioGptForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BioGptForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BioGptForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BioGptForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BioGptModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BioGptModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BioGptModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BioGptModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BioGptModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BioGptPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BioGptPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BioGptPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BioGptPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BioGptPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BioGptTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BioGptTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BioGptTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BioGptTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BioGptTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BitBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BitBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BitBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BitBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BitBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BitConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BitForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BitForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BitForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BitForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BitForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BitImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BitImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BitImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BitImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BitImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BitModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BitPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotSmallConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotSmallConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotSmallConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotSmallConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotSmallConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotSmallForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotSmallForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotSmallForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotSmallForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotSmallForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotSmallForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotSmallForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotSmallForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotSmallForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotSmallForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotSmallModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotSmallModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotSmallModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotSmallModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotSmallModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotSmallPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotSmallPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotSmallPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotSmallPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotSmallPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotSmallTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotSmallTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotSmallTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotSmallTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotSmallTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotSmallTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotSmallTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotSmallTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotSmallTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotSmallTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlenderbotTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlenderbotTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlenderbotTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlenderbotTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlenderbotTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2ForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2Processor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2QFormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2QFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2QFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2QFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2QFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2QFormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2QFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2QFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2QFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2QFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2VisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2VisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2VisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2VisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2VisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Blip2VisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Blip2VisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Blip2VisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Blip2VisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Blip2VisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipForImageTextRetrieval(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipForImageTextRetrieval
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipForImageTextRetrieval.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipForImageTextRetrieval
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipForImageTextRetrieval.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BlipVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BlipVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BlipVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BlipVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BlipVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BloomConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BloomConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BloomConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BloomConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BloomConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BloomForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BloomForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BloomForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BloomForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BloomForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BloomForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BloomForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BloomForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BloomForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BloomForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BloomForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BloomForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BloomForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BloomForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BloomForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BloomForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BloomForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BloomForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BloomForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BloomForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BloomModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BloomModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BloomModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BloomModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BloomModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BloomPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BloomPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BloomPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BloomPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BloomPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BloomTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BloomTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BloomTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BloomTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BloomTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerForContrastiveLearning(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerForContrastiveLearning
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerForContrastiveLearning.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerForContrastiveLearning
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerForContrastiveLearning.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerForImageAndTextRetrieval(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerForImageAndTextRetrieval
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerForImageAndTextRetrieval.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerForImageAndTextRetrieval
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerForImageAndTextRetrieval.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BridgeTowerVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BridgeTowerVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BridgeTowerVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BridgeTowerVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BridgeTowerVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BrosConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BrosConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BrosConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BrosConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BrosConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BrosForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BrosForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BrosForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BrosForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BrosForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BrosModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BrosModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BrosModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BrosModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BrosModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BrosPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BrosPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BrosPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BrosPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BrosPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BrosProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BrosProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BrosProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BrosProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BrosProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BrosSpadeEEForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BrosSpadeEEForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BrosSpadeEEForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BrosSpadeEEForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BrosSpadeEEForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class BrosSpadeELForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import BrosSpadeELForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return BrosSpadeELForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import BrosSpadeELForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return BrosSpadeELForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ByT5Tokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ByT5Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ByT5Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ByT5Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ByT5Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegForImageSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegForImageSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegForImageSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegForImageSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegForImageSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPSegVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPSegVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPSegVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPSegVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPSegVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPTextModelWithProjection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPTextModelWithProjection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPTextModelWithProjection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPTextModelWithProjection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPTextModelWithProjection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CLIPVisionModelWithProjection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CLIPVisionModelWithProjection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CLIPVisionModelWithProjection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CLIPVisionModelWithProjection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CLIPVisionModelWithProjection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CTRLConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CTRLConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CTRLConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CTRLConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CTRLConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CTRLForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CTRLForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CTRLForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CTRLForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CTRLForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CTRLLMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CTRLLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CTRLLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CTRLLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CTRLLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CTRLModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CTRLModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CTRLModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CTRLModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CTRLModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CTRLPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CTRLPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CTRLPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CTRLPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CTRLPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CTRLTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CTRLTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CTRLTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CTRLTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CTRLTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CamembertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CamembertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CamembertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CamembertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CamembertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CanineConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CanineConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CanineConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CanineConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CanineConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CanineForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CanineForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CanineForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CanineForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CanineForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CanineForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CanineForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CanineForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CanineForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CanineForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CanineForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CanineForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CanineForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CanineForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CanineForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CanineForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CanineForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CanineForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CanineForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CanineForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CanineModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CanineModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CanineModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CanineModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CanineModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CaninePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CaninePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CaninePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CaninePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CaninePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CanineTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CanineTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CanineTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CanineTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CanineTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ChineseCLIPVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ChineseCLIPVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ChineseCLIPVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ChineseCLIPVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ChineseCLIPVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapAudioConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapAudioConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapAudioConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapAudioConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapAudioConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapAudioModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapAudioModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapAudioModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapAudioModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapAudioModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapAudioModelWithProjection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapAudioModelWithProjection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapAudioModelWithProjection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapAudioModelWithProjection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapAudioModelWithProjection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClapTextModelWithProjection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClapTextModelWithProjection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClapTextModelWithProjection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClapTextModelWithProjection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClapTextModelWithProjection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpDecoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpDecoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpDecoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpDecoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpDecoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpDecoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpEncoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpEncoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpEncoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpEncoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpEncoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpModelForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpModelForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpModelForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpModelForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpModelForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ClvpTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ClvpTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ClvpTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ClvpTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ClvpTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CodeGenConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CodeGenConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CodeGenConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CodeGenConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CodeGenConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CodeGenForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CodeGenForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CodeGenForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CodeGenForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CodeGenForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CodeGenModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CodeGenModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CodeGenModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CodeGenModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CodeGenModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CodeGenPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CodeGenPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CodeGenPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CodeGenPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CodeGenPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CodeGenTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CodeGenTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CodeGenTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CodeGenTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CodeGenTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CodeGenTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CodeGenTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CodeGenTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CodeGenTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CodeGenTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CodeLlamaTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CodeLlamaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CodeLlamaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CodeLlamaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CodeLlamaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CohereConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CohereConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CohereConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CohereConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CohereConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CohereForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CohereForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CohereForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CohereForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CohereForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CohereModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CohereModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CohereModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CohereModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CohereModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CoherePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CoherePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CoherePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CoherePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CoherePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CohereTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CohereTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CohereTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CohereTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CohereTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConditionalDetrConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConditionalDetrConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConditionalDetrConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConditionalDetrConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConditionalDetrConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConditionalDetrFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConditionalDetrFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConditionalDetrFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConditionalDetrFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConditionalDetrFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConditionalDetrForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConditionalDetrForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConditionalDetrForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConditionalDetrForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConditionalDetrForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConditionalDetrForSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConditionalDetrForSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConditionalDetrForSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConditionalDetrForSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConditionalDetrForSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConditionalDetrImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConditionalDetrImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConditionalDetrImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConditionalDetrImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConditionalDetrImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConditionalDetrModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConditionalDetrModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConditionalDetrModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConditionalDetrModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConditionalDetrModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConditionalDetrPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConditionalDetrPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConditionalDetrPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConditionalDetrPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConditionalDetrPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvBertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextV2Backbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextV2Backbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextV2Backbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextV2Backbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextV2Backbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextV2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextV2ForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextV2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextV2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextV2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextV2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextV2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ConvNextV2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ConvNextV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ConvNextV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ConvNextV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ConvNextV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CpmAntConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CpmAntConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CpmAntConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CpmAntConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CpmAntConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CpmAntForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CpmAntForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CpmAntForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CpmAntForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CpmAntForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CpmAntModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CpmAntModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CpmAntModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CpmAntModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CpmAntModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CpmAntPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CpmAntPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CpmAntPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CpmAntPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CpmAntPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CpmAntTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CpmAntTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CpmAntTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CpmAntTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CpmAntTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CpmTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CpmTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CpmTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CpmTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CpmTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CvtConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CvtConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CvtConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CvtConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CvtConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CvtForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CvtForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CvtForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CvtForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CvtForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CvtModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CvtModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CvtModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CvtModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CvtModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class CvtPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import CvtPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return CvtPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import CvtPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return CvtPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRContextEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRContextEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRContextEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRContextEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRContextEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRContextEncoderTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRContextEncoderTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRContextEncoderTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRContextEncoderTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRContextEncoderTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRContextEncoderTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRContextEncoderTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRContextEncoderTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRContextEncoderTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRContextEncoderTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRPretrainedContextEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRPretrainedContextEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRPretrainedContextEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRPretrainedContextEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRPretrainedContextEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRPretrainedQuestionEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRPretrainedQuestionEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRPretrainedQuestionEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRPretrainedQuestionEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRPretrainedQuestionEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRPretrainedReader(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRPretrainedReader
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRPretrainedReader.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRPretrainedReader
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRPretrainedReader.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRQuestionEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRQuestionEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRQuestionEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRQuestionEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRQuestionEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRQuestionEncoderTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRQuestionEncoderTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRQuestionEncoderTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRQuestionEncoderTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRQuestionEncoderTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRQuestionEncoderTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRQuestionEncoderTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRQuestionEncoderTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRQuestionEncoderTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRQuestionEncoderTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRReader(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRReader
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRReader.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRReader
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRReader.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRReaderTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRReaderTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRReaderTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRReaderTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRReaderTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPRReaderTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPRReaderTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPRReaderTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPRReaderTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPRReaderTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPTFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPTForDepthEstimation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPTForDepthEstimation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPTForDepthEstimation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPTForDepthEstimation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPTForDepthEstimation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPTForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPTForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPTForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPTForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPTForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPTImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DPTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DPTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DPTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DPTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DPTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecAudioConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecAudioConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecAudioConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecAudioConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecAudioConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecAudioForAudioFrameClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecAudioForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecAudioForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecAudioForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecAudioForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecAudioForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecAudioForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecAudioForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecAudioForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecAudioForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecAudioForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecAudioForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecAudioForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecAudioForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecAudioForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecAudioForXVector(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecAudioForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecAudioForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecAudioForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecAudioForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecAudioModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecAudioModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecAudioModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecAudioModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecAudioModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecAudioPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecAudioPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecAudioPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecAudioPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecAudioPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecTextPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecTextPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecTextPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecTextPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecTextPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecVisionForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecVisionForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecVisionForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecVisionForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecVisionForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecVisionForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecVisionForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecVisionForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecVisionForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecVisionForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Data2VecVisionPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Data2VecVisionPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Data2VecVisionPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Data2VecVisionPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Data2VecVisionPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2ForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2ForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2ForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2ForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2ForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2ForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2ForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2ForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2ForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2ForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2ForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2ForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DebertaV2TokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DebertaV2TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DebertaV2TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DebertaV2TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DebertaV2TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DecisionTransformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DecisionTransformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DecisionTransformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DecisionTransformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DecisionTransformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DecisionTransformerGPT2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DecisionTransformerGPT2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DecisionTransformerGPT2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DecisionTransformerGPT2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DecisionTransformerGPT2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DecisionTransformerGPT2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DecisionTransformerGPT2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DecisionTransformerGPT2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DecisionTransformerGPT2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DecisionTransformerGPT2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DecisionTransformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DecisionTransformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DecisionTransformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DecisionTransformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DecisionTransformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DecisionTransformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DecisionTransformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DecisionTransformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DecisionTransformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DecisionTransformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeformableDetrConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeformableDetrConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeformableDetrConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeformableDetrConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeformableDetrConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeformableDetrFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeformableDetrFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeformableDetrFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeformableDetrFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeformableDetrFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeformableDetrForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeformableDetrForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeformableDetrForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeformableDetrForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeformableDetrForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeformableDetrImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeformableDetrImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeformableDetrImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeformableDetrImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeformableDetrImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeformableDetrModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeformableDetrModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeformableDetrModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeformableDetrModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeformableDetrModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeformableDetrPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeformableDetrPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeformableDetrPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeformableDetrPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeformableDetrPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeiTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeiTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeiTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeiTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeiTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeiTFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeiTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeiTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeiTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeiTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeiTForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeiTForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeiTForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeiTForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeiTForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeiTForImageClassificationWithTeacher(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeiTForImageClassificationWithTeacher
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeiTForImageClassificationWithTeacher.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeiTForImageClassificationWithTeacher
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeiTForImageClassificationWithTeacher.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeiTForMaskedImageModeling(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeiTForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeiTForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeiTForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeiTForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeiTImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeiTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeiTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeiTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeiTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeiTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeiTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeiTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeiTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeiTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DeiTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DeiTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DeiTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DeiTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DeiTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DepthAnythingConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DepthAnythingConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DepthAnythingConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DepthAnythingConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DepthAnythingConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DepthAnythingForDepthEstimation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DepthAnythingForDepthEstimation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DepthAnythingForDepthEstimation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DepthAnythingForDepthEstimation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DepthAnythingForDepthEstimation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DepthAnythingPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DepthAnythingPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DepthAnythingPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DepthAnythingPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DepthAnythingPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetaForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetaForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetaForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetaForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetaForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetaImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetaImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetaImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetaImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetaImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetrConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetrConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetrConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetrConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetrConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetrFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetrFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetrFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetrFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetrFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetrForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetrForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetrForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetrForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetrForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetrForSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetrForSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetrForSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetrForSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetrForSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetrImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetrImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetrImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetrImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetrImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetrModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetrModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetrModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetrModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetrModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DetrPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DetrPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DetrPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DetrPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DetrPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DinatBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DinatBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DinatBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DinatBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DinatBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DinatConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DinatConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DinatConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DinatConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DinatConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DinatForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DinatForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DinatForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DinatForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DinatForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DinatModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DinatModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DinatModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DinatModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DinatModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DinatPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DinatPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DinatPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DinatPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DinatPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Dinov2Backbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Dinov2Backbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Dinov2Backbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Dinov2Backbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Dinov2Backbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Dinov2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Dinov2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Dinov2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Dinov2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Dinov2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Dinov2ForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Dinov2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Dinov2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Dinov2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Dinov2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Dinov2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Dinov2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Dinov2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Dinov2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Dinov2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Dinov2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Dinov2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Dinov2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Dinov2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Dinov2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DistilBertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DistilBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DistilBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DistilBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DistilBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DonutFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DonutFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DonutFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DonutFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DonutFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DonutImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DonutImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DonutImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DonutImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DonutImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DonutProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DonutProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DonutProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DonutProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DonutProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DonutSwinConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DonutSwinConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DonutSwinConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DonutSwinConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DonutSwinConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DonutSwinModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DonutSwinModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DonutSwinModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DonutSwinModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DonutSwinModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class DonutSwinPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import DonutSwinPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return DonutSwinPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import DonutSwinPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return DonutSwinPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientFormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientFormerForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientFormerForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientFormerForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientFormerForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientFormerForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientFormerForImageClassificationWithTeacher(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientFormerForImageClassificationWithTeacher
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientFormerForImageClassificationWithTeacher.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientFormerForImageClassificationWithTeacher
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientFormerForImageClassificationWithTeacher.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientFormerImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientFormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientFormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientFormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientFormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientFormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientFormerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientNetForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientNetForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientNetForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientNetForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientNetForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientNetImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientNetImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientNetImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientNetImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientNetImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EfficientNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EfficientNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EfficientNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EfficientNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EfficientNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ElectraTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ElectraTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ElectraTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ElectraTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ElectraTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EncodecConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EncodecConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EncodecConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EncodecConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EncodecConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EncodecFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EncodecFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EncodecFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EncodecFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EncodecFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EncodecModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EncodecModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EncodecModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EncodecModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EncodecModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EncodecPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EncodecPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EncodecPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EncodecPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EncodecPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EncoderDecoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EncoderDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EncoderDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EncoderDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EncoderDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EncoderDecoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EncoderDecoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EncoderDecoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EncoderDecoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EncoderDecoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieForNextSentencePrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieMConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieMForInformationExtraction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieMForInformationExtraction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieMForInformationExtraction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieMForInformationExtraction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieMForInformationExtraction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieMForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieMForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieMForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieMForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieMForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieMForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieMForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieMForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieMForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieMForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieMForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieMForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieMForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieMForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieMForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieMForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieMModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieMPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErnieModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErnieModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErnieModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErnieModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErnieModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ErniePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ErniePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ErniePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ErniePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ErniePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmFoldPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmFoldPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmFoldPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmFoldPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmFoldPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmForProteinFolding(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmForProteinFolding
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmForProteinFolding.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmForProteinFolding
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmForProteinFolding.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class EsmTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import EsmTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return EsmTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import EsmTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return EsmTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetForNextSentencePrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FNetTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FNetTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FNetTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FNetTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FNetTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FSMTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FSMTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FSMTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FSMTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FSMTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FSMTForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FSMTForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FSMTForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FSMTForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FSMTForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FSMTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FSMTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FSMTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FSMTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FSMTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FSMTTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FSMTTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FSMTTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FSMTTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FSMTTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FalconConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FalconConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FalconConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FalconConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FalconConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FalconForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FalconForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FalconForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FalconForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FalconForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FalconForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FalconForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FalconForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FalconForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FalconForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FalconForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FalconForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FalconForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FalconForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FalconForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FalconForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FalconForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FalconForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FalconForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FalconForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FalconModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FalconModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FalconModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FalconModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FalconModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FalconPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FalconPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FalconPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FalconPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FalconPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FastSpeech2ConformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FastSpeech2ConformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FastSpeech2ConformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FastSpeech2ConformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FastSpeech2ConformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FastSpeech2ConformerHifiGan(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FastSpeech2ConformerHifiGan
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FastSpeech2ConformerHifiGan.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FastSpeech2ConformerHifiGan
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FastSpeech2ConformerHifiGan.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FastSpeech2ConformerHifiGanConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FastSpeech2ConformerHifiGanConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FastSpeech2ConformerHifiGanConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FastSpeech2ConformerHifiGanConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FastSpeech2ConformerHifiGanConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FastSpeech2ConformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FastSpeech2ConformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FastSpeech2ConformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FastSpeech2ConformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FastSpeech2ConformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FastSpeech2ConformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FastSpeech2ConformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FastSpeech2ConformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FastSpeech2ConformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FastSpeech2ConformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FastSpeech2ConformerTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FastSpeech2ConformerTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FastSpeech2ConformerTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FastSpeech2ConformerTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FastSpeech2ConformerTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FastSpeech2ConformerWithHifiGan(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FastSpeech2ConformerWithHifiGan
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FastSpeech2ConformerWithHifiGan.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FastSpeech2ConformerWithHifiGan
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FastSpeech2ConformerWithHifiGan.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FastSpeech2ConformerWithHifiGanConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FastSpeech2ConformerWithHifiGanConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FastSpeech2ConformerWithHifiGanConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FastSpeech2ConformerWithHifiGanConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FastSpeech2ConformerWithHifiGanConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FeatureExtractionMixin(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FeatureExtractionMixin
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FeatureExtractionMixin.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FeatureExtractionMixin
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FeatureExtractionMixin.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertForQuestionAnsweringSimple(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertForQuestionAnsweringSimple
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertForQuestionAnsweringSimple.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertForQuestionAnsweringSimple
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertForQuestionAnsweringSimple.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlaubertWithLMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlaubertWithLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlaubertWithLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlaubertWithLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlaubertWithLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaImageCodebook(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaImageCodebook
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaImageCodebook.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaImageCodebook
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaImageCodebook.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaImageCodebookConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaImageCodebookConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaImageCodebookConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaImageCodebookConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaImageCodebookConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaImageConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaImageConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaImageConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaImageConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaImageConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaImageModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaImageModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaImageModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaImageModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaImageModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaMultimodalConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaMultimodalConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaMultimodalConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaMultimodalConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaMultimodalConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaMultimodalModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaMultimodalModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaMultimodalModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaMultimodalModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaMultimodalModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FlavaTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FlavaTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FlavaTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FlavaTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FlavaTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FocalNetBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FocalNetBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FocalNetBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FocalNetBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FocalNetBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FocalNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FocalNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FocalNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FocalNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FocalNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FocalNetForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FocalNetForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FocalNetForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FocalNetForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FocalNetForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FocalNetForMaskedImageModeling(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FocalNetForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FocalNetForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FocalNetForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FocalNetForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FocalNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FocalNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FocalNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FocalNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FocalNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FocalNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FocalNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FocalNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FocalNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FocalNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelBaseModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelBaseModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelBaseModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelBaseModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelBaseModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FunnelTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FunnelTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FunnelTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FunnelTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FunnelTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FuyuConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FuyuConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FuyuConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FuyuConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FuyuConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FuyuForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FuyuForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FuyuForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FuyuForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FuyuForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FuyuImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FuyuImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FuyuImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FuyuImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FuyuImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FuyuPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FuyuPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FuyuPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FuyuPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FuyuPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class FuyuProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import FuyuProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return FuyuProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import FuyuProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return FuyuProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GLPNConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GLPNConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GLPNConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GLPNConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GLPNConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GLPNFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GLPNFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GLPNFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GLPNFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GLPNFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GLPNForDepthEstimation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GLPNForDepthEstimation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GLPNForDepthEstimation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GLPNForDepthEstimation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GLPNForDepthEstimation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GLPNImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GLPNImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GLPNImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GLPNImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GLPNImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GLPNModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GLPNModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GLPNModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GLPNModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GLPNModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GLPNPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GLPNPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GLPNPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GLPNPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GLPNPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2DoubleHeadsModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2DoubleHeadsModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2DoubleHeadsModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2DoubleHeadsModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2DoubleHeadsModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2ForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2ForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2LMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2LMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2LMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2LMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2LMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2Tokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPT2TokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPT2TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPT2TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPT2TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPT2TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTBigCodeConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTBigCodeConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTBigCodeConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTBigCodeConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTBigCodeConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTBigCodeForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTBigCodeForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTBigCodeForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTBigCodeForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTBigCodeForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTBigCodeForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTBigCodeForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTBigCodeForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTBigCodeForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTBigCodeForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTBigCodeForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTBigCodeForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTBigCodeForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTBigCodeForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTBigCodeForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTBigCodeModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTBigCodeModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTBigCodeModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTBigCodeModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTBigCodeModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTBigCodePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTBigCodePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTBigCodePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTBigCodePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTBigCodePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTJConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTJConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTJConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTJConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTJConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTJForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTJForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTJForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTJForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTJForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTJForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTJForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTJForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTJForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTJForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTJForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTJForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTJForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTJForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTJForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTJModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTJModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTJModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTJModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTJModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTJPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTJPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTJPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTJPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTJPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXJapaneseConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXJapaneseConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXJapaneseConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXJapaneseConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXJapaneseConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXJapaneseForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXJapaneseForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXJapaneseForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXJapaneseForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXJapaneseForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXJapaneseModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXJapaneseModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXJapaneseModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXJapaneseModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXJapaneseModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXJapanesePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXJapanesePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXJapanesePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXJapanesePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXJapanesePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXJapaneseTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXJapaneseTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXJapaneseTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXJapaneseTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXJapaneseTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTNeoXTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTNeoXTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTNeoXTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTNeoXTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTNeoXTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTSanJapaneseConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTSanJapaneseConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTSanJapaneseConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTSanJapaneseConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTSanJapaneseConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTSanJapaneseForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTSanJapaneseForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTSanJapaneseForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTSanJapaneseForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTSanJapaneseForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTSanJapaneseModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTSanJapaneseModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTSanJapaneseModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTSanJapaneseModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTSanJapaneseModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTSanJapanesePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTSanJapanesePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTSanJapanesePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTSanJapanesePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTSanJapanesePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GPTSanJapaneseTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GPTSanJapaneseTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GPTSanJapaneseTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GPTSanJapaneseTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GPTSanJapaneseTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GemmaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GemmaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GemmaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GemmaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GemmaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GemmaForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GemmaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GemmaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GemmaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GemmaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GemmaForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GemmaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GemmaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GemmaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GemmaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GemmaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GemmaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GemmaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GemmaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GemmaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GemmaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GemmaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GemmaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GemmaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GemmaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GemmaTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GemmaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GemmaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GemmaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GemmaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GenerationConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GenerationConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GenerationConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GenerationConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GenerationConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GitConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GitForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GitForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GitForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GitForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GitForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GitModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GitPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GitProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GitProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GitProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GitProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GitProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GitVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GitVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GitVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GitVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GitVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GitVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GitVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GitVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GitVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GitVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GraphormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GraphormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GraphormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GraphormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GraphormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GraphormerForGraphClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GraphormerForGraphClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GraphormerForGraphClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GraphormerForGraphClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GraphormerForGraphClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GraphormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GraphormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GraphormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GraphormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GraphormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GraphormerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GraphormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GraphormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GraphormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GraphormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GroupViTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GroupViTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GroupViTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GroupViTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GroupViTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GroupViTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GroupViTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GroupViTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GroupViTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GroupViTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GroupViTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GroupViTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GroupViTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GroupViTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GroupViTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GroupViTTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GroupViTTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GroupViTTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GroupViTTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GroupViTTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GroupViTTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GroupViTTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GroupViTTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GroupViTTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GroupViTTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GroupViTVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GroupViTVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GroupViTVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GroupViTVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GroupViTVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class GroupViTVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import GroupViTVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return GroupViTVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import GroupViTVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return GroupViTVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class HerbertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import HerbertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return HerbertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import HerbertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return HerbertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class HerbertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import HerbertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return HerbertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import HerbertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return HerbertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class HubertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import HubertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return HubertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import HubertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return HubertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class HubertForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import HubertForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return HubertForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import HubertForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return HubertForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class HubertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import HubertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return HubertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import HubertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return HubertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class HubertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import HubertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return HubertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import HubertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return HubertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class HubertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import HubertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return HubertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import HubertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return HubertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IdeficsConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IdeficsConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IdeficsConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IdeficsConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IdeficsConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IdeficsForVisionText2Text(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IdeficsForVisionText2Text
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IdeficsForVisionText2Text.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IdeficsForVisionText2Text
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IdeficsForVisionText2Text.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IdeficsImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IdeficsImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IdeficsImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IdeficsImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IdeficsImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IdeficsModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IdeficsModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IdeficsModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IdeficsModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IdeficsModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IdeficsPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IdeficsPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IdeficsPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IdeficsPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IdeficsPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class IdeficsProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import IdeficsProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return IdeficsProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import IdeficsProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return IdeficsProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ImageGPTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ImageGPTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ImageGPTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ImageGPTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ImageGPTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ImageGPTFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ImageGPTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ImageGPTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ImageGPTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ImageGPTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ImageGPTForCausalImageModeling(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ImageGPTForCausalImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ImageGPTForCausalImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ImageGPTForCausalImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ImageGPTForCausalImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ImageGPTForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ImageGPTForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ImageGPTForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ImageGPTForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ImageGPTForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ImageGPTImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ImageGPTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ImageGPTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ImageGPTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ImageGPTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ImageGPTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ImageGPTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ImageGPTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ImageGPTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ImageGPTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ImageGPTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ImageGPTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ImageGPTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ImageGPTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ImageGPTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ImageProcessingMixin(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ImageProcessingMixin
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ImageProcessingMixin.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ImageProcessingMixin
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ImageProcessingMixin.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InformerForPrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InformerForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InformerForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InformerForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InformerForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InstructBlipConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InstructBlipConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InstructBlipConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InstructBlipConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InstructBlipConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InstructBlipForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InstructBlipForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InstructBlipForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InstructBlipForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InstructBlipForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InstructBlipPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InstructBlipPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InstructBlipPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InstructBlipPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InstructBlipPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InstructBlipProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InstructBlipProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InstructBlipProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InstructBlipProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InstructBlipProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InstructBlipQFormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InstructBlipQFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InstructBlipQFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InstructBlipQFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InstructBlipQFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InstructBlipQFormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InstructBlipQFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InstructBlipQFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InstructBlipQFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InstructBlipQFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InstructBlipVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InstructBlipVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InstructBlipVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InstructBlipVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InstructBlipVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class InstructBlipVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import InstructBlipVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return InstructBlipVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import InstructBlipVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return InstructBlipVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class JukeboxConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import JukeboxConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return JukeboxConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import JukeboxConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return JukeboxConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class JukeboxModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import JukeboxModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return JukeboxModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import JukeboxModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return JukeboxModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class JukeboxPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import JukeboxPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return JukeboxPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import JukeboxPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return JukeboxPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class JukeboxPrior(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import JukeboxPrior
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return JukeboxPrior.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import JukeboxPrior
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return JukeboxPrior.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class JukeboxPriorConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import JukeboxPriorConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return JukeboxPriorConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import JukeboxPriorConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return JukeboxPriorConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class JukeboxTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import JukeboxTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return JukeboxTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import JukeboxTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return JukeboxTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class JukeboxVQVAE(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import JukeboxVQVAE
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return JukeboxVQVAE.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import JukeboxVQVAE
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return JukeboxVQVAE.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class JukeboxVQVAEConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import JukeboxVQVAEConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return JukeboxVQVAEConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import JukeboxVQVAEConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return JukeboxVQVAEConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Kosmos2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Kosmos2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Kosmos2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Kosmos2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Kosmos2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Kosmos2ForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Kosmos2ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Kosmos2ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Kosmos2ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Kosmos2ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Kosmos2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Kosmos2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Kosmos2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Kosmos2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Kosmos2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Kosmos2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Kosmos2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Kosmos2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Kosmos2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Kosmos2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Kosmos2Processor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Kosmos2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Kosmos2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Kosmos2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Kosmos2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LEDConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LEDConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LEDConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LEDConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LEDConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LEDForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LEDForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LEDForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LEDForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LEDForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LEDForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LEDForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LEDForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LEDForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LEDForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LEDForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LEDForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LEDForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LEDForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LEDForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LEDModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LEDModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LEDModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LEDModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LEDModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LEDPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LEDPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LEDPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LEDPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LEDPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LEDTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LEDTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LEDTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LEDTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LEDTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LEDTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LEDTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LEDTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LEDTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LEDTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2FeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2ForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2ForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2ImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2Processor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2Tokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv2TokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv2TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv2TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv2TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv2TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3FeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3ForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3ForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3ImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3Processor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3Tokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutLMv3TokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutLMv3TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutLMv3TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutLMv3TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutLMv3TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutXLMProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutXLMProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutXLMProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutXLMProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutXLMProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LayoutXLMTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LayoutXLMTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LayoutXLMTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LayoutXLMTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LayoutXLMTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LevitConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LevitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LevitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LevitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LevitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LevitFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LevitFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LevitFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LevitFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LevitFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LevitForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LevitForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LevitForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LevitForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LevitForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LevitForImageClassificationWithTeacher(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LevitForImageClassificationWithTeacher
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LevitForImageClassificationWithTeacher.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LevitForImageClassificationWithTeacher
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LevitForImageClassificationWithTeacher.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LevitImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LevitImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LevitImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LevitImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LevitImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LevitModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LevitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LevitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LevitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LevitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LevitPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LevitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LevitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LevitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LevitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LiltConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LiltConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LiltConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LiltConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LiltConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LiltForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LiltForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LiltForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LiltForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LiltForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LiltForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LiltForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LiltForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LiltForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LiltForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LiltForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LiltForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LiltForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LiltForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LiltForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LiltModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LiltModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LiltModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LiltModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LiltModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LiltPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LiltPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LiltPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LiltPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LiltPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlamaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlamaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlamaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlamaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlamaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlamaForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlamaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlamaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlamaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlamaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlamaForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlamaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlamaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlamaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlamaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlamaForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlamaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlamaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlamaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlamaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlamaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlamaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlamaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlamaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlamaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlamaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlamaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlamaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlamaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlamaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlamaTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlamaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlamaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlamaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlamaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaNextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaNextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaNextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaNextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaNextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaNextForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaNextForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaNextForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaNextForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaNextForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaNextImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaNextImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaNextImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaNextImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaNextImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaNextPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaNextPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaNextPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaNextPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaNextPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaNextProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaNextProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaNextProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaNextProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaNextProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LlavaProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LlavaProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LlavaProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LlavaProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LlavaProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LocalAgent(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LocalAgent
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LocalAgent.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LocalAgent
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LocalAgent.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongT5Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongT5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongT5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongT5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongT5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongT5EncoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongT5EncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongT5EncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongT5EncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongT5EncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongT5ForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongT5ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongT5ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongT5ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongT5ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongT5Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongT5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongT5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongT5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongT5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongT5PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongT5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongT5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongT5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongT5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LongformerTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LongformerTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LongformerTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LongformerTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LongformerTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeForEntityClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeForEntityClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeForEntityClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeForEntityClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeForEntityClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeForEntityPairClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeForEntityPairClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeForEntityPairClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeForEntityPairClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeForEntityPairClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeForEntitySpanClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeForEntitySpanClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeForEntitySpanClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeForEntitySpanClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeForEntitySpanClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LukeTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LukeTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LukeTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LukeTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LukeTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LxmertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LxmertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LxmertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LxmertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LxmertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LxmertForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LxmertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LxmertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LxmertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LxmertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LxmertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LxmertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LxmertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LxmertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LxmertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LxmertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LxmertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LxmertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LxmertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LxmertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LxmertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LxmertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LxmertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LxmertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LxmertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LxmertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LxmertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LxmertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LxmertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LxmertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class LxmertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import LxmertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return LxmertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import LxmertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return LxmertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class M2M100Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import M2M100Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return M2M100Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import M2M100Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return M2M100Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class M2M100ForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import M2M100ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return M2M100ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import M2M100ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return M2M100ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class M2M100Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import M2M100Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return M2M100Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import M2M100Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return M2M100Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class M2M100PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import M2M100PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return M2M100PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import M2M100PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return M2M100PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBart50TokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBart50TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBart50TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBart50TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBart50TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBartConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBartConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBartConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBartConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBartConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBartForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBartForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBartForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBartForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBartForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBartForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBartForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBartForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBartForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBartForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBartForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBartForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBartForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBartForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBartForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBartForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBartForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBartForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBartForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBartForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBartModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBartModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBartModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBartModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBartModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBartPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBartPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBartPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBartPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBartPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MBartTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MBartTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MBartTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MBartTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MBartTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MCTCTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MCTCTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MCTCTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MCTCTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MCTCTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MCTCTFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MCTCTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MCTCTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MCTCTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MCTCTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MCTCTForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MCTCTForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MCTCTForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MCTCTForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MCTCTForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MCTCTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MCTCTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MCTCTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MCTCTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MCTCTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MCTCTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MCTCTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MCTCTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MCTCTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MCTCTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MCTCTProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MCTCTProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MCTCTProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MCTCTProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MCTCTProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MPNetTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MPNetTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MPNetTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MPNetTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MPNetTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MT5Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MT5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MT5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MT5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MT5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MT5EncoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MT5EncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MT5EncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MT5EncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MT5EncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MT5ForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MT5ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MT5ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MT5ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MT5ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MT5ForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MT5ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MT5ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MT5ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MT5ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MT5ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MT5ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MT5ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MT5ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MT5ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MT5ForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MT5ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MT5ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MT5ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MT5ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MT5Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MT5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MT5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MT5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MT5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MT5PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MT5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MT5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MT5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MT5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5TokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MambaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MambaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MambaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MambaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MambaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MambaForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MambaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MambaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MambaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MambaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MambaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MambaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MambaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MambaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MambaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MambaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MambaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MambaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MambaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MambaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarianConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarianConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarianConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarianConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarianConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarianForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarianForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarianForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarianForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarianForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarianMTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarianMTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarianMTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarianMTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarianMTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarianModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarianModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarianModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarianModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarianModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MarkupLMTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MarkupLMTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MarkupLMTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MarkupLMTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MarkupLMTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Mask2FormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Mask2FormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Mask2FormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Mask2FormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Mask2FormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Mask2FormerForUniversalSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Mask2FormerForUniversalSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Mask2FormerForUniversalSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Mask2FormerForUniversalSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Mask2FormerForUniversalSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Mask2FormerImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Mask2FormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Mask2FormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Mask2FormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Mask2FormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Mask2FormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Mask2FormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Mask2FormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Mask2FormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Mask2FormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Mask2FormerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Mask2FormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Mask2FormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Mask2FormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Mask2FormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MaskFormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MaskFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MaskFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MaskFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MaskFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MaskFormerFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MaskFormerFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MaskFormerFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MaskFormerFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MaskFormerFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MaskFormerForInstanceSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MaskFormerForInstanceSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MaskFormerForInstanceSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MaskFormerForInstanceSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MaskFormerForInstanceSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MaskFormerImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MaskFormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MaskFormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MaskFormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MaskFormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MaskFormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MaskFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MaskFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MaskFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MaskFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MaskFormerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MaskFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MaskFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MaskFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MaskFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MaskFormerSwinBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MaskFormerSwinBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MaskFormerSwinBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MaskFormerSwinBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MaskFormerSwinBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MaskFormerSwinConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MaskFormerSwinConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MaskFormerSwinConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MaskFormerSwinConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MaskFormerSwinConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertForNextSentencePrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MegatronBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MegatronBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MegatronBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MegatronBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MegatronBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MgpstrConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MgpstrConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MgpstrConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MgpstrConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MgpstrConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MgpstrForSceneTextRecognition(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MgpstrForSceneTextRecognition
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MgpstrForSceneTextRecognition.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MgpstrForSceneTextRecognition
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MgpstrForSceneTextRecognition.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MgpstrModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MgpstrModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MgpstrModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MgpstrModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MgpstrModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MgpstrPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MgpstrPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MgpstrPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MgpstrPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MgpstrPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MgpstrProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MgpstrProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MgpstrProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MgpstrProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MgpstrProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MgpstrTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MgpstrTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MgpstrTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MgpstrTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MgpstrTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MistralConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MistralConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MistralConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MistralConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MistralConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MistralForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MistralForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MistralForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MistralForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MistralForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MistralForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MistralForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MistralForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MistralForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MistralForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MistralModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MistralModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MistralModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MistralModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MistralModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MistralPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MistralPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MistralPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MistralPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MistralPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MixtralConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MixtralConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MixtralConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MixtralConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MixtralConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MixtralForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MixtralForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MixtralForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MixtralForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MixtralForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MixtralForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MixtralForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MixtralForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MixtralForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MixtralForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MixtralModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MixtralModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MixtralModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MixtralModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MixtralModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MixtralPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MixtralPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MixtralPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MixtralPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MixtralPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertForNextSentencePrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileBertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV1Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV1Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV1Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV1Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV1Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV1FeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV1FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV1FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV1FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV1FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV1ForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV1ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV1ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV1ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV1ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV1ImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV1ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV1ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV1ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV1ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV1Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV1Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV1Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV1Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV1Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV1PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV1PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV1PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV1PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV1PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV2FeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV2FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV2FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV2FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV2FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV2ForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV2ForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV2ForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV2ForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV2ForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV2ForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV2ImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV2ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV2ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV2ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV2ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileNetV2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileNetV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileNetV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileNetV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileNetV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTV2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTV2ForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTV2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTV2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTV2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTV2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTV2ForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTV2ForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTV2ForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTV2ForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTV2ForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTV2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MobileViTV2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MobileViTV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MobileViTV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MobileViTV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MobileViTV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ModelCard(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ModelCard
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ModelCard.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ModelCard
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ModelCard.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MptConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MptConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MptConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MptConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MptConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MptForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MptForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MptForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MptForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MptForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MptForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MptForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MptForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MptForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MptForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MptForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MptForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MptForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MptForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MptForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MptForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MptForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MptForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MptForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MptForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MptModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MptModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MptModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MptModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MptModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MptPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MptPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MptPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MptPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MptPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MraConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MraConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MraConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MraConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MraConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MraForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MraForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MraForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MraForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MraForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MraForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MraForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MraForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MraForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MraForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MraForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MraForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MraForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MraForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MraForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MraForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MraForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MraForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MraForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MraForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MraForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MraForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MraForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MraForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MraForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MraModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MraModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MraModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MraModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MraModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MraPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MraPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MraPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MraPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MraPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenDecoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenMelodyConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenMelodyConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenMelodyConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenMelodyConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenMelodyConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenMelodyDecoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenMelodyDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenMelodyDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenMelodyDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenMelodyDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenMelodyForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenMelodyForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenMelodyForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenMelodyForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenMelodyForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenMelodyForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenMelodyForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenMelodyForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenMelodyForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenMelodyForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenMelodyModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenMelodyModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenMelodyModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenMelodyModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenMelodyModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenMelodyPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenMelodyPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenMelodyPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenMelodyPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenMelodyPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MusicgenProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MusicgenProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MusicgenProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MusicgenProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MusicgenProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class MvpTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import MvpTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return MvpTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import MvpTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return MvpTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NatBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NatBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NatBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NatBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NatBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NatConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NatConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NatConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NatConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NatConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NatForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NatForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NatForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NatForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NatForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NatModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NatModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NatModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NatModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NatModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NatPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NatPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NatPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NatPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NatPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaForNextSentencePrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NezhaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NezhaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NezhaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NezhaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NezhaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NllbMoeConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NllbMoeConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NllbMoeConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NllbMoeConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NllbMoeConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NllbMoeForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NllbMoeForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NllbMoeForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NllbMoeForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NllbMoeForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NllbMoeModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NllbMoeModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NllbMoeModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NllbMoeModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NllbMoeModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NllbMoePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NllbMoePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NllbMoePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NllbMoePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NllbMoePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NllbTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NllbTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NllbTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NllbTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NllbTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NougatImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NougatImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NougatImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NougatImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NougatImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NougatProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NougatProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NougatProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NougatProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NougatProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NougatTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NougatTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NougatTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NougatTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NougatTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NystromformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NystromformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NystromformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NystromformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NystromformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NystromformerForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NystromformerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NystromformerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NystromformerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NystromformerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NystromformerForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NystromformerForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NystromformerForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NystromformerForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NystromformerForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NystromformerForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NystromformerForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NystromformerForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NystromformerForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NystromformerForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NystromformerForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NystromformerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NystromformerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NystromformerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NystromformerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NystromformerForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NystromformerForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NystromformerForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NystromformerForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NystromformerForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NystromformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NystromformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NystromformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NystromformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NystromformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class NystromformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import NystromformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return NystromformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import NystromformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return NystromformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OPTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OPTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OPTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OPTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OPTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OPTForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OPTForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OPTForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OPTForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OPTForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OPTForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OPTForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OPTForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OPTForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OPTForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OPTForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OPTForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OPTForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OPTForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OPTForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OPTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OPTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OPTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OPTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OPTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OPTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OPTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OPTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OPTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OPTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OneFormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OneFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OneFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OneFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OneFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OneFormerForUniversalSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OneFormerForUniversalSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OneFormerForUniversalSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OneFormerForUniversalSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OneFormerForUniversalSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OneFormerImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OneFormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OneFormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OneFormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OneFormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OneFormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OneFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OneFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OneFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OneFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OneFormerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OneFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OneFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OneFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OneFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OneFormerProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OneFormerProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OneFormerProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OneFormerProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OneFormerProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenAIGPTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenAIGPTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenAIGPTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenAIGPTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenAIGPTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenAIGPTDoubleHeadsModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenAIGPTDoubleHeadsModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenAIGPTDoubleHeadsModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenAIGPTDoubleHeadsModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenAIGPTDoubleHeadsModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenAIGPTForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenAIGPTForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenAIGPTForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenAIGPTForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenAIGPTForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenAIGPTLMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenAIGPTLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenAIGPTLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenAIGPTLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenAIGPTLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenAIGPTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenAIGPTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenAIGPTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenAIGPTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenAIGPTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenAIGPTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenAIGPTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenAIGPTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenAIGPTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenAIGPTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenAIGPTTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenAIGPTTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenAIGPTTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenAIGPTTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenAIGPTTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenAIGPTTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenAIGPTTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenAIGPTTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenAIGPTTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenAIGPTTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenLlamaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenLlamaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenLlamaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenLlamaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenLlamaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenLlamaForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenLlamaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenLlamaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenLlamaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenLlamaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenLlamaForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenLlamaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenLlamaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenLlamaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenLlamaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenLlamaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenLlamaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenLlamaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenLlamaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenLlamaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OpenLlamaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OpenLlamaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OpenLlamaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OpenLlamaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OpenLlamaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class OwlViTVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import OwlViTVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return OwlViTVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import OwlViTVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return OwlViTVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2ForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2ForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2ForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2ForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2ForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2ImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2ImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2ImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2Processor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2TextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2TextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2TextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2TextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2TextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2TextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2TextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2TextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2TextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2TextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2VisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2VisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2VisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2VisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2VisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Owlv2VisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Owlv2VisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Owlv2VisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Owlv2VisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Owlv2VisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PLBartConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PLBartConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PLBartConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PLBartConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PLBartConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PLBartForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PLBartForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PLBartForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PLBartForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PLBartForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PLBartForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PLBartForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PLBartForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PLBartForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PLBartForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PLBartForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PLBartForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PLBartForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PLBartForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PLBartForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PLBartModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PLBartModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PLBartModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PLBartModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PLBartModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PLBartPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PLBartPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PLBartPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PLBartPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PLBartPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSMixerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSMixerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSMixerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSMixerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSMixerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSMixerForPrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSMixerForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSMixerForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSMixerForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSMixerForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSMixerForPretraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSMixerForPretraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSMixerForPretraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSMixerForPretraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSMixerForPretraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSMixerForRegression(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSMixerForRegression
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSMixerForRegression.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSMixerForRegression
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSMixerForRegression.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSMixerForTimeSeriesClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSMixerForTimeSeriesClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSMixerForTimeSeriesClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSMixerForTimeSeriesClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSMixerForTimeSeriesClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSMixerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSMixerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSMixerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSMixerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSMixerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSMixerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSMixerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSMixerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSMixerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSMixerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSTForClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSTForClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSTForClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSTForClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSTForClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSTForPrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSTForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSTForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSTForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSTForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSTForPretraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSTForPretraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSTForPretraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSTForPretraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSTForPretraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSTForRegression(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSTForRegression
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSTForRegression.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSTForRegression
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSTForRegression.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PatchTSTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PatchTSTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PatchTSTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PatchTSTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PatchTSTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusXConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusXConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusXConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusXConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusXConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusXForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusXForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusXForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusXForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusXForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusXModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusXModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusXModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusXModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusXModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PegasusXPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PegasusXPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PegasusXPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PegasusXPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PegasusXPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverForImageClassificationConvProcessing(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverForImageClassificationConvProcessing
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverForImageClassificationConvProcessing.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverForImageClassificationConvProcessing
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverForImageClassificationConvProcessing.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverForImageClassificationFourier(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverForImageClassificationFourier
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverForImageClassificationFourier.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverForImageClassificationFourier
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverForImageClassificationFourier.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverForImageClassificationLearned(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverForImageClassificationLearned
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverForImageClassificationLearned.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverForImageClassificationLearned
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverForImageClassificationLearned.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverForMultimodalAutoencoding(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverForMultimodalAutoencoding
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverForMultimodalAutoencoding.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverForMultimodalAutoencoding
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverForMultimodalAutoencoding.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverForOpticalFlow(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverForOpticalFlow
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverForOpticalFlow.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverForOpticalFlow
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverForOpticalFlow.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PerceiverTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PerceiverTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PerceiverTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PerceiverTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PerceiverTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PersimmonConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PersimmonConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PersimmonConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PersimmonConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PersimmonConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PersimmonForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PersimmonForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PersimmonForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PersimmonForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PersimmonForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PersimmonForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PersimmonForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PersimmonForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PersimmonForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PersimmonForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PersimmonModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PersimmonModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PersimmonModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PersimmonModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PersimmonModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PersimmonPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PersimmonPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PersimmonPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PersimmonPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PersimmonPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PhiConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PhiConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PhiConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PhiConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PhiConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PhiForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PhiForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PhiForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PhiForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PhiForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PhiForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PhiForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PhiForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PhiForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PhiForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PhiForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PhiForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PhiForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PhiForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PhiForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PhiModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PhiModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PhiModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PhiModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PhiModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PhiPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PhiPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PhiPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PhiPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PhiPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PhobertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PhobertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PhobertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PhobertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PhobertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pix2StructVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pix2StructVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pix2StructVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pix2StructVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pix2StructVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PoolFormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PoolFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PoolFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PoolFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PoolFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PoolFormerFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PoolFormerFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PoolFormerFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PoolFormerFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PoolFormerFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PoolFormerForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PoolFormerForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PoolFormerForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PoolFormerForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PoolFormerForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PoolFormerImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PoolFormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PoolFormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PoolFormerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PoolFormerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PoolFormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PoolFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PoolFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PoolFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PoolFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PoolFormerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PoolFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PoolFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PoolFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PoolFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pop2PianoConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pop2PianoConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pop2PianoConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pop2PianoConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pop2PianoConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pop2PianoForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pop2PianoForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pop2PianoForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pop2PianoForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pop2PianoForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Pop2PianoPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Pop2PianoPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Pop2PianoPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Pop2PianoPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Pop2PianoPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PreTrainedTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PreTrainedTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PreTrainedTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PreTrainedTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PreTrainedTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PreTrainedTokenizerBase(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PreTrainedTokenizerBase
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PreTrainedTokenizerBase.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PreTrainedTokenizerBase
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PreTrainedTokenizerBase.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PreTrainedTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PreTrainedTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PreTrainedTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PreTrainedTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PreTrainedTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PretrainedBartModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PretrainedBartModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PretrainedBartModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PretrainedBartModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PretrainedBartModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PretrainedConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PretrainedConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PretrainedConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PretrainedConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PretrainedConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PretrainedFSMTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PretrainedFSMTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PretrainedFSMTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PretrainedFSMTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PretrainedFSMTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProcessorMixin(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProcessorMixin
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProcessorMixin.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProcessorMixin
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProcessorMixin.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProphetNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProphetNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProphetNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProphetNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProphetNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProphetNetDecoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProphetNetDecoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProphetNetDecoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProphetNetDecoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProphetNetDecoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProphetNetEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProphetNetEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProphetNetEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProphetNetEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProphetNetEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProphetNetForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProphetNetForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProphetNetForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProphetNetForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProphetNetForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProphetNetForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProphetNetForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProphetNetForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProphetNetForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProphetNetForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProphetNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProphetNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProphetNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProphetNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProphetNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProphetNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProphetNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProphetNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProphetNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProphetNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ProphetNetTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ProphetNetTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ProphetNetTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ProphetNetTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ProphetNetTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtV2Backbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtV2Backbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtV2Backbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtV2Backbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtV2Backbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtV2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtV2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtV2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtV2ForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtV2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtV2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtV2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtV2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtV2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtV2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtV2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class PvtV2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import PvtV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return PvtV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import PvtV2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return PvtV2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertForNextSentencePrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertForNextSentencePrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertForNextSentencePrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertLMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class QDQBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import QDQBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return QDQBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import QDQBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return QDQBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Qwen2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Qwen2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Qwen2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Qwen2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Qwen2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Qwen2ForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Qwen2ForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Qwen2ForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Qwen2ForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Qwen2ForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Qwen2ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Qwen2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Qwen2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Qwen2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Qwen2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Qwen2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Qwen2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Qwen2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Qwen2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Qwen2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Qwen2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Qwen2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Qwen2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Qwen2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Qwen2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Qwen2Tokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Qwen2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Qwen2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Qwen2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Qwen2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Qwen2TokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Qwen2TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Qwen2TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Qwen2TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Qwen2TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RagConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RagConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RagConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RagConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RagConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RagModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RagModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RagModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RagModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RagModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RagPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RagPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RagPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RagPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RagPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RagRetriever(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RagRetriever
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RagRetriever.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RagRetriever
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RagRetriever.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RagSequenceForGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RagSequenceForGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RagSequenceForGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RagSequenceForGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RagSequenceForGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RagTokenForGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RagTokenForGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RagTokenForGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RagTokenForGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RagTokenForGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RagTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RagTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RagTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RagTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RagTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmEmbedder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmEmbedder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmEmbedder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmEmbedder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmEmbedder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmForOpenQA(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmForOpenQA
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmForOpenQA.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmForOpenQA
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmForOpenQA.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmKnowledgeAugEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmKnowledgeAugEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmKnowledgeAugEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmKnowledgeAugEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmKnowledgeAugEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmReader(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmReader
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmReader.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmReader
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmReader.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmRetriever(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmRetriever
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmRetriever.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmRetriever
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmRetriever.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmScorer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmScorer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmScorer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmScorer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmScorer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RealmTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RealmTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RealmTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RealmTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RealmTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ReformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ReformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ReformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ReformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ReformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ReformerForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ReformerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ReformerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ReformerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ReformerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ReformerForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ReformerForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ReformerForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ReformerForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ReformerForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ReformerForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ReformerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ReformerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ReformerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ReformerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ReformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ReformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ReformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ReformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ReformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ReformerModelWithLMHead(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ReformerModelWithLMHead
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ReformerModelWithLMHead.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ReformerModelWithLMHead
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ReformerModelWithLMHead.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ReformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ReformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ReformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ReformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ReformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ReformerTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ReformerTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ReformerTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ReformerTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ReformerTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RegNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RegNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RegNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RegNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RegNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RegNetForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RegNetForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RegNetForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RegNetForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RegNetForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RegNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RegNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RegNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RegNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RegNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RegNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RegNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RegNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RegNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RegNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RemBertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RemBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RemBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RemBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RemBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ResNetBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ResNetBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ResNetBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ResNetBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ResNetBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ResNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ResNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ResNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ResNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ResNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ResNetForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ResNetForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ResNetForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ResNetForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ResNetForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ResNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ResNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ResNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ResNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ResNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ResNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ResNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ResNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ResNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ResNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RetriBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RetriBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RetriBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RetriBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RetriBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RetriBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RetriBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RetriBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RetriBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RetriBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RetriBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RetriBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RetriBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RetriBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RetriBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RetriBertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RetriBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RetriBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RetriBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RetriBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RetriBertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RetriBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RetriBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RetriBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RetriBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoCBertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoCBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoCBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoCBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoCBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RoFormerTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RoFormerTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RoFormerTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RoFormerTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RoFormerTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreLayerNormPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreLayerNormPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreLayerNormPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreLayerNormPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreLayerNormPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RobertaTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RobertaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RobertaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RobertaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RobertaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RwkvConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RwkvConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RwkvConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RwkvConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RwkvConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RwkvForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RwkvForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RwkvForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RwkvForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RwkvForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RwkvModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RwkvModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RwkvModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RwkvModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RwkvModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class RwkvPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import RwkvPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return RwkvPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import RwkvPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return RwkvPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWDConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWDConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWDConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWDConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWDConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWDForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWDForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWDForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWDForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWDForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWDForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWDForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWDForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWDForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWDForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWDModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWDModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWDModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWDModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWDModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWDPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWDPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWDPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWDPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWDPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SEWPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SEWPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SEWPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SEWPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SEWPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SamConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SamConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SamConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SamConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SamConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SamImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SamImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SamImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SamImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SamImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SamMaskDecoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SamMaskDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SamMaskDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SamMaskDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SamMaskDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SamModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SamModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SamModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SamModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SamModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SamPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SamPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SamPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SamPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SamPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SamProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SamProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SamProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SamProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SamProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SamPromptEncoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SamPromptEncoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SamPromptEncoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SamPromptEncoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SamPromptEncoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SamVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SamVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SamVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SamVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SamVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TCodeHifiGan(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TCodeHifiGan
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TCodeHifiGan.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TCodeHifiGan
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TCodeHifiGan.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TForSpeechToSpeech(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TForSpeechToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TForSpeechToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TForSpeechToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TForSpeechToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TForSpeechToText(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TForSpeechToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TForSpeechToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TForSpeechToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TForSpeechToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TForTextToSpeech(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TForTextToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TForTextToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TForTextToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TForTextToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TForTextToText(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TForTextToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TForTextToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TForTextToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TForTextToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TTextToUnitForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TTextToUnitForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TTextToUnitForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TTextToUnitForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TTextToUnitForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TTextToUnitModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TTextToUnitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TTextToUnitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TTextToUnitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TTextToUnitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4TTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4TTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4TTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4TTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4TTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4Tv2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4Tv2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4Tv2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4Tv2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4Tv2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4Tv2ForSpeechToSpeech(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4Tv2ForSpeechToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4Tv2ForSpeechToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4Tv2ForSpeechToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4Tv2ForSpeechToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4Tv2ForSpeechToText(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4Tv2ForSpeechToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4Tv2ForSpeechToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4Tv2ForSpeechToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4Tv2ForSpeechToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4Tv2ForTextToSpeech(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4Tv2ForTextToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4Tv2ForTextToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4Tv2ForTextToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4Tv2ForTextToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4Tv2ForTextToText(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4Tv2ForTextToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4Tv2ForTextToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4Tv2ForTextToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4Tv2ForTextToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4Tv2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4Tv2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4Tv2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4Tv2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4Tv2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SeamlessM4Tv2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SeamlessM4Tv2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SeamlessM4Tv2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SeamlessM4Tv2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SeamlessM4Tv2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegGptConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegGptConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegGptConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegGptConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegGptConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegGptForImageSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegGptForImageSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegGptForImageSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegGptForImageSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegGptForImageSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegGptImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegGptImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegGptImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegGptImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegGptImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegGptModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegGptModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegGptModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegGptModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegGptModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegGptPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegGptPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegGptPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegGptPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegGptPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegformerDecodeHead(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegformerDecodeHead
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegformerDecodeHead.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegformerDecodeHead
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegformerDecodeHead.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegformerFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegformerFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegformerFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegformerFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegformerFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegformerForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegformerForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegformerForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegformerForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegformerForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegformerForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegformerForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegformerForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegformerForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegformerForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegformerImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegformerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegformerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegformerImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegformerImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SegformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SegformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SegformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SegformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SegformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SequenceFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SequenceFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SequenceFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SequenceFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SequenceFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SiglipVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SiglipVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SiglipVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SiglipVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SiglipVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2Text2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2Text2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2Text2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2Text2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2Text2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2Text2ForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2Text2ForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2Text2ForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2Text2ForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2Text2ForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2Text2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2Text2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2Text2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2Text2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2Text2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2Text2Processor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2Text2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2Text2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2Text2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2Text2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2Text2Tokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2Text2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2Text2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2Text2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2Text2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2TextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2TextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2TextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2TextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2TextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2TextFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2TextFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2TextFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2TextFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2TextFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2TextForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2TextForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2TextForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2TextForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2TextForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2TextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2TextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2TextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2TextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2TextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2TextPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2TextPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2TextPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2TextPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2TextPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Speech2TextProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Speech2TextProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Speech2TextProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Speech2TextProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Speech2TextProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechEncoderDecoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechEncoderDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechEncoderDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechEncoderDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechEncoderDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechEncoderDecoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechEncoderDecoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechEncoderDecoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechEncoderDecoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechEncoderDecoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5FeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5ForSpeechToSpeech(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5ForSpeechToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5ForSpeechToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5ForSpeechToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5ForSpeechToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5ForSpeechToText(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5ForSpeechToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5ForSpeechToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5ForSpeechToText
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5ForSpeechToText.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5ForTextToSpeech(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5ForTextToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5ForTextToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5ForTextToSpeech
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5ForTextToSpeech.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5HifiGan(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5HifiGan
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5HifiGan.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5HifiGan
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5HifiGan.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5HifiGanConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5HifiGanConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5HifiGanConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5HifiGanConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5HifiGanConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SpeechT5Processor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SpeechT5Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SpeechT5Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SpeechT5Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SpeechT5Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SplinterConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SplinterConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SplinterConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SplinterConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SplinterConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SplinterForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SplinterForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SplinterForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SplinterForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SplinterForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SplinterForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SplinterForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SplinterForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SplinterForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SplinterForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SplinterModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SplinterModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SplinterModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SplinterModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SplinterModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SplinterPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SplinterPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SplinterPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SplinterPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SplinterPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SplinterTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SplinterTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SplinterTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SplinterTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SplinterTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SplinterTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SplinterTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SplinterTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SplinterTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SplinterTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SqueezeBertTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SqueezeBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SqueezeBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SqueezeBertTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SqueezeBertTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class StableLmConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import StableLmConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return StableLmConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import StableLmConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return StableLmConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class StableLmForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import StableLmForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return StableLmForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import StableLmForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return StableLmForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class StableLmForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import StableLmForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return StableLmForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import StableLmForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return StableLmForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class StableLmModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import StableLmModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return StableLmModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import StableLmModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return StableLmModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class StableLmPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import StableLmPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return StableLmPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import StableLmPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return StableLmPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Starcoder2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Starcoder2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Starcoder2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Starcoder2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Starcoder2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Starcoder2ForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Starcoder2ForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Starcoder2ForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Starcoder2ForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Starcoder2ForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Starcoder2ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Starcoder2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Starcoder2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Starcoder2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Starcoder2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Starcoder2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Starcoder2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Starcoder2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Starcoder2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Starcoder2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Starcoder2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Starcoder2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Starcoder2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Starcoder2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Starcoder2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SuperPointConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SuperPointConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SuperPointConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SuperPointConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SuperPointConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SuperPointForKeypointDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SuperPointForKeypointDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SuperPointForKeypointDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SuperPointForKeypointDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SuperPointForKeypointDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SuperPointImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SuperPointImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SuperPointImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SuperPointImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SuperPointImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SuperPointPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SuperPointPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SuperPointPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SuperPointPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SuperPointPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwiftFormerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwiftFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwiftFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwiftFormerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwiftFormerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwiftFormerForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwiftFormerForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwiftFormerForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwiftFormerForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwiftFormerForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwiftFormerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwiftFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwiftFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwiftFormerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwiftFormerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwiftFormerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwiftFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwiftFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwiftFormerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwiftFormerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swin2SRConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swin2SRConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swin2SRConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swin2SRConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swin2SRConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swin2SRForImageSuperResolution(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swin2SRForImageSuperResolution
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swin2SRForImageSuperResolution.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swin2SRForImageSuperResolution
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swin2SRForImageSuperResolution.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swin2SRImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swin2SRImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swin2SRImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swin2SRImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swin2SRImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swin2SRModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swin2SRModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swin2SRModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swin2SRModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swin2SRModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swin2SRPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swin2SRPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swin2SRPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swin2SRPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swin2SRPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwinBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwinBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwinBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwinBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwinBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwinConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwinConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwinConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwinConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwinConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwinForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwinForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwinForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwinForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwinForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwinForMaskedImageModeling(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwinForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwinForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwinForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwinForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwinModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwinModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwinModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwinModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwinModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwinPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwinPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwinPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwinPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwinPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swinv2Backbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swinv2Backbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swinv2Backbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swinv2Backbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swinv2Backbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swinv2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swinv2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swinv2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swinv2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swinv2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swinv2ForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swinv2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swinv2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swinv2ForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swinv2ForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swinv2ForMaskedImageModeling(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swinv2ForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swinv2ForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swinv2ForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swinv2ForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swinv2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swinv2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swinv2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swinv2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swinv2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Swinv2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Swinv2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Swinv2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Swinv2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Swinv2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwitchTransformersConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwitchTransformersConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwitchTransformersConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwitchTransformersConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwitchTransformersConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwitchTransformersEncoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwitchTransformersEncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwitchTransformersEncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwitchTransformersEncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwitchTransformersEncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwitchTransformersForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwitchTransformersForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwitchTransformersForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwitchTransformersForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwitchTransformersForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwitchTransformersModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwitchTransformersModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwitchTransformersModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwitchTransformersModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwitchTransformersModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class SwitchTransformersPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import SwitchTransformersPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return SwitchTransformersPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import SwitchTransformersPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return SwitchTransformersPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5EncoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5EncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5EncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5EncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5EncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5ForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5ForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5ForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class T5TokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import T5TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return T5TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import T5TokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return T5TokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TableTransformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TableTransformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TableTransformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TableTransformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TableTransformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TableTransformerForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TableTransformerForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TableTransformerForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TableTransformerForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TableTransformerForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TableTransformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TableTransformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TableTransformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TableTransformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TableTransformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TableTransformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TableTransformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TableTransformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TableTransformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TableTransformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TapasConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TapasConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TapasConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TapasConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TapasConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TapasForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TapasForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TapasForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TapasForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TapasForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TapasForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TapasForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TapasForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TapasForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TapasForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TapasForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TapasForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TapasForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TapasForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TapasForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TapasModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TapasModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TapasModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TapasModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TapasModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TapasPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TapasPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TapasPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TapasPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TapasPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TapasTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TapasTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TapasTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TapasTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TapasTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TapexTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TapexTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TapexTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TapexTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TapexTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimeSeriesTransformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimeSeriesTransformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimeSeriesTransformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimeSeriesTransformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimeSeriesTransformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimeSeriesTransformerForPrediction(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimeSeriesTransformerForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimeSeriesTransformerForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimeSeriesTransformerForPrediction
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimeSeriesTransformerForPrediction.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimeSeriesTransformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimeSeriesTransformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimeSeriesTransformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimeSeriesTransformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimeSeriesTransformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimeSeriesTransformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimeSeriesTransformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimeSeriesTransformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimeSeriesTransformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimeSeriesTransformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimesformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimesformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimesformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimesformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimesformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimesformerForVideoClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimesformerForVideoClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimesformerForVideoClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimesformerForVideoClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimesformerForVideoClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimesformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimesformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimesformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimesformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimesformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimesformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimesformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimesformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimesformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimesformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimmBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimmBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimmBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimmBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimmBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TimmBackboneConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TimmBackboneConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TimmBackboneConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TimmBackboneConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TimmBackboneConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TrOCRConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TrOCRConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TrOCRConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TrOCRConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TrOCRConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TrOCRForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TrOCRForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TrOCRForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TrOCRForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TrOCRForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TrOCRPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TrOCRPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TrOCRPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TrOCRPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TrOCRPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TrOCRProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TrOCRProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TrOCRProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TrOCRProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TrOCRProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TrajectoryTransformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TrajectoryTransformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TrajectoryTransformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TrajectoryTransformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TrajectoryTransformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TrajectoryTransformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TrajectoryTransformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TrajectoryTransformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TrajectoryTransformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TrajectoryTransformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TrajectoryTransformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TrajectoryTransformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TrajectoryTransformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TrajectoryTransformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TrajectoryTransformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TransfoXLConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TransfoXLConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TransfoXLConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TransfoXLConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TransfoXLConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TransfoXLCorpus(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TransfoXLCorpus
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TransfoXLCorpus.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TransfoXLCorpus
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TransfoXLCorpus.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TransfoXLForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TransfoXLForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TransfoXLForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TransfoXLForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TransfoXLForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TransfoXLLMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TransfoXLLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TransfoXLLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TransfoXLLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TransfoXLLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TransfoXLModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TransfoXLModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TransfoXLModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TransfoXLModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TransfoXLModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TransfoXLPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TransfoXLPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TransfoXLPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TransfoXLPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TransfoXLPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TransfoXLTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TransfoXLTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TransfoXLTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TransfoXLTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TransfoXLTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvltConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvltConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvltConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvltConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvltConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvltFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvltFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvltFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvltFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvltFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvltForAudioVisualClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvltForAudioVisualClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvltForAudioVisualClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvltForAudioVisualClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvltForAudioVisualClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvltForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvltForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvltForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvltForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvltForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvltImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvltImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvltImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvltImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvltImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvltModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvltModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvltModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvltModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvltModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvltPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvltPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvltPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvltPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvltPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvltProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvltProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvltProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvltProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvltProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvpConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvpConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvpConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvpConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvpConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvpForVideoGrounding(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvpForVideoGrounding
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvpForVideoGrounding.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvpForVideoGrounding
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvpForVideoGrounding.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvpImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvpImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvpImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvpImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvpImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvpModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvpModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvpModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvpModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvpModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvpPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvpPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvpPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvpPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvpPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class TvpProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import TvpProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return TvpProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import TvpProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return TvpProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UMT5Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UMT5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UMT5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UMT5Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UMT5Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UMT5EncoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UMT5EncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UMT5EncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UMT5EncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UMT5EncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UMT5ForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UMT5ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UMT5ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UMT5ForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UMT5ForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UMT5ForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UMT5ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UMT5ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UMT5ForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UMT5ForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UMT5ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UMT5ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UMT5ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UMT5ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UMT5ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UMT5ForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UMT5ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UMT5ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UMT5ForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UMT5ForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UMT5Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UMT5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UMT5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UMT5Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UMT5Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UMT5PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UMT5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UMT5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UMT5PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UMT5PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UdopConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UdopConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UdopConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UdopConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UdopConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UdopEncoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UdopEncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UdopEncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UdopEncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UdopEncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UdopForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UdopForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UdopForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UdopForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UdopForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UdopModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UdopModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UdopModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UdopModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UdopModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UdopPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UdopPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UdopPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UdopPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UdopPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UdopProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UdopProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UdopProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UdopProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UdopProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UdopTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UdopTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UdopTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UdopTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UdopTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechSatConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechSatConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechSatConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechSatConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechSatConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechSatForAudioFrameClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechSatForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechSatForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechSatForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechSatForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechSatForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechSatForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechSatForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechSatForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechSatForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechSatForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechSatForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechSatForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechSatForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechSatForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechSatForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechSatForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechSatForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechSatForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechSatForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechSatForXVector(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechSatForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechSatForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechSatForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechSatForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechSatModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechSatModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechSatModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechSatModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechSatModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UniSpeechSatPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UniSpeechSatPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UniSpeechSatPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UniSpeechSatPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UniSpeechSatPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UnivNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UnivNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UnivNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UnivNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UnivNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UnivNetFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UnivNetFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UnivNetFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UnivNetFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UnivNetFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UnivNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UnivNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UnivNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UnivNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UnivNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UperNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UperNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UperNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UperNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UperNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UperNetForSemanticSegmentation(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UperNetForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UperNetForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UperNetForSemanticSegmentation
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UperNetForSemanticSegmentation.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class UperNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import UperNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return UperNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import UperNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return UperNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VanConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VanConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VanConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VanConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VanConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VanForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VanForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VanForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VanForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VanForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VanModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VanModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VanModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VanModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VanModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VanPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VanPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VanPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VanPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VanPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTForMaskedImageModeling(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTForMaskedImageModeling
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTForMaskedImageModeling.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTHybridConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTHybridConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTHybridConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTHybridConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTHybridConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTHybridForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTHybridForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTHybridForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTHybridForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTHybridForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTHybridImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTHybridImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTHybridImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTHybridImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTHybridImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTHybridModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTHybridModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTHybridModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTHybridModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTHybridModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTHybridPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTHybridPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTHybridPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTHybridPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTHybridPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTMAEConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTMAEConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTMAEConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTMAEConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTMAEConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTMAEForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTMAEForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTMAEForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTMAEForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTMAEForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTMAEModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTMAEModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTMAEModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTMAEModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTMAEModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTMAEPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTMAEPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTMAEPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTMAEPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTMAEPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTMSNConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTMSNConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTMSNConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTMSNConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTMSNConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTMSNForImageClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTMSNForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTMSNForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTMSNForImageClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTMSNForImageClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTMSNModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTMSNModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTMSNModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTMSNModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTMSNModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTMSNPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTMSNPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTMSNPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTMSNPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTMSNPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViTPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViTPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViTPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VideoMAEConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VideoMAEConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VideoMAEConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VideoMAEConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VideoMAEConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VideoMAEFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VideoMAEFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VideoMAEFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VideoMAEFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VideoMAEFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VideoMAEForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VideoMAEForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VideoMAEForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VideoMAEForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VideoMAEForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VideoMAEForVideoClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VideoMAEForVideoClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VideoMAEForVideoClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VideoMAEForVideoClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VideoMAEForVideoClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VideoMAEImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VideoMAEImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VideoMAEImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VideoMAEImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VideoMAEImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VideoMAEModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VideoMAEModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VideoMAEModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VideoMAEModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VideoMAEModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VideoMAEPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VideoMAEPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VideoMAEPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VideoMAEPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VideoMAEPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltForImageAndTextRetrieval(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltForImageAndTextRetrieval
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltForImageAndTextRetrieval.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltForImageAndTextRetrieval
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltForImageAndTextRetrieval.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltForImagesAndTextClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltForImagesAndTextClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltForImagesAndTextClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltForImagesAndTextClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltForImagesAndTextClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class ViltProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import ViltProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return ViltProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import ViltProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return ViltProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VipLlavaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VipLlavaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VipLlavaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VipLlavaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VipLlavaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VipLlavaForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VipLlavaForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VipLlavaForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VipLlavaForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VipLlavaForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VipLlavaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VipLlavaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VipLlavaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VipLlavaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VipLlavaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisionEncoderDecoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisionEncoderDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisionEncoderDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisionEncoderDecoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisionEncoderDecoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisionEncoderDecoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisionEncoderDecoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisionEncoderDecoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisionEncoderDecoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisionEncoderDecoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisionTextDualEncoderConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisionTextDualEncoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisionTextDualEncoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisionTextDualEncoderConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisionTextDualEncoderConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisionTextDualEncoderModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisionTextDualEncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisionTextDualEncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisionTextDualEncoderModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisionTextDualEncoderModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisionTextDualEncoderProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisionTextDualEncoderProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisionTextDualEncoderProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisionTextDualEncoderProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisionTextDualEncoderProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisualBertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisualBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisualBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisualBertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisualBertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisualBertForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisualBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisualBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisualBertForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisualBertForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisualBertForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisualBertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisualBertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisualBertForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisualBertForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisualBertForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisualBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisualBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisualBertForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisualBertForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisualBertForRegionToPhraseAlignment(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisualBertForRegionToPhraseAlignment
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisualBertForRegionToPhraseAlignment.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisualBertForRegionToPhraseAlignment
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisualBertForRegionToPhraseAlignment.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisualBertForVisualReasoning(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisualBertForVisualReasoning
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisualBertForVisualReasoning.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisualBertForVisualReasoning
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisualBertForVisualReasoning.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisualBertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisualBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisualBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisualBertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisualBertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VisualBertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VisualBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VisualBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VisualBertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VisualBertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitDetBackbone(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitDetBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitDetBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitDetBackbone
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitDetBackbone.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitDetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitDetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitDetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitDetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitDetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitDetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitDetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitDetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitDetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitDetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitDetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitDetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitDetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitDetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitDetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitMatteConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitMatteConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitMatteConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitMatteConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitMatteConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitMatteForImageMatting(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitMatteForImageMatting
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitMatteForImageMatting.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitMatteForImageMatting
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitMatteForImageMatting.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitMatteImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitMatteImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitMatteImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitMatteImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitMatteImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitMattePreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitMattePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitMattePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitMattePreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitMattePreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitsConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitsConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitsConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitsConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitsConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitsModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitsModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitsModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitsModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitsModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitsPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitsPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitsPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitsPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitsPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VitsTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VitsTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VitsTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VitsTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VitsTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VivitConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VivitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VivitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VivitConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VivitConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VivitForVideoClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VivitForVideoClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VivitForVideoClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VivitForVideoClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VivitForVideoClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VivitImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VivitImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VivitImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VivitImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VivitImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VivitModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VivitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VivitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VivitModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VivitModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class VivitPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import VivitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return VivitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import VivitPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return VivitPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2BertConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2BertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2BertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2BertConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2BertConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2BertForAudioFrameClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2BertForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2BertForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2BertForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2BertForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2BertForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2BertForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2BertForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2BertForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2BertForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2BertForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2BertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2BertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2BertForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2BertForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2BertForXVector(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2BertForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2BertForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2BertForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2BertForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2BertModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2BertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2BertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2BertModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2BertModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2BertPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2BertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2BertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2BertPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2BertPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2BertProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2BertProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2BertProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2BertProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2BertProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2CTCTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2CTCTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2CTCTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2CTCTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2CTCTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2Config(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2Config
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2Config.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ConformerConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ConformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ConformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ConformerConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ConformerConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ConformerForAudioFrameClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ConformerForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ConformerForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ConformerForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ConformerForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ConformerForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ConformerForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ConformerForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ConformerForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ConformerForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ConformerForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ConformerForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ConformerForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ConformerForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ConformerForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ConformerForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ConformerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ConformerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ConformerForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ConformerForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ConformerForXVector(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ConformerForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ConformerForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ConformerForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ConformerForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ConformerModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ConformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ConformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ConformerModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ConformerModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ConformerPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ConformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ConformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ConformerPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ConformerPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2FeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2FeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2FeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ForAudioFrameClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ForPreTraining(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ForPreTraining
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ForPreTraining.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ForXVector(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2Model(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2Model
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2Model.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2PhonemeCTCTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2PhonemeCTCTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2PhonemeCTCTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2PhonemeCTCTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2PhonemeCTCTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2PreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2PreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2PreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2Processor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2Processor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2Processor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2ProcessorWithLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2ProcessorWithLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2ProcessorWithLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2ProcessorWithLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2ProcessorWithLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class Wav2Vec2Tokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import Wav2Vec2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return Wav2Vec2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import Wav2Vec2Tokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return Wav2Vec2Tokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WavLMConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WavLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WavLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WavLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WavLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WavLMForAudioFrameClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WavLMForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WavLMForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WavLMForAudioFrameClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WavLMForAudioFrameClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WavLMForCTC(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WavLMForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WavLMForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WavLMForCTC
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WavLMForCTC.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WavLMForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WavLMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WavLMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WavLMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WavLMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WavLMForXVector(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WavLMForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WavLMForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WavLMForXVector
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WavLMForXVector.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WavLMModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WavLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WavLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WavLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WavLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WavLMPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WavLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WavLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WavLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WavLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperForAudioClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperForAudioClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperForAudioClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperForAudioClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperForAudioClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class WhisperTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import WhisperTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return WhisperTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import WhisperTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return WhisperTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XCLIPConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XCLIPConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XCLIPConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XCLIPConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XCLIPConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XCLIPModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XCLIPModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XCLIPModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XCLIPModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XCLIPModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XCLIPPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XCLIPPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XCLIPPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XCLIPPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XCLIPPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XCLIPProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XCLIPProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XCLIPProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XCLIPProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XCLIPProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XCLIPTextConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XCLIPTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XCLIPTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XCLIPTextConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XCLIPTextConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XCLIPTextModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XCLIPTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XCLIPTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XCLIPTextModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XCLIPTextModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XCLIPVisionConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XCLIPVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XCLIPVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XCLIPVisionConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XCLIPVisionConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XCLIPVisionModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XCLIPVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XCLIPVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XCLIPVisionModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XCLIPVisionModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XGLMConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XGLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XGLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XGLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XGLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XGLMForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XGLMForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XGLMForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XGLMForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XGLMForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XGLMModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XGLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XGLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XGLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XGLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XGLMPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XGLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XGLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XGLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XGLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XGLMTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XGLMTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XGLMTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XGLMTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XGLMTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMForQuestionAnsweringSimple(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMForQuestionAnsweringSimple
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMForQuestionAnsweringSimple.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMForQuestionAnsweringSimple
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMForQuestionAnsweringSimple.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMProphetNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMProphetNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMProphetNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMProphetNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMProphetNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMProphetNetDecoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMProphetNetDecoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMProphetNetDecoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMProphetNetDecoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMProphetNetDecoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMProphetNetEncoder(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMProphetNetEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMProphetNetEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMProphetNetEncoder
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMProphetNetEncoder.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMProphetNetForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMProphetNetForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMProphetNetForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMProphetNetForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMProphetNetForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMProphetNetForConditionalGeneration(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMProphetNetForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMProphetNetForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMProphetNetForConditionalGeneration
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMProphetNetForConditionalGeneration.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMProphetNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMProphetNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMProphetNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMProphetNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMProphetNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMProphetNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMProphetNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMProphetNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMProphetNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMProphetNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMRobertaXLPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMRobertaXLPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMRobertaXLPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMRobertaXLPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMRobertaXLPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMTokenizer(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMTokenizer
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMTokenizer.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLMWithLMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLMWithLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLMWithLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLMWithLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLMWithLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetForQuestionAnsweringSimple(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetForQuestionAnsweringSimple
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetForQuestionAnsweringSimple.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetForQuestionAnsweringSimple
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetForQuestionAnsweringSimple.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetLMHeadModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetLMHeadModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetLMHeadModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XLNetTokenizerFast(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XLNetTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XLNetTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XLNetTokenizerFast
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XLNetTokenizerFast.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodForCausalLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodForCausalLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodForCausalLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class XmodPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import XmodPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return XmodPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import XmodPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return XmodPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YolosConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YolosConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YolosConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YolosConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YolosConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YolosFeatureExtractor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YolosFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YolosFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YolosFeatureExtractor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YolosFeatureExtractor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YolosForObjectDetection(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YolosForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YolosForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YolosForObjectDetection
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YolosForObjectDetection.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YolosImageProcessor(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YolosImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YolosImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YolosImageProcessor
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YolosImageProcessor.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YolosModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YolosModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YolosModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YolosModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YolosModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YolosPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YolosPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YolosPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YolosPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YolosPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YosoConfig(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YosoConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YosoConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YosoConfig
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YosoConfig.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YosoForMaskedLM(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YosoForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YosoForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YosoForMaskedLM
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YosoForMaskedLM.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YosoForMultipleChoice(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YosoForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YosoForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YosoForMultipleChoice
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YosoForMultipleChoice.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YosoForQuestionAnswering(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YosoForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YosoForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YosoForQuestionAnswering
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YosoForQuestionAnswering.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YosoForSequenceClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YosoForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YosoForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YosoForSequenceClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YosoForSequenceClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YosoForTokenClassification(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YosoForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YosoForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YosoForTokenClassification
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YosoForTokenClassification.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YosoModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YosoModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YosoModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YosoModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YosoModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)



class YosoPreTrainedModel(): 
	@staticmethod
	def from_auto_download(model_name, **kwargs):
		from transformers import YosoPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(model_name=model_name, **kwargs)
		return YosoPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)
 

	@staticmethod
	def from_ipfs(cid, **kwargs):
		from transformers import YosoPreTrainedModel
		this_download = AutoDownloadModel()
		download_folder = this_download.download(cid=cid, **kwargs)
		return YosoPreTrainedModel.from_pretrained(
			download_folder, 
			local_files_only=True,
			**kwargs
		)


