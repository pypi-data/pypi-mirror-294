[project]
name = "alphafold3-pytorch-lightning-hydra"
version = "0.4.28"
description = "AlphaFold 3 - Pytorch"
authors = [
    { name = "Phil Wang", email = "lucidrains@gmail.com" },
    { name = "Alex Morehead", email = "alex.morehead@gmail.com" }
]
readme = "README.md"
requires-python = ">= 3.10"
license = { file = "LICENSE" }
keywords = [
    'artificial intelligence',
    'deep learning',
    'protein structure prediction',
]

classifiers=[
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 3.10',
]

dependencies = [
    # --------- pytorch --------- #
    "lightning>=2.4.0",
    "taylor-series-linear-attention>=0.1.12",
    "torch==2.3.1",
    "torchmetrics>=1.4.1",
    "torchtyping>=0.1.5",
    "torchvision>=0.15.0",
    "torch-geometric",

    # --------- hydra --------- #
    "hydra-core==1.3.2",
    "hydra-colorlog==1.2.0",
    "hydra-optuna-sweeper==1.2.0",
    "omegaconf",
    "pydantic>=2.8.2",
    "pyyaml",

    # --------- loggers --------- #
    # "aim>=3.16.2",  # no lower than 3.16.2, see https://github.com/aimhubio/aim/issues/2550
    # "comet-ml",
    # "mlflow",
    # "neptune-client",
    "wandb==0.16.6",

    # --------- others --------- #
    "adam-atan2-pytorch>=0.0.8", # optimization
    "beartype",        # runtime type checking
    "biopython>=1.83", # for biological data parsing
    "click",           # for command line interfaces
    "CoLT5-attention>=0.11.0", # for CoLT5 attention
    "einx>=0.2.2",     # for Einstein-inspired notation
    "einops>=0.8.0",   # for Einstein-inspired operations
    "environs",        # for environment variable parsing
    "fastapi",         # for web APIs
    "frame-averaging-pytorch>=0.0.18", # for geometric data augmentation
    "gemmi>=0.6.6",    # for mmCIF file metadata parsing
    "huggingface_hub>=0.21.4", # for downloading pretrained HuggingFace weights
    "ipykernel",       # for running Jupyter notebooks
    "jaxtyping>=0.2.28",  # tensor type checking
    "joblib",          # for parallel processing
    "lion-pytorch",    # for optimization with Lion
    "numpy==1.23.5",           # for numerical operations
    "pandas>=1.5.3",   # for data parsing and analysis
    "pdbeccdutils==0.8.5", # for parsing the Protein Data Bank's Chemical Component Dictionary (CCD)
    "polars>=1.1.0",   # for faster data parsing and analysis
    "pre-commit",      # hooks for applying linters on commit
    "pytest",          # tests
    "rdkit>=2023.9.6", # for parsing small molecule data files
    "rich",            # beautiful text formatting in terminal
    "rootutils",       # standardizing the project root setup
    "scikit-learn>=1.5.0", # for basic machine learning utilities
    "setuptools",      # for packaging
    "sh>=2.0.7",       # for running bash commands in some tests (linux/macos only)
    "shortuuid",       # for generating random IDs
    "timeout_decorator>=0.5.0", # for preventing certain functions from executing indefinitely
    "tqdm",            # progress bars
    "loguru",          # for cleaner logging
]

[project.urls]
Homepage = "https://pypi.org/project/alphafold3-pytorch-lightning-hydra/"
Repository = "https://github.com/amorehead/alphafold3-pytorch-lightning-hydra"

[project.optional-dependencies]
examples = []
test = [
    "pytest",
    "pytest-shard",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poetry.dependencies]
deepspeed = { git = "https://github.com/amorehead/DeepSpeed.git", rev = "v0.15.0" }

[tool.pytest.ini_options]
pythonpath = [
  "."
]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

# Assuming you're developing for Python 3.10
target-version = "py310"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["alphafold3_pytorch"]

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]
