# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .api_key_scope import ApiKeyScope
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ApiKey(UniversalBaseModel):
    id: str
    name: str
    masked_key: str = pydantic.Field(alias="maskedKey")
    prefix: typing.Optional[str] = None
    expires_at: typing.Optional[int] = pydantic.Field(alias="expiresAt", default=None)
    total_usage_left: typing.Optional[int] = pydantic.Field(
        alias="totalUsageLeft", default=None
    )
    limit_usage: bool = pydantic.Field(alias="limitUsage")
    scopes: typing.List[ApiKeyScope]
    enabled: bool
    customer_id: typing.Optional[str] = pydantic.Field(alias="customerId", default=None)
    deleted: bool
    created_at: str = pydantic.Field(alias="createdAt")
    updated_at: str = pydantic.Field(alias="updatedAt")
    last_used_at: typing.Optional[str] = pydantic.Field(
        alias="lastUsedAt", default=None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
