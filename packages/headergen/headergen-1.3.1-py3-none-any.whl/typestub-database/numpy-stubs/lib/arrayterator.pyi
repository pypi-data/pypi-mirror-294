from collections.abc import Generator
from numpy import dtype as dtype, generic as generic, ndarray as ndarray
from numpy._typing import DTypeLike as DTypeLike
from typing import Any, overload

class Arrayterator(ndarray[_Shape, _DType]):
    var: ndarray[_Shape, _DType]
    buf_size: None | int
    start: list[int]
    stop: list[int]
    step: list[int]
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def flat(self) -> Generator[_ScalarType, None, None]: ...
    def __init__(self, var: ndarray[_Shape, _DType], buf_size: None | int = ...) -> None: ...
    @overload
    def __array__(self, dtype: None = ...) -> ndarray[Any, _DType]: ...
    @overload
    def __array__(self, dtype: DTypeLike) -> ndarray[Any, dtype[Any]]: ...
    def __getitem__(self, index: _Index) -> Arrayterator[Any, _DType]: ...
    def __iter__(self) -> Generator[ndarray[Any, _DType], None, None]: ...
