from _typeshed import Incomplete
from numpy.compat import asbytes as asbytes, asunicode as asunicode

__docformat__: str

def has_nested_fields(ndtype): ...
def flatten_dtype(ndtype, flatten_base: bool = False): ...

class LineSplitter:
    def autostrip(self, method): ...
    comments: Incomplete
    delimiter: Incomplete
    encoding: Incomplete
    def __init__(self, delimiter: Incomplete | None = None, comments: str = '#', autostrip: bool = True, encoding: Incomplete | None = None) -> None: ...
    def __call__(self, line): ...

class NameValidator:
    defaultexcludelist: Incomplete
    defaultdeletechars: Incomplete
    excludelist: Incomplete
    deletechars: Incomplete
    case_converter: Incomplete
    replace_space: Incomplete
    def __init__(self, excludelist: Incomplete | None = None, deletechars: Incomplete | None = None, case_sensitive: Incomplete | None = None, replace_space: str = '_') -> None: ...
    def validate(self, names, defaultfmt: str = 'f%i', nbfields: Incomplete | None = None): ...
    def __call__(self, names, defaultfmt: str = 'f%i', nbfields: Incomplete | None = None): ...

def str2bool(value): ...

class ConverterError(Exception): ...
class ConverterLockError(ConverterError): ...
class ConversionWarning(UserWarning): ...

class StringConverter:
    @classmethod
    def upgrade_mapper(cls, func, default: Incomplete | None = None) -> None: ...
    func: Incomplete
    default: Incomplete
    missing_values: Incomplete
    type: Incomplete
    def __init__(self, dtype_or_func: Incomplete | None = None, default: Incomplete | None = None, missing_values: Incomplete | None = None, locked: bool = False) -> None: ...
    def __call__(self, value): ...
    def upgrade(self, value): ...
    def iterupgrade(self, value) -> None: ...
    def update(self, func, default: Incomplete | None = None, testing_value: Incomplete | None = None, missing_values: str = '', locked: bool = False) -> None: ...

def easy_dtype(ndtype, names: Incomplete | None = None, defaultfmt: str = 'f%i', **validationargs): ...
