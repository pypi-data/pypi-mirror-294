from numpy.lib._iotools import LineSplitter as LineSplitter, NameValidator as NameValidator, StringConverter as StringConverter, easy_dtype as easy_dtype, flatten_dtype as flatten_dtype, has_nested_fields as has_nested_fields
from numpy.testing import assert_ as assert_, assert_allclose as assert_allclose, assert_equal as assert_equal, assert_raises as assert_raises

class TestLineSplitter:
    def test_no_delimiter(self) -> None: ...
    def test_space_delimiter(self) -> None: ...
    def test_tab_delimiter(self) -> None: ...
    def test_other_delimiter(self) -> None: ...
    def test_constant_fixed_width(self) -> None: ...
    def test_variable_fixed_width(self) -> None: ...

class TestNameValidator:
    def test_case_sensitivity(self) -> None: ...
    def test_excludelist(self) -> None: ...
    def test_missing_names(self) -> None: ...
    def test_validate_nb_names(self) -> None: ...
    def test_validate_wo_names(self) -> None: ...

class TestStringConverter:
    def test_creation(self) -> None: ...
    def test_upgrade(self) -> None: ...
    def test_missing(self) -> None: ...
    def test_upgrademapper(self) -> None: ...
    def test_string_to_object(self) -> None: ...
    def test_keep_default(self) -> None: ...
    def test_keep_default_zero(self) -> None: ...
    def test_keep_missing_values(self) -> None: ...
    def test_int64_dtype(self) -> None: ...
    def test_uint64_dtype(self) -> None: ...

class TestMiscFunctions:
    def test_has_nested_dtype(self) -> None: ...
    def test_easy_dtype(self) -> None: ...
    def test_flatten_dtype(self) -> None: ...
