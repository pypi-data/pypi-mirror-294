from _typeshed import Incomplete
from numpy.testing import assert_array_equal as assert_array_equal, assert_equal as assert_equal, assert_raises as assert_raises

def test_packbits() -> None: ...
def test_packbits_empty() -> None: ...
def test_packbits_empty_with_axis() -> None: ...
def test_packbits_large(bitorder) -> None: ...
def test_packbits_very_large() -> None: ...
def test_unpackbits() -> None: ...
def test_pack_unpack_order() -> None: ...
def test_unpackbits_empty() -> None: ...
def test_unpackbits_empty_with_axis() -> None: ...
def test_unpackbits_large() -> None: ...

class TestCount:
    x: Incomplete
    padded1: Incomplete
    padded1b: Incomplete
    padded2: Incomplete
    def test_roundtrip(self, bitorder, count) -> None: ...
    def test_count(self, kwargs) -> None: ...
    def test_roundtrip_axis(self, bitorder, count) -> None: ...
    def test_axis_count(self, kwargs) -> None: ...
    def test_bad_count(self) -> None: ...
