from _typeshed import Incomplete
from numpy.core import absolute as absolute, add as add, arange as arange, array as array, asarray as asarray, bitwise_and as bitwise_and, bitwise_or as bitwise_or, bitwise_xor as bitwise_xor, divide as divide, equal as equal, greater as greater, greater_equal as greater_equal, invert as invert, left_shift as left_shift, less as less, less_equal as less_equal, multiply as multiply, not_equal as not_equal, power as power, remainder as remainder, reshape as reshape, right_shift as right_shift, shape as shape, sin as sin, sqrt as sqrt, subtract as subtract, transpose as transpose

class container:
    array: Incomplete
    def __init__(self, data, dtype: Incomplete | None = None, copy: bool = True) -> None: ...
    def __array__(self, t: Incomplete | None = None): ...
    def __len__(self) -> int: ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, value) -> None: ...
    def __abs__(self): ...
    def __neg__(self): ...
    def __add__(self, other): ...
    __radd__ = __add__
    def __iadd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __isub__(self, other): ...
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def __imul__(self, other): ...
    def __div__(self, other): ...
    def __rdiv__(self, other): ...
    def __idiv__(self, other): ...
    def __mod__(self, other): ...
    def __rmod__(self, other): ...
    def __imod__(self, other): ...
    def __divmod__(self, other): ...
    def __rdivmod__(self, other): ...
    def __pow__(self, other): ...
    def __rpow__(self, other): ...
    def __ipow__(self, other): ...
    def __lshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rlshift__(self, other): ...
    def __rrshift__(self, other): ...
    def __ilshift__(self, other): ...
    def __irshift__(self, other): ...
    def __and__(self, other): ...
    def __rand__(self, other): ...
    def __iand__(self, other): ...
    def __xor__(self, other): ...
    def __rxor__(self, other): ...
    def __ixor__(self, other): ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __ior__(self, other): ...
    def __pos__(self): ...
    def __invert__(self): ...
    def __complex__(self) -> complex: ...
    def __float__(self) -> float: ...
    def __int__(self) -> int: ...
    def __hex__(self): ...
    def __oct__(self): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def copy(self): ...
    def tostring(self): ...
    def tobytes(self): ...
    def byteswap(self): ...
    def astype(self, typecode): ...
    def __array_wrap__(self, *args): ...
    def __setattr__(self, attr, value) -> None: ...
    def __getattr__(self, attr): ...
