from _typeshed import Incomplete

__all__ = ['append_fields', 'apply_along_fields', 'assign_fields_by_name', 'drop_fields', 'find_duplicates', 'flatten_descr', 'get_fieldstructure', 'get_names', 'get_names_flat', 'join_by', 'merge_arrays', 'rec_append_fields', 'rec_drop_fields', 'rec_join', 'recursive_fill_fields', 'rename_fields', 'repack_fields', 'require_fields', 'stack_arrays', 'structured_to_unstructured', 'unstructured_to_structured']

def recursive_fill_fields(input, output): ...
def get_names(adtype): ...
def get_names_flat(adtype): ...
def flatten_descr(ndtype): ...
def get_fieldstructure(adtype, lastname: Incomplete | None = None, parents: Incomplete | None = None): ...
def merge_arrays(seqarrays, fill_value: int = -1, flatten: bool = False, usemask: bool = False, asrecarray: bool = False): ...
def drop_fields(base, drop_names, usemask: bool = True, asrecarray: bool = False): ...
def rec_drop_fields(base, drop_names): ...
def rename_fields(base, namemapper): ...
def append_fields(base, names, data, dtypes: Incomplete | None = None, fill_value: int = -1, usemask: bool = True, asrecarray: bool = False): ...
def rec_append_fields(base, names, data, dtypes: Incomplete | None = None): ...
def repack_fields(a, align: bool = False, recurse: bool = False): ...
def structured_to_unstructured(arr, dtype: Incomplete | None = None, copy: bool = False, casting: str = 'unsafe'): ...
def unstructured_to_structured(arr, dtype: Incomplete | None = None, names: Incomplete | None = None, align: bool = False, copy: bool = False, casting: str = 'unsafe'): ...
def apply_along_fields(func, arr): ...
def assign_fields_by_name(dst, src, zero_unassigned: bool = True) -> None: ...
def require_fields(array, required_dtype): ...
def stack_arrays(arrays, defaults: Incomplete | None = None, usemask: bool = True, asrecarray: bool = False, autoconvert: bool = False): ...
def find_duplicates(a, key: Incomplete | None = None, ignoremask: bool = True, return_index: bool = False): ...
def join_by(key, r1, r2, jointype: str = 'inner', r1postfix: str = '1', r2postfix: str = '2', defaults: Incomplete | None = None, usemask: bool = True, asrecarray: bool = False): ...
def rec_join(key, r1, r2, jointype: str = 'inner', r1postfix: str = '1', r2postfix: str = '2', defaults: Incomplete | None = None): ...
