from numpy import generic as generic
from numpy._typing import ArrayLike as ArrayLike, NDArray as NDArray, _ArrayLike, _ArrayLikeInt
from typing import Any, Literal as L, Protocol, overload

class _ModeFunc(Protocol):
    def __call__(self, vector: NDArray[Any], iaxis_pad_width: tuple[int, int], iaxis: int, kwargs: dict[str, Any]) -> None: ...

@overload
def pad(array: _ArrayLike[_SCT], pad_width: _ArrayLikeInt, mode: _ModeKind = ..., *, stat_length: None | _ArrayLikeInt = ..., constant_values: ArrayLike = ..., end_values: ArrayLike = ..., reflect_type: L['odd', 'even'] = ...) -> NDArray[_SCT]: ...
@overload
def pad(array: ArrayLike, pad_width: _ArrayLikeInt, mode: _ModeKind = ..., *, stat_length: None | _ArrayLikeInt = ..., constant_values: ArrayLike = ..., end_values: ArrayLike = ..., reflect_type: L['odd', 'even'] = ...) -> NDArray[Any]: ...
@overload
def pad(array: _ArrayLike[_SCT], pad_width: _ArrayLikeInt, mode: _ModeFunc, **kwargs: Any) -> NDArray[_SCT]: ...
@overload
def pad(array: ArrayLike, pad_width: _ArrayLikeInt, mode: _ModeFunc, **kwargs: Any) -> NDArray[Any]: ...
