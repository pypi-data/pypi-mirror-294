# Envoy configuration generated from `local_envoy_config.yaml.j2`.
# This configuration will configure Envoy to...
# 1. Serve on a single, free port.
# 2. Run all incoming JSON requests through a transcoding filter.
# 3. Identify the right consensus for the request.
# 4. Forward the request to the server hosting that consensus.

{# We need this macro to use 'indent', otherwise Jinja will align the text to the
left and break the 'yaml' syntax.#}
{% macro grpc_json_transcoder() %}{% include "grpc_json_transcoder.yaml.j2" %}{% endmacro %}

static_resources:
  clusters:

    {% for consensus_id, address in address_by_consensus.items() %}
    # Clusters for consensus '{{ consensus_id }}'.
    - name: {{ consensus_id }}_grpc
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      common_http_protocol_options:
        idle_timeout: 0s
      dns_lookup_family: V4_ONLY
      # Setting empty HTTP2 protocol options is required to encourage Envoy to
      # use HTTP2 when talking to the upstream.
      http2_protocol_options: {}
      load_assignment:
        cluster_name: {{ consensus_id }}_grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: {{ address.host }}
                      port_value: {{ address.grpc_port }}
      # "Disable" all circuit breakers; they don't make much sense when all traffic
      # will flow to the host we're already on. Follows the pattern suggested here:
      # Follows the pattern suggested here:
      #   https://www.envoyproxy.io/docs/envoy/latest/faq/load_balancing/disable_circuit_breaking
      circuit_breakers:
        thresholds:
          - priority: DEFAULT
            max_connections: 1000000000
            max_pending_requests: 1000000000
            max_requests: 1000000000
            max_retries: 1000000000
          - priority: HIGH
            max_connections: 1000000000
            max_pending_requests: 1000000000
            max_requests: 1000000000
            max_retries: 1000000000
    - name: {{ consensus_id }}_websocket
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      common_http_protocol_options:
        idle_timeout: 0s
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: {{ consensus_id }}_websocket
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: {{ address.host }}
                      port_value: {{ address.websocket_port }}
      # "Disable" all circuit breakers; they don't make much sense when all traffic
      # will flow to the host we're already on. Follows the pattern suggested here:
      #   https://www.envoyproxy.io/docs/envoy/latest/faq/load_balancing/disable_circuit_breaking
      circuit_breakers:
        thresholds:
          - priority: DEFAULT
            max_connections: 1000000000
            max_pending_requests: 1000000000
            max_requests: 1000000000
            max_retries: 1000000000
          - priority: HIGH
            max_connections: 1000000000
            max_pending_requests: 1000000000
            max_requests: 1000000000
            max_retries: 1000000000
    {% endfor %}

  listeners:
    - name: main
      address:
        socket_address:
          address: 0.0.0.0
          port_value: {{ envoy_port }}
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: grpc_json
                upgrade_configs:
                  - upgrade_type: websocket
                stream_idle_timeout: 0s
                codec_type: AUTO
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains:
                        - "*"
                      # NOTE: if this CORS policy changes also consider if any changes
                      # need to be made in resemble/controller/network_managers.py.
                      cors:
                        allow_origin_string_match:
                          - safe_regex:
                              google_re2: {}
                              regex: \*
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        # If ever the x-resemble-* headers change, also update their
                        # invariant counterparts in resemble/aio/headers.py.
                        allow_headers: x-resemble-application-id,x-resemble-service-name,x-resemble-state-ref,x-resemble-consensus-id,x-resemble-idempotency-key,x-resemble-workflow-id,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,grpc-timeout,authorization
                        max_age: "1728000"
                        expose_headers: grpc-status,grpc-message
                      routes:
                        {% for consensus_id in address_by_consensus.keys() %}
                        - match:
                            prefix: "/"
                            headers:
                              - name: "upgrade"
                                string_match:
                                  exact: "websocket"
                              - name: "x-resemble-consensus-id"
                                string_match:
                                  exact: "{{ consensus_id }}"
                          route:
                            cluster: {{ consensus_id }}_websocket
                          typed_per_filter_config:
                            # We're turning off the reject_unknown_method that
                            # was set to True in the main filter chain: because
                            # the websocket endpoint also serves traffic that is
                            # not gRPC-transcodable.
                            envoy.filters.http.grpc_json_transcoder:
                              {{ grpc_json_transcoder() | indent(30) }}
                        - match:
                            prefix: "/"
                            headers:
                              - name: "x-resemble-consensus-id"
                                string_match:
                                  exact: "{{ consensus_id }}"
                          route:
                            cluster: {{ consensus_id }}_grpc
                            max_stream_duration:
                              grpc_timeout_header_max: 0s
                        {% endfor %}

                http_filters:
                  - name: resemble.add_header_x_resemble_application_id
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)
                            request_handle:headers():add("x-resemble-application-id", "{{ application_id }}")
                          end
                  - name: resemble.compute_header_x_resemble_consensus_id
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      # Decides which consensus the traffic should go to, if that hadn't been
                      # decided before.
                      #
                      # Note that even though Envoy does a first route pick before it even runs
                      # this filter chain, setting the any header (e.g. consensus ID) will cause
                      # the route to be recomputed:
                      #   https://github.com/envoyproxy/envoy/issues/8719#issuecomment-547552943
                      default_source_code:
                        inline_string: |
                          local sha1 = require "sha1.init"

                          -- A list of consensus IDs, efficient for random selection.
                          local consensus_ids_list = {
                            {% for consensus_id in address_by_consensus.keys() %}
                            "{{ consensus_id }}",
                            {% endfor %}
                          }
                          -- A set of consensus IDs, efficient for membership testing.
                          local consensus_ids_set = {
                            {% for consensus_id in address_by_consensus.keys() %}
                            ["{{ consensus_id }}"] = true,
                            {% endfor %}
                          }
                          -- A representation of the route map, efficient for lookup.
                          local consensus_id_by_keyrange_start = {
                            {% for route_map_entry in route_map %}
                            [{{ route_map_entry.shard_keyrange_start }}] = "{{ route_map_entry.consensus_id }}",
                            {% endfor %}
                          }
                          -- The "first byte"s (shard boundaries) from the route map, from high to low.
                          local shard_keyrange_starts_high_to_low = {
                            {% for route_map_entry in route_map|reverse %}
                            {{ route_map_entry.shard_keyrange_start }},
                            {% endfor %}
                          }

                          function envoy_on_request(request_handle)
                            local consensus_id = request_handle:headers():get("x-resemble-consensus-id")
                            if consensus_id ~= nil then
                              -- Caller has already chosen a consensus.
                              if consensus_ids_set[consensus_id] == nil then
                                -- Since this may be a transient error (this router may not have
                                -- heard about a new consensus) we'd like gRPC callers to get the
                                -- clearly-retryable "UNAVAILABLE" error code. That leaves us with
                                -- primarily the 50x status codes:
                                --   https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md
                                -- From this list we use 502 "Bad Gateway" to indicate that this is
                                -- not an error at the server but at the router.
                                request_handle:respond(
                                    {[":status"] = "502"}, "Unknown consensus '" .. consensus_id .. "'"
                                )
                              end
                              -- Caller picked a legal consensus, so our header matching route
                              -- logic will handle the rest.
                              return
                            end

                            local state_ref = request_handle:headers():get("x-resemble-state-ref")
                            if state_ref == nil then
                              -- This request doesn't care which consensus it goes to. Pick a random one.
                              local consensus_id = consensus_ids_list[math.random(#consensus_ids_list)]
                              request_handle:headers():add("x-resemble-consensus-id", consensus_id)
                              return
                            end

                            -- Pick a consensus based on the state ID. We do this as follows:
                            -- 1. Take a SHA1 hash of the state ID (which includes a service tag).
                            --    TODO: only hash the _top-level_ state ID, once colocation is a thing.
                            -- 2. Walk through the shard map, and find the shard whose key range
                            --    contains the resulting hash.
                            --    TODO: in the current implementation, key ranges are defined by a
                            --          single byte, so we only need to look at the hash's first
                            --          byte. As we build colocation and splitting and thereby have
                            --          finer-grained key ranges, we will need to look deeper.
                            local hashed_state_ref = sha1.binary(state_ref)
                            local hashed_state_ref_first_byte = string.byte(hashed_state_ref, 1)
                            -- TODO: do binary search instead of this linear lookup.
                            for i = 1, #shard_keyrange_starts_high_to_low do
                              local shard_keyrange_start = shard_keyrange_starts_high_to_low[i]
                              if shard_keyrange_start <= hashed_state_ref_first_byte then
                                -- This is the shard that will hold our state.
                                local consensus_id = consensus_id_by_keyrange_start[shard_keyrange_start]
                                request_handle:headers():add("x-resemble-consensus-id", consensus_id)
                                return
                              end
                            end

                            -- This code should be unreachable; the last shard in the
                            -- `shard_keyrange_start` list should have a value of `0` and thereby
                            -- there can't be traffic that doesn't have a shard to go to. If we
                            -- print the following we in fact have a bug.
                            request_handle:logError(
                                "Failed to pick consensus for state '" .. state_ref .. "'"
                            )
                            -- If we let the request continue we'd get a "no_route" error, which is
                            -- a 404 that gRPC interprets as "not implemented". We'd like to send a
                            -- 'internal error' instead; to gRPC that would be error code 400, but
                            -- to any other (HTTP) client error 500 (to gRPC: "unknown") is more
                            -- accurate. See:
                            --   https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md
                            request_handle:respond({[":status"] = "500"}, "Router internal error")
                          end

                  - name: resemble.mangled_http_path_filter
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)
                            {{ mangled_http_path_filter | indent(28) }}
                          end
                    # Define CORS filter before the transcoding filter, because
                    # otherwise perfectly-fine CORS requests get rejected by the
                    # transcoding filter.
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.grpc_json_transcoder
                    typed_config:
                      {{ grpc_json_transcoder() | indent(22) }}
                      # The gRPC backend would be unhappy to receive non-gRPC
                      # `application/json` traffic and would reply with a `503`,
                      # which is not a good user experience and not helpful in
                      # debugging. In addition, we've observed that that
                      # interaction between Envoy and gRPC triggers a bug in one
                      # of those two  that will cause subsequent valid requests to
                      # fail.
                      # See https://github.com/reboot-dev/respect/issues/3074.
                      # Instead, simply (correctly) reject invalid
                      # `application/json` traffic with a 404.
                      request_validation_options:
                        reject_unknown_method: true
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          {% if use_tls %}
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                alpn_protocols:
                - h2
                tls_certificates:
                - certificate_chain: {filename: "{{ tls_certificate_path }}"}
                  private_key: {filename: "{{ tls_key_path }}"}
                validation_context:
                  trusted_ca:
                    filename: {{ tls_certificate_path }}
          {% endif %}

admin:
  address:
    # Open the admin port for debugging, but only from localhost (for safety).
    socket_address: { address: 127.0.0.1, port_value: {{ envoy_admin_port }} }
