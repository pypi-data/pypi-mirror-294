from numpy import nan
from pandas import DataFrame


def setup_test_database() -> dict:
    """Implemented to do tests with temporary data."""
    diagnostic_alert = DataFrame(
        {
            "name": {0: "ch2o", 1: "ch4", 2: "co", 3: "co2", 4: "co2", 5: "dB"},
            "sensor_id": {0: "14", 1: "7", 2: "12", 3: "3", 4: "4", 5: "13"},
            "unit": {0: "ppm", 1: "ppm", 2: "ppm", 3: "ppm", 4: "ppm", 5: "dB"},
            "icon": {
                0: "cloud",
                1: "cloud",
                2: "cloud",
                3: "device_hub",
                4: "device_hub",
                5: "device_hub",
            },
            "type_id": {0: "17", 1: "10", 2: "15", 3: "9", 4: "9", 5: "16"},
            "max_warning": {
                0: "None",
                1: "None",
                2: "None",
                3: "None",
                4: "None",
                5: "None",
            },
            "max_critical": {
                0: "None",
                1: "None",
                2: "None",
                3: "None",
                4: "None",
                5: "None",
            },
            "min_warning": {
                0: "None",
                1: "None",
                2: "None",
                3: "None",
                4: "None",
                5: "None",
            },
            "min_critical": {
                0: "None",
                1: "None",
                2: "None",
                3: "None",
                4: "None",
                5: "None",
            },
            "location": {
                0: "location 2",
                1: "location 2",
                2: "location 2",
                3: "Location 1",
                4: "location 2",
                5: "location 2",
            },
            "label_html": {
                0: "SFA30",
                1: "INIR-ME",
                2: "ULPSMCO",
                3: "SCD30",
                4: "SCD30",
                5: "MAX4466",
            },
            "value": {0: 0.0, 1: nan, 2: 0.435, 3: 51.0, 4: 51.0, 5: 0.385},
            "time": {
                0: "2023-09-07 11:58:40+0000",
                1: "2023-09-07 11:55:40+0000",
                2: "2023-09-07 10:00:40+0000",
                3: "2023-09-07 11:57:00+0000",
                4: "2023-09-07 10:59:40+0000",
                5: "2023-09-07 10:59:40+0000",
            },
            "sensors": {
                0: ["14"],
                1: ["7"],
                2: ["12"],
                3: ["3", "4"],
                4: ["3", "4"],
                5: ["13"],
            },
            "route": {
                0: "/sensors/14",
                1: "/sensors/7",
                2: "/sensors/12",
                3: "/sensors/3",
                4: "/sensors/4",
                5: "/sensors/13",
            },
            "unit_html": {0: "ppm", 1: "ppm", 2: "ppm", 3: "ppm", 4: "ppm", 5: "dB"},
            "type": {
                0: "no value",
                1: "no value",
                2: "non responsive",
                3: "does not alert",
                4: "non responsive",
                5: "non responsive",
            },
        }
    )
    return locals()


def setup_test_database_postgres() -> dict:
    """Implemented to do tests with temporary database Postgres."""
    return locals()


def setup_test_database_influxdb() -> dict:
    """Implemented to do tests with temporary database InfluxDB."""
    influxdb_data_measurements = DataFrame(
        {
            "sensor_id": {
                0: "14",
                1: "7",
                2: "12",
                3: "3",
                4: "4",
                5: "13",
                6: "14",
                7: "2",
                8: "3",
                9: "4",
                10: "7",
                11: "9",
                12: "8",
                13: "2",
                14: "5",
                15: "11",
                16: "2",
                17: "6",
                18: "2",
                19: "6",
                20: "2",
                21: "6",
                22: "2",
                23: "6",
                24: "10",
                25: "10",
                26: "11",
                27: "12",
                28: "14",
                29: "2",
                30: "3",
                31: "4",
                32: "7",
                33: "8",
                34: "9",
                35: "2",
                36: "5",
            },
            "_value": {
                0: 0.386,
                1: 0.425,
                2: 0.409,
                3: 66.0,
                4: 66.0,
                5: 0.394,
                6: 44.0,
                7: 44.0,
                8: 44.0,
                9: 44.0,
                10: 44.0,
                11: 0.41,
                12: 0.412,
                13: 38.0,
                14: 38.0,
                15: 0.417,
                16: 0.434,
                17: 0.434,
                18: 0.396,
                19: 0.396,
                20: 0.408,
                21: 0.408,
                22: 0.437,
                23: 0.437,
                24: 0.403,
                25: 39.0,
                26: 39.0,
                27: 39.0,
                28: 20.0,
                29: 39.0,
                30: 39.0,
                31: 39.0,
                32: 41.0,
                33: 39.0,
                34: 39.0,
                35: 189.0,
                36: 189.0,
            },
            "_field": {
                0: "ch2o",
                1: "ch4",
                2: "co",
                3: "co2",
                4: "co2",
                5: "dB",
                6: "h",
                7: "h",
                8: "h",
                9: "h",
                10: "h",
                11: "h2s",
                12: "no2",
                13: "nox",
                14: "nox",
                15: "o3",
                16: "pm1",
                17: "pm1",
                18: "pm10",
                19: "pm10",
                20: "pm2",
                21: "pm2",
                22: "pm4",
                23: "pm4",
                24: "so2",
                25: "t",
                26: "t",
                27: "t",
                28: "t",
                29: "t",
                30: "t",
                31: "t",
                32: "t",
                33: "t",
                34: "t",
                35: "voc",
                36: "voc",
            },
        }
    )
    return locals()
