from typing import Dict, List
from unittest import TestCase

import django
from pandas import DataFrame

django.setup()

from sens_platform.api.modules.types_modules import LastMeasurements
from sens_platform.constants import LAST_MEASUREMENTS


class TestLastMeasurements(TestCase):
    def setUp(self) -> None:
        self._slug: str = "site"
        self._df_influxdb = DataFrame(
            {
                "sensor_id": {
                    0: "14",
                    1: "7",
                    2: "12",
                    3: "3",
                    4: "4",
                    5: "13",
                    6: "14",
                    7: "2",
                    8: "3",
                    9: "4",
                    10: "7",
                    11: "9",
                    12: "8",
                    13: "2",
                    14: "5",
                    15: "11",
                    16: "2",
                    17: "6",
                    18: "2",
                    19: "6",
                    20: "2",
                    21: "6",
                    22: "2",
                    23: "6",
                    24: "10",
                    25: "10",
                    26: "11",
                    27: "12",
                    28: "14",
                    29: "2",
                    30: "3",
                    31: "4",
                    32: "7",
                    33: "8",
                    34: "9",
                    35: "2",
                    36: "5",
                },
                "_value": {
                    0: 0.386,
                    1: 0.425,
                    2: 0.409,
                    3: 66.0,
                    4: 66.0,
                    5: 0.394,
                    6: 44.0,
                    7: 44.0,
                    8: 44.0,
                    9: 44.0,
                    10: 44.0,
                    11: 0.41,
                    12: 0.412,
                    13: 38.0,
                    14: 38.0,
                    15: 0.417,
                    16: 0.434,
                    17: 0.434,
                    18: 0.396,
                    19: 0.396,
                    20: 0.408,
                    21: 0.408,
                    22: 0.437,
                    23: 0.437,
                    24: 0.403,
                    25: 39.0,
                    26: 39.0,
                    27: 39.0,
                    28: 20.0,
                    29: 39.0,
                    30: 39.0,
                    31: 39.0,
                    32: 41.0,
                    33: 39.0,
                    34: 39.0,
                    35: 189.0,
                    36: 189.0,
                },
                "_field": {
                    0: "ch2o",
                    1: "ch4",
                    2: "co",
                    3: "co2",
                    4: "co2",
                    5: "dB",
                    6: "h",
                    7: "h",
                    8: "h",
                    9: "h",
                    10: "h",
                    11: "h2s",
                    12: "no2",
                    13: "nox",
                    14: "nox",
                    15: "o3",
                    16: "pm1",
                    17: "pm1",
                    18: "pm10",
                    19: "pm10",
                    20: "pm2",
                    21: "pm2",
                    22: "pm4",
                    23: "pm4",
                    24: "so2",
                    25: "t",
                    26: "t",
                    27: "t",
                    28: "t",
                    29: "t",
                    30: "t",
                    31: "t",
                    32: "t",
                    33: "t",
                    34: "t",
                    35: "voc",
                    36: "voc",
                },
            }
        )
        self._data: Dict = {
            "name": {
                0: "ch2o",
                1: "ch4",
                2: "co",
                3: "co2",
                4: "dB",
                5: "h",
                6: "h2s",
                7: "no2",
                8: "nox",
                9: "o3",
                10: "pm1",
                11: "pm10",
                12: "pm2",
                13: "pm4",
                14: "so2",
                15: "t",
                16: "voc",
            },
            "unit": {
                0: "ppm",
                1: "ppm",
                2: "ppm",
                3: "ppm",
                4: "dB",
                5: "%",
                6: "ppm",
                7: "ppm",
                8: "index",
                9: "ppm",
                10: "ppm",
                11: "ppm",
                12: "ppm",
                13: "ppm",
                14: "ppm",
                15: "CÂº",
                16: "index",
            },
            "icon": {
                0: "cloud",
                1: "cloud",
                2: "cloud",
                3: "device_hub",
                4: "device_hub",
                5: "ac_unit",
                6: "device_hub",
                7: "grain",
                8: "device_hub",
                9: "device_hub",
                10: "grain",
                11: "group_work",
                12: "device_hub",
                13: "device_hub",
                14: "device_hub",
                15: "device_hub",
                16: "device_hub",
            },
            "type_id": {
                0: "17",
                1: "10",
                2: "15",
                3: "9",
                4: "16",
                5: "6",
                6: "12",
                7: "11",
                8: "8",
                9: "14",
                10: "1",
                11: "4",
                12: "2",
                13: "3",
                14: "13",
                15: "5",
                16: "7",
            },
            "average": {
                0: 0.386,
                1: 0.425,
                2: 0.409,
                3: 66.0,
                4: 0.394,
                5: 44.0,
                6: 0.41,
                7: 0.412,
                8: 38.0,
                9: 0.417,
                10: 0.434,
                11: 0.396,
                12: 0.408,
                13: 0.437,
                14: 0.403,
                15: 37.3,
                16: 189.0,
            },
            "minimum": {
                0: 0.386,
                1: 0.425,
                2: 0.409,
                3: 66.0,
                4: 0.394,
                5: 44.0,
                6: 0.41,
                7: 0.412,
                8: 38.0,
                9: 0.417,
                10: 0.434,
                11: 0.396,
                12: 0.408,
                13: 0.437,
                14: 0.403,
                15: 20.0,
                16: 189.0,
            },
            "maximum": {
                0: 0.386,
                1: 0.425,
                2: 0.409,
                3: 66.0,
                4: 0.394,
                5: 44.0,
                6: 0.41,
                7: 0.412,
                8: 38.0,
                9: 0.417,
                10: 0.434,
                11: 0.396,
                12: 0.408,
                13: 0.437,
                14: 0.403,
                15: 41.0,
                16: 189.0,
            },
            "sensors": {
                0: ["14"],
                1: ["7"],
                2: ["12"],
                3: ["3", "4"],
                4: ["13"],
                5: ["7", "3", "4", "2", "14"],
                6: ["9"],
                7: ["8"],
                8: ["2", "5"],
                9: ["11"],
                10: ["2", "6"],
                11: ["2", "6"],
                12: ["2", "6"],
                13: ["2", "6"],
                14: ["10"],
                15: ["7", "4", "3", "2", "14", "12", "9", "8", "11", "10"],
                16: ["2", "5"],
            },
        }

    def test__init_(self) -> None:
        """Verify initialization."""
        last_measurements = LastMeasurements(slug=self._slug)
        assert last_measurements._name == LAST_MEASUREMENTS

    def test_execute_all_run(self) -> None:
        """Verify the entire execution."""
        last_measurements = LastMeasurements(slug=self._slug)
        result = last_measurements.execute()

        assert isinstance(result, List)
