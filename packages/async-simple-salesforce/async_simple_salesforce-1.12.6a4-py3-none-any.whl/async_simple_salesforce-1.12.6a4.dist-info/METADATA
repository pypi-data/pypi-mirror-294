Metadata-Version: 2.1
Name: async-simple-salesforce
Version: 1.12.6a4
Summary: Async fork of simple-salesforce
Author-email: Erik Aker <eaker@mulliganfunding.com>
License: Copyright 2012 New Organizing Institute Education Fund
        
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        
           http://www.apache.org/licenses/LICENSE-2.0
        
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        
        
        
        Some content based off Restforce 1.0
        
        Copyright (C) 2012 Dave Wingate
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
Project-URL: Repository, https://github.com/MulliganFunding/async-simple-salesforce
Project-URL: Documentation, https://github.com/MulliganFunding/async-simple-salesforce/blob/main/README.md
Project-URL: Changelog, https://github.com/MulliganFunding/async-simple-salesforce/blob/main/CHANGELOG.md
Project-URL: Releases, https://github.com/MulliganFunding/async-simple-salesforce/releases
Keywords: uv,requirements,packaging
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: Operating System :: OS Independent
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: aiofiles >=24.1.0
Requires-Dist: httpx >=0.18.2
Requires-Dist: more-itertools >=8.10.0
Requires-Dist: pendulum
Requires-Dist: pyjwt[crypto]
Requires-Dist: requests >=2.26.0
Requires-Dist: typing-extensions
Requires-Dist: zeep

# Async Simple Salesforce

This is an **async fork** of the library [simple-salesforce](https://github.com/simple-salesforce/simple-salesforce). It is considered **alpha** software.

This fork is available on PyPI and can be installed like this:

```sh
$ pip install "async-simple-salesforce==1.12.6a3"

```

## Versioning

Versioning for this library tracks the upstream version; i.e., when a new version of upstream has been published, it will be integrated into this codebase and released under the *same* version identifier, with one notable difference: we add *alpha* or *beta* identifiers to make it more obvious that this fork has not been around as long as upstream and that it has also not seen the same wide-scale usage that upstream has.

For example, when changes from upstream version `1.12.4` have been integrated into this library, a new version of this library will be published as `1.12.4a1`. Further changes under the same version will increment the alpha version identifier.

## How to Use

This library attempts to offer the *same API* as `simple-salesforce` inside an `aio` subpackage.

For instance, here's how to create and use an async Salesforce client:

```python

import asyncio
import datetime

from simple_salesforce.aio import build_async_salesforce_client, AsyncSalesforce


async def create_client(username, consumer_key, private_key) -> AsyncSalesforce:
    # build_async_salesforce_client accepts all args of simple-salesforce Login
    return await build_async_salesforce_client(
            username=username,
            consumer_key=consumer_key,
            privatekey_file=private_key,
            request_timeout_seconds=60 * 2,
        )

async def update_contact(sf_client):
    end = datetime.datetime.now(pytz.UTC) # we need to use UTC as salesforce API requires this
    await sf_client.Contact.updated(end - datetime.timedelta(days=10), end)


async def run_query(sf_client, opportunity_name: str):
    query = (
        f"SELECT Id,StageName from Opportunity where "
        f"Name='{opportunity_name}'"
    )
    return await sf_client.query_all(search)
```

You can typically call *any* method available on the synchronous `Salesforce` object as an async method with an `await` added.

See upstream docs continued [here](./README.rst).

## How to Contribute

This project uses `uv` to manage dependencies. In addition, a `justfile` has been provided to aid contributors. If you have `uv` and `just` in your environment, you can get started with `just bootstrap`. You can run the test suite with `just test` and code quality checks with `just test`. For more common recipes, run `just`:

```sh
‚ùØ just
just --list
Available recipes:
    bootstrap                         # Create a virtual environment and install dependencies
    build *args                       # Build the project as a package
    check                             # Run code quality checks
    check-types                       # Run mypy checks
    ci-test coverage_dir='./coverage' # Run all tests locally
    format                            # Run the formatter (`ruff`)
    lock                              # Update the lock file
    release                           # Release this project to PyPI
    sync *args                        # Make sure all dependencies are up to date in env
    test *args                        # Run all tests locally

```

---

The upstream README is located [here](./README.rst)
