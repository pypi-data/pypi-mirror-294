Metadata-Version: 2.1
Name: starcrusher2025-games
Version: 1.2.0
Summary: A easy to use game engine.
Home-page: https://github.com/starcrusher2025/2025_games
Author: starcrusher2025
License: MIT
Description-Content-Type: text/markdown
License-File: LICENSE.md

# Game Engine Package - starcrusher2025

## Introduction
This package provides a versatile game engine framework named starcrusher2025. It facilitates the development of 2D games using Pygame by offering essential functionalities such as managing the game window, controlling player entities, handling input, rendering game objects, and more.

## Installation
To install starcrusher2025-games, use pip:

```bash
pip install starcrusher2025-games
```

## Usage
To use starcrusher2025 in your Python projects, follow the examples below:

```python
from starcrusher2025_games import Game #Imports the game engine

# Initialize the game instance
game = Game()

# Set the background of the game window
game.window.set_bgc(0, 0, 0)  # Sets the background to black
game.window.set_background_image("background.png") # Sets an image for the background

# Set player attributes
game.player.set_color(255, 0, 0)  # Sets the player color to red
game.player.set_start_pos(400, 300)  # Sets the player starting position
game.player.set_size(50, 50)  # Sets the player size
game.player.set_speed(5)  # Sets the player speed
game.player.set_player_image("player.png")  # Sets an image for the player
game.set_fps(60) # Sets the fps to 60

# Add game objects
obj1 = game.obj(start_pos=(100, 100), size=(50, 50), color=(255, 0, 0), image_path="object_image.png")
obj2 = game.obj(start_pos=(200, 200), size=(75, 75), speed=2, color=(0, 255, 0))

game.add_object(obj1)
game.add_object(obj2)

# Set window size
game.window.set_size(800, 600)  # Sets the game window size

# Customize menu configuration
menu_config = MenuConfig()
menu_config.set_bgc(30, 30, 30)  # Sets the menu background color to dark gray
menu_config.set_bg_image_path("menu_background.png")  # Sets an image for the menu background

# Start the game loop
game.start()
```

## Commands

### `game.window.set_bgc(r, g, b)`
Sets the background color of the game window.

- **Parameters:**
  - `r`: Integer representing the red component of the RGB color (0-255).
  - `g`: Integer representing the green component of the RGB color (0-255).
  - `b`: Integer representing the blue component of the RGB color (0-255).

### `game.window.set_bg_image("image_path")`
Sets the background image file of the game window.

- **Parameter:**
  - `image_path`: Path to the image file to be loaded for the background.

### `game.window.set_size(width, height)`
Sets the size of the game window.

- **Parameters:**
  - `width`: Width of the game window in pixels.
  - `height`: Height of the game window in pixels.

### `game.player.set_color(r, g, b)`
Sets an color for the player entity.

- **Parameters:**
  - `r`: Integer representing the red component of the RGB color (0-255).
  - `g`: Integer representing the green component of the RGB color (0-255).
  - `b`: Integer representing the blue component of the RGB color (0-255).

### `game.player.set_player_image(image_path)`
Sets an image file for the player entity.

- **Parameters:**
  - `image_path`: Path to the image file to be loaded for the player.

### `game.player.set_size(size)`
Sets the size of the player entity.

- **Parameters:**
  - `size`: Tuple representing the `(width, height)` of the player entity.

### `game.player.set_start_pos(start_pos)`
Sets the starting position of the player entity.

- **Parameters:**
  - `start_pos`: Tuple representing the `(x, y)` coordinates of the starting position.

### `game.player.set_speed(speed)`
Sets the speed of the player entity.

- **Parameters:**
  - `speed`: Integer value representing the speed of the player.

### `game.player.get_player_position()`
Returns the player position.

### `game.set_fps(fps)`
Sets the game's target frames per second (FPS).

- **Parameters:**
  - `fps`: Integer value representing the target frames per second.

### `game.add_object(obj)`
Adds a game object to the game.

- **Parameters:**
  - `obj`: Instance of `GameObject`.

  - **Parameters:**
    - `speed=var`
    Sets the speed of the player. 

    - **Parameter:**
      - `var`: Number for player speed.

    - `image_path=var`
    Sets a image file for the obj entity. 
    
    - **Parameter:**
      - `var`: Path to the image file to be loaded for the player

    - `start_pos=(x, y)`
    Sets the start pos of the obj entity.

    - **Parameters**
      - `x`: Sets the `x` start position.
      - `y`: Sets the `y` start position.
    
    - `size=(x, y)`
    Sets the size of the obj entity.

    - **Parameters**
      - `x`: Sets the `x` length.
      - `y`: Sets the `y` length.
    
    - `color=(r, g, b)`
    Sets an color for the player entity.

    - **Parameters:**
      - `r`: Integer representing the red component of the RGB color (0-255).
      - `g`: Integer representing the green component of the RGB color (0-255).
      - `b`: Integer representing the blue component of the RGB color (0-255).

### `game.add_object(obj)`
Adds the obj entity in the game

- **Parameter**
  - `obj`: Adds the specific obj entity

#### `game.menu_config.set_bgc(r, g, b)`
Sets the background color of the menus.

- **Parameters:**
  - `r`: Integer representing the red component of the RGB color (0-255).
  - `g`: Integer representing the green component of the RGB color (0-255).
  - `b`: Integer representing the blue component of the RGB color (0-255).

### `game.menu_config.set_bg_image(image_path)`
Sets the path to the background image used for menus.

- **Parameters:**
  - `image_path`: Path to the image file used as the background for menus.

### `game.menu_config.set_title(var)`
Sets the titel in the main menu

- **Parameters:**
  - `var`: Sets the Name that will be displayed

### `game.start()`
Starts the game loop, which handles game logic, rendering, and input handling until the game is stopped or closed.

### `game.stop()`
Stops the game loop and terminates the game.

## License
This project is licensed under the MIT License. See the LICENSE.md file for details.
