# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class ProcessAlertDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'severity': 'str',
        'robot_name': 'str',
        'process_name': 'str',
        'id': 'str'
    }

    attribute_map = {
        'message': 'Message',
        'severity': 'Severity',
        'robot_name': 'RobotName',
        'process_name': 'ProcessName',
        'id': 'Id'
    }

    def __init__(self, message=None, severity=None, robot_name=None, process_name=None, id=None, _configuration=None):  # noqa: E501
        """ProcessAlertDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._severity = None
        self._robot_name = None
        self._process_name = None
        self._id = None
        self.discriminator = None

        self.message = message
        self.severity = severity
        self.robot_name = robot_name
        self.process_name = process_name
        if id is not None:
            self.id = id

    @property
    def message(self):
        """Gets the message of this ProcessAlertDto.  # noqa: E501


        :return: The message of this ProcessAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProcessAlertDto.


        :param message: The message of this ProcessAlertDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message is not None and len(message) > 512):
            raise ValueError("Invalid value for `message`, length must be less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message is not None and len(message) < 0):
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `0`")  # noqa: E501

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this ProcessAlertDto.  # noqa: E501


        :return: The severity of this ProcessAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ProcessAlertDto.


        :param severity: The severity of this ProcessAlertDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["Info", "Success", "Warn", "Error", "Fatal"]  # noqa: E501
        if (self._configuration.client_side_validation and
                severity not in allowed_values):
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def robot_name(self):
        """Gets the robot_name of this ProcessAlertDto.  # noqa: E501


        :return: The robot_name of this ProcessAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._robot_name

    @robot_name.setter
    def robot_name(self, robot_name):
        """Sets the robot_name of this ProcessAlertDto.


        :param robot_name: The robot_name of this ProcessAlertDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and robot_name is None:
            raise ValueError("Invalid value for `robot_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                robot_name is not None and len(robot_name) > 512):
            raise ValueError("Invalid value for `robot_name`, length must be less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                robot_name is not None and len(robot_name) < 0):
            raise ValueError("Invalid value for `robot_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._robot_name = robot_name

    @property
    def process_name(self):
        """Gets the process_name of this ProcessAlertDto.  # noqa: E501


        :return: The process_name of this ProcessAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """Sets the process_name of this ProcessAlertDto.


        :param process_name: The process_name of this ProcessAlertDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and process_name is None:
            raise ValueError("Invalid value for `process_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                process_name is not None and len(process_name) > 512):
            raise ValueError("Invalid value for `process_name`, length must be less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                process_name is not None and len(process_name) < 0):
            raise ValueError("Invalid value for `process_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._process_name = process_name

    @property
    def id(self):
        """Gets the id of this ProcessAlertDto.  # noqa: E501


        :return: The id of this ProcessAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProcessAlertDto.


        :param id: The id of this ProcessAlertDto.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessAlertDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessAlertDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProcessAlertDto):
            return True

        return self.to_dict() != other.to_dict()
