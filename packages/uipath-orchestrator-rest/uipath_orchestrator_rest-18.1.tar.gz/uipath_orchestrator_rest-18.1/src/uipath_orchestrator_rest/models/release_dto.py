# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class ReleaseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'process_key': 'str',
        'process_version': 'str',
        'is_latest_version': 'bool',
        'is_process_deleted': 'bool',
        'description': 'str',
        'name': 'str',
        'environment_id': 'int',
        'environment_name': 'str',
        'environment': 'EnvironmentDto',
        'entry_point_id': 'int',
        'entry_point_path': 'str',
        'entry_point': 'EntryPointDto',
        'input_arguments': 'str',
        'process_type': 'str',
        'supports_multiple_entry_points': 'bool',
        'requires_user_interaction': 'bool',
        'is_attended': 'bool',
        'is_compiled': 'bool',
        'automation_hub_idea_url': 'str',
        'current_version': 'ReleaseVersionDto',
        'release_versions': 'list[ReleaseVersionDto]',
        'arguments': 'ArgumentMetadata',
        'process_settings': 'ProcessSettingsDto',
        'video_recording_settings': 'VideoRecordingSettingsDto',
        'auto_update': 'bool',
        'hidden_for_attended_user': 'bool',
        'feed_id': 'str',
        'job_priority': 'str',
        'specific_priority_value': 'int',
        'organization_unit_id': 'int',
        'organization_unit_fully_qualified_name': 'str',
        'target_framework': 'str',
        'robot_size': 'str',
        'tags': 'list[TagDto]',
        'remote_control_access': 'str',
        'last_modification_time': 'datetime',
        'last_modifier_user_id': 'int',
        'creation_time': 'datetime',
        'creator_user_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'key': 'Key',
        'process_key': 'ProcessKey',
        'process_version': 'ProcessVersion',
        'is_latest_version': 'IsLatestVersion',
        'is_process_deleted': 'IsProcessDeleted',
        'description': 'Description',
        'name': 'Name',
        'environment_id': 'EnvironmentId',
        'environment_name': 'EnvironmentName',
        'environment': 'Environment',
        'entry_point_id': 'EntryPointId',
        'entry_point_path': 'EntryPointPath',
        'entry_point': 'EntryPoint',
        'input_arguments': 'InputArguments',
        'process_type': 'ProcessType',
        'supports_multiple_entry_points': 'SupportsMultipleEntryPoints',
        'requires_user_interaction': 'RequiresUserInteraction',
        'is_attended': 'IsAttended',
        'is_compiled': 'IsCompiled',
        'automation_hub_idea_url': 'AutomationHubIdeaUrl',
        'current_version': 'CurrentVersion',
        'release_versions': 'ReleaseVersions',
        'arguments': 'Arguments',
        'process_settings': 'ProcessSettings',
        'video_recording_settings': 'VideoRecordingSettings',
        'auto_update': 'AutoUpdate',
        'hidden_for_attended_user': 'HiddenForAttendedUser',
        'feed_id': 'FeedId',
        'job_priority': 'JobPriority',
        'specific_priority_value': 'SpecificPriorityValue',
        'organization_unit_id': 'OrganizationUnitId',
        'organization_unit_fully_qualified_name': 'OrganizationUnitFullyQualifiedName',
        'target_framework': 'TargetFramework',
        'robot_size': 'RobotSize',
        'tags': 'Tags',
        'remote_control_access': 'RemoteControlAccess',
        'last_modification_time': 'LastModificationTime',
        'last_modifier_user_id': 'LastModifierUserId',
        'creation_time': 'CreationTime',
        'creator_user_id': 'CreatorUserId',
        'id': 'Id'
    }

    def __init__(self, key=None, process_key=None, process_version=None, is_latest_version=None, is_process_deleted=None, description=None, name=None, environment_id=None, environment_name=None, environment=None, entry_point_id=None, entry_point_path=None, entry_point=None, input_arguments=None, process_type=None, supports_multiple_entry_points=None, requires_user_interaction=None, is_attended=None, is_compiled=None, automation_hub_idea_url=None, current_version=None, release_versions=None, arguments=None, process_settings=None, video_recording_settings=None, auto_update=None, hidden_for_attended_user=None, feed_id=None, job_priority=None, specific_priority_value=None, organization_unit_id=None, organization_unit_fully_qualified_name=None, target_framework=None, robot_size=None, tags=None, remote_control_access=None, last_modification_time=None, last_modifier_user_id=None, creation_time=None, creator_user_id=None, id=None, _configuration=None):  # noqa: E501
        """ReleaseDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._process_key = None
        self._process_version = None
        self._is_latest_version = None
        self._is_process_deleted = None
        self._description = None
        self._name = None
        self._environment_id = None
        self._environment_name = None
        self._environment = None
        self._entry_point_id = None
        self._entry_point_path = None
        self._entry_point = None
        self._input_arguments = None
        self._process_type = None
        self._supports_multiple_entry_points = None
        self._requires_user_interaction = None
        self._is_attended = None
        self._is_compiled = None
        self._automation_hub_idea_url = None
        self._current_version = None
        self._release_versions = None
        self._arguments = None
        self._process_settings = None
        self._video_recording_settings = None
        self._auto_update = None
        self._hidden_for_attended_user = None
        self._feed_id = None
        self._job_priority = None
        self._specific_priority_value = None
        self._organization_unit_id = None
        self._organization_unit_fully_qualified_name = None
        self._target_framework = None
        self._robot_size = None
        self._tags = None
        self._remote_control_access = None
        self._last_modification_time = None
        self._last_modifier_user_id = None
        self._creation_time = None
        self._creator_user_id = None
        self._id = None
        self.discriminator = None

        if key is not None:
            self.key = key
        self.process_key = process_key
        self.process_version = process_version
        if is_latest_version is not None:
            self.is_latest_version = is_latest_version
        if is_process_deleted is not None:
            self.is_process_deleted = is_process_deleted
        if description is not None:
            self.description = description
        self.name = name
        if environment_id is not None:
            self.environment_id = environment_id
        if environment_name is not None:
            self.environment_name = environment_name
        if environment is not None:
            self.environment = environment
        if entry_point_id is not None:
            self.entry_point_id = entry_point_id
        if entry_point_path is not None:
            self.entry_point_path = entry_point_path
        if entry_point is not None:
            self.entry_point = entry_point
        if input_arguments is not None:
            self.input_arguments = input_arguments
        if process_type is not None:
            self.process_type = process_type
        if supports_multiple_entry_points is not None:
            self.supports_multiple_entry_points = supports_multiple_entry_points
        if requires_user_interaction is not None:
            self.requires_user_interaction = requires_user_interaction
        if is_attended is not None:
            self.is_attended = is_attended
        if is_compiled is not None:
            self.is_compiled = is_compiled
        if automation_hub_idea_url is not None:
            self.automation_hub_idea_url = automation_hub_idea_url
        if current_version is not None:
            self.current_version = current_version
        if release_versions is not None:
            self.release_versions = release_versions
        if arguments is not None:
            self.arguments = arguments
        if process_settings is not None:
            self.process_settings = process_settings
        if video_recording_settings is not None:
            self.video_recording_settings = video_recording_settings
        if auto_update is not None:
            self.auto_update = auto_update
        if hidden_for_attended_user is not None:
            self.hidden_for_attended_user = hidden_for_attended_user
        if feed_id is not None:
            self.feed_id = feed_id
        if job_priority is not None:
            self.job_priority = job_priority
        if specific_priority_value is not None:
            self.specific_priority_value = specific_priority_value
        if organization_unit_id is not None:
            self.organization_unit_id = organization_unit_id
        if organization_unit_fully_qualified_name is not None:
            self.organization_unit_fully_qualified_name = organization_unit_fully_qualified_name
        if target_framework is not None:
            self.target_framework = target_framework
        if robot_size is not None:
            self.robot_size = robot_size
        if tags is not None:
            self.tags = tags
        if remote_control_access is not None:
            self.remote_control_access = remote_control_access
        if last_modification_time is not None:
            self.last_modification_time = last_modification_time
        if last_modifier_user_id is not None:
            self.last_modifier_user_id = last_modifier_user_id
        if creation_time is not None:
            self.creation_time = creation_time
        if creator_user_id is not None:
            self.creator_user_id = creator_user_id
        if id is not None:
            self.id = id

    @property
    def key(self):
        """Gets the key of this ReleaseDto.  # noqa: E501

        A unique identifier associated to each release.  # noqa: E501

        :return: The key of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ReleaseDto.

        A unique identifier associated to each release.  # noqa: E501

        :param key: The key of this ReleaseDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def process_key(self):
        """Gets the process_key of this ReleaseDto.  # noqa: E501

        The unique identifier of the process associated with the release.  # noqa: E501

        :return: The process_key of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._process_key

    @process_key.setter
    def process_key(self, process_key):
        """Sets the process_key of this ReleaseDto.

        The unique identifier of the process associated with the release.  # noqa: E501

        :param process_key: The process_key of this ReleaseDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and process_key is None:
            raise ValueError("Invalid value for `process_key`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                process_key is not None and len(process_key) < 1):
            raise ValueError("Invalid value for `process_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._process_key = process_key

    @property
    def process_version(self):
        """Gets the process_version of this ReleaseDto.  # noqa: E501

        The version of the process associated with the release.  # noqa: E501

        :return: The process_version of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._process_version

    @process_version.setter
    def process_version(self, process_version):
        """Sets the process_version of this ReleaseDto.

        The version of the process associated with the release.  # noqa: E501

        :param process_version: The process_version of this ReleaseDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and process_version is None:
            raise ValueError("Invalid value for `process_version`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                process_version is not None and len(process_version) < 1):
            raise ValueError("Invalid value for `process_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._process_version = process_version

    @property
    def is_latest_version(self):
        """Gets the is_latest_version of this ReleaseDto.  # noqa: E501

        States whether the version of process associated with the release is latest or not.  # noqa: E501

        :return: The is_latest_version of this ReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest_version

    @is_latest_version.setter
    def is_latest_version(self, is_latest_version):
        """Sets the is_latest_version of this ReleaseDto.

        States whether the version of process associated with the release is latest or not.  # noqa: E501

        :param is_latest_version: The is_latest_version of this ReleaseDto.  # noqa: E501
        :type: bool
        """

        self._is_latest_version = is_latest_version

    @property
    def is_process_deleted(self):
        """Gets the is_process_deleted of this ReleaseDto.  # noqa: E501

        States whether the process associated with the release is deleted or not.  # noqa: E501

        :return: The is_process_deleted of this ReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_process_deleted

    @is_process_deleted.setter
    def is_process_deleted(self, is_process_deleted):
        """Sets the is_process_deleted of this ReleaseDto.

        States whether the process associated with the release is deleted or not.  # noqa: E501

        :param is_process_deleted: The is_process_deleted of this ReleaseDto.  # noqa: E501
        :type: bool
        """

        self._is_process_deleted = is_process_deleted

    @property
    def description(self):
        """Gets the description of this ReleaseDto.  # noqa: E501

        Used to add additional information about a release in order to better identify it.  # noqa: E501

        :return: The description of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReleaseDto.

        Used to add additional information about a release in order to better identify it.  # noqa: E501

        :param description: The description of this ReleaseDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ReleaseDto.  # noqa: E501

        A custom name of the release. The default name format is ProcessName_EnvironmentName.  # noqa: E501

        :return: The name of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseDto.

        A custom name of the release. The default name format is ProcessName_EnvironmentName.  # noqa: E501

        :param name: The name of this ReleaseDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def environment_id(self):
        """Gets the environment_id of this ReleaseDto.  # noqa: E501

        The Id of the environment associated with the release.  # noqa: E501

        :return: The environment_id of this ReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this ReleaseDto.

        The Id of the environment associated with the release.  # noqa: E501

        :param environment_id: The environment_id of this ReleaseDto.  # noqa: E501
        :type: int
        """

        self._environment_id = environment_id

    @property
    def environment_name(self):
        """Gets the environment_name of this ReleaseDto.  # noqa: E501

        The name of the environment associated with the release.  # noqa: E501

        :return: The environment_name of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this ReleaseDto.

        The name of the environment associated with the release.  # noqa: E501

        :param environment_name: The environment_name of this ReleaseDto.  # noqa: E501
        :type: str
        """

        self._environment_name = environment_name

    @property
    def environment(self):
        """Gets the environment of this ReleaseDto.  # noqa: E501


        :return: The environment of this ReleaseDto.  # noqa: E501
        :rtype: EnvironmentDto
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ReleaseDto.


        :param environment: The environment of this ReleaseDto.  # noqa: E501
        :type: EnvironmentDto
        """

        self._environment = environment

    @property
    def entry_point_id(self):
        """Gets the entry_point_id of this ReleaseDto.  # noqa: E501


        :return: The entry_point_id of this ReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._entry_point_id

    @entry_point_id.setter
    def entry_point_id(self, entry_point_id):
        """Sets the entry_point_id of this ReleaseDto.


        :param entry_point_id: The entry_point_id of this ReleaseDto.  # noqa: E501
        :type: int
        """

        self._entry_point_id = entry_point_id

    @property
    def entry_point_path(self):
        """Gets the entry_point_path of this ReleaseDto.  # noqa: E501


        :return: The entry_point_path of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._entry_point_path

    @entry_point_path.setter
    def entry_point_path(self, entry_point_path):
        """Sets the entry_point_path of this ReleaseDto.


        :param entry_point_path: The entry_point_path of this ReleaseDto.  # noqa: E501
        :type: str
        """

        self._entry_point_path = entry_point_path

    @property
    def entry_point(self):
        """Gets the entry_point of this ReleaseDto.  # noqa: E501


        :return: The entry_point of this ReleaseDto.  # noqa: E501
        :rtype: EntryPointDto
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this ReleaseDto.


        :param entry_point: The entry_point of this ReleaseDto.  # noqa: E501
        :type: EntryPointDto
        """

        self._entry_point = entry_point

    @property
    def input_arguments(self):
        """Gets the input_arguments of this ReleaseDto.  # noqa: E501

        Input parameters in JSON format to be passed as default values to job execution.  # noqa: E501

        :return: The input_arguments of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._input_arguments

    @input_arguments.setter
    def input_arguments(self, input_arguments):
        """Sets the input_arguments of this ReleaseDto.

        Input parameters in JSON format to be passed as default values to job execution.  # noqa: E501

        :param input_arguments: The input_arguments of this ReleaseDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                input_arguments is not None and len(input_arguments) > 10000):
            raise ValueError("Invalid value for `input_arguments`, length must be less than or equal to `10000`")  # noqa: E501

        self._input_arguments = input_arguments

    @property
    def process_type(self):
        """Gets the process_type of this ReleaseDto.  # noqa: E501


        :return: The process_type of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this ReleaseDto.


        :param process_type: The process_type of this ReleaseDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Undefined", "Process", "TestAutomationProcess"]  # noqa: E501
        if (self._configuration.client_side_validation and
                process_type not in allowed_values):
            raise ValueError(
                "Invalid value for `process_type` ({0}), must be one of {1}"  # noqa: E501
                .format(process_type, allowed_values)
            )

        self._process_type = process_type

    @property
    def supports_multiple_entry_points(self):
        """Gets the supports_multiple_entry_points of this ReleaseDto.  # noqa: E501


        :return: The supports_multiple_entry_points of this ReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._supports_multiple_entry_points

    @supports_multiple_entry_points.setter
    def supports_multiple_entry_points(self, supports_multiple_entry_points):
        """Sets the supports_multiple_entry_points of this ReleaseDto.


        :param supports_multiple_entry_points: The supports_multiple_entry_points of this ReleaseDto.  # noqa: E501
        :type: bool
        """

        self._supports_multiple_entry_points = supports_multiple_entry_points

    @property
    def requires_user_interaction(self):
        """Gets the requires_user_interaction of this ReleaseDto.  # noqa: E501


        :return: The requires_user_interaction of this ReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._requires_user_interaction

    @requires_user_interaction.setter
    def requires_user_interaction(self, requires_user_interaction):
        """Sets the requires_user_interaction of this ReleaseDto.


        :param requires_user_interaction: The requires_user_interaction of this ReleaseDto.  # noqa: E501
        :type: bool
        """

        self._requires_user_interaction = requires_user_interaction

    @property
    def is_attended(self):
        """Gets the is_attended of this ReleaseDto.  # noqa: E501


        :return: The is_attended of this ReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_attended

    @is_attended.setter
    def is_attended(self, is_attended):
        """Sets the is_attended of this ReleaseDto.


        :param is_attended: The is_attended of this ReleaseDto.  # noqa: E501
        :type: bool
        """

        self._is_attended = is_attended

    @property
    def is_compiled(self):
        """Gets the is_compiled of this ReleaseDto.  # noqa: E501


        :return: The is_compiled of this ReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_compiled

    @is_compiled.setter
    def is_compiled(self, is_compiled):
        """Sets the is_compiled of this ReleaseDto.


        :param is_compiled: The is_compiled of this ReleaseDto.  # noqa: E501
        :type: bool
        """

        self._is_compiled = is_compiled

    @property
    def automation_hub_idea_url(self):
        """Gets the automation_hub_idea_url of this ReleaseDto.  # noqa: E501


        :return: The automation_hub_idea_url of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._automation_hub_idea_url

    @automation_hub_idea_url.setter
    def automation_hub_idea_url(self, automation_hub_idea_url):
        """Sets the automation_hub_idea_url of this ReleaseDto.


        :param automation_hub_idea_url: The automation_hub_idea_url of this ReleaseDto.  # noqa: E501
        :type: str
        """

        self._automation_hub_idea_url = automation_hub_idea_url

    @property
    def current_version(self):
        """Gets the current_version of this ReleaseDto.  # noqa: E501


        :return: The current_version of this ReleaseDto.  # noqa: E501
        :rtype: ReleaseVersionDto
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this ReleaseDto.


        :param current_version: The current_version of this ReleaseDto.  # noqa: E501
        :type: ReleaseVersionDto
        """

        self._current_version = current_version

    @property
    def release_versions(self):
        """Gets the release_versions of this ReleaseDto.  # noqa: E501

        The collection of release versions that current release had over time.  # noqa: E501

        :return: The release_versions of this ReleaseDto.  # noqa: E501
        :rtype: list[ReleaseVersionDto]
        """
        return self._release_versions

    @release_versions.setter
    def release_versions(self, release_versions):
        """Sets the release_versions of this ReleaseDto.

        The collection of release versions that current release had over time.  # noqa: E501

        :param release_versions: The release_versions of this ReleaseDto.  # noqa: E501
        :type: list[ReleaseVersionDto]
        """

        self._release_versions = release_versions

    @property
    def arguments(self):
        """Gets the arguments of this ReleaseDto.  # noqa: E501


        :return: The arguments of this ReleaseDto.  # noqa: E501
        :rtype: ArgumentMetadata
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ReleaseDto.


        :param arguments: The arguments of this ReleaseDto.  # noqa: E501
        :type: ArgumentMetadata
        """

        self._arguments = arguments

    @property
    def process_settings(self):
        """Gets the process_settings of this ReleaseDto.  # noqa: E501


        :return: The process_settings of this ReleaseDto.  # noqa: E501
        :rtype: ProcessSettingsDto
        """
        return self._process_settings

    @process_settings.setter
    def process_settings(self, process_settings):
        """Sets the process_settings of this ReleaseDto.


        :param process_settings: The process_settings of this ReleaseDto.  # noqa: E501
        :type: ProcessSettingsDto
        """

        self._process_settings = process_settings

    @property
    def video_recording_settings(self):
        """Gets the video_recording_settings of this ReleaseDto.  # noqa: E501


        :return: The video_recording_settings of this ReleaseDto.  # noqa: E501
        :rtype: VideoRecordingSettingsDto
        """
        return self._video_recording_settings

    @video_recording_settings.setter
    def video_recording_settings(self, video_recording_settings):
        """Sets the video_recording_settings of this ReleaseDto.


        :param video_recording_settings: The video_recording_settings of this ReleaseDto.  # noqa: E501
        :type: VideoRecordingSettingsDto
        """

        self._video_recording_settings = video_recording_settings

    @property
    def auto_update(self):
        """Gets the auto_update of this ReleaseDto.  # noqa: E501


        :return: The auto_update of this ReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_update

    @auto_update.setter
    def auto_update(self, auto_update):
        """Sets the auto_update of this ReleaseDto.


        :param auto_update: The auto_update of this ReleaseDto.  # noqa: E501
        :type: bool
        """

        self._auto_update = auto_update

    @property
    def hidden_for_attended_user(self):
        """Gets the hidden_for_attended_user of this ReleaseDto.  # noqa: E501


        :return: The hidden_for_attended_user of this ReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_for_attended_user

    @hidden_for_attended_user.setter
    def hidden_for_attended_user(self, hidden_for_attended_user):
        """Sets the hidden_for_attended_user of this ReleaseDto.


        :param hidden_for_attended_user: The hidden_for_attended_user of this ReleaseDto.  # noqa: E501
        :type: bool
        """

        self._hidden_for_attended_user = hidden_for_attended_user

    @property
    def feed_id(self):
        """Gets the feed_id of this ReleaseDto.  # noqa: E501


        :return: The feed_id of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id):
        """Sets the feed_id of this ReleaseDto.


        :param feed_id: The feed_id of this ReleaseDto.  # noqa: E501
        :type: str
        """

        self._feed_id = feed_id

    @property
    def job_priority(self):
        """Gets the job_priority of this ReleaseDto.  # noqa: E501

        The execution priority. If null, it defaults to Normal.  # noqa: E501

        :return: The job_priority of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._job_priority

    @job_priority.setter
    def job_priority(self, job_priority):
        """Sets the job_priority of this ReleaseDto.

        The execution priority. If null, it defaults to Normal.  # noqa: E501

        :param job_priority: The job_priority of this ReleaseDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Low", "Normal", "High"]  # noqa: E501
        if (self._configuration.client_side_validation and
                job_priority not in allowed_values):
            raise ValueError(
                "Invalid value for `job_priority` ({0}), must be one of {1}"  # noqa: E501
                .format(job_priority, allowed_values)
            )

        self._job_priority = job_priority

    @property
    def specific_priority_value(self):
        """Gets the specific_priority_value of this ReleaseDto.  # noqa: E501

        Value for more granular control over execution priority.  # noqa: E501

        :return: The specific_priority_value of this ReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._specific_priority_value

    @specific_priority_value.setter
    def specific_priority_value(self, specific_priority_value):
        """Sets the specific_priority_value of this ReleaseDto.

        Value for more granular control over execution priority.  # noqa: E501

        :param specific_priority_value: The specific_priority_value of this ReleaseDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                specific_priority_value is not None and specific_priority_value > 100):  # noqa: E501
            raise ValueError("Invalid value for `specific_priority_value`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                specific_priority_value is not None and specific_priority_value < 1):  # noqa: E501
            raise ValueError("Invalid value for `specific_priority_value`, must be a value greater than or equal to `1`")  # noqa: E501

        self._specific_priority_value = specific_priority_value

    @property
    def organization_unit_id(self):
        """Gets the organization_unit_id of this ReleaseDto.  # noqa: E501

        Id of the folder this release is part of.  # noqa: E501

        :return: The organization_unit_id of this ReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._organization_unit_id

    @organization_unit_id.setter
    def organization_unit_id(self, organization_unit_id):
        """Sets the organization_unit_id of this ReleaseDto.

        Id of the folder this release is part of.  # noqa: E501

        :param organization_unit_id: The organization_unit_id of this ReleaseDto.  # noqa: E501
        :type: int
        """

        self._organization_unit_id = organization_unit_id

    @property
    def organization_unit_fully_qualified_name(self):
        """Gets the organization_unit_fully_qualified_name of this ReleaseDto.  # noqa: E501

        Fully qualified name of the folder this release is part of.  # noqa: E501

        :return: The organization_unit_fully_qualified_name of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._organization_unit_fully_qualified_name

    @organization_unit_fully_qualified_name.setter
    def organization_unit_fully_qualified_name(self, organization_unit_fully_qualified_name):
        """Sets the organization_unit_fully_qualified_name of this ReleaseDto.

        Fully qualified name of the folder this release is part of.  # noqa: E501

        :param organization_unit_fully_qualified_name: The organization_unit_fully_qualified_name of this ReleaseDto.  # noqa: E501
        :type: str
        """

        self._organization_unit_fully_qualified_name = organization_unit_fully_qualified_name

    @property
    def target_framework(self):
        """Gets the target_framework of this ReleaseDto.  # noqa: E501


        :return: The target_framework of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._target_framework

    @target_framework.setter
    def target_framework(self, target_framework):
        """Sets the target_framework of this ReleaseDto.


        :param target_framework: The target_framework of this ReleaseDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Legacy", "Windows", "Portable"]  # noqa: E501
        if (self._configuration.client_side_validation and
                target_framework not in allowed_values):
            raise ValueError(
                "Invalid value for `target_framework` ({0}), must be one of {1}"  # noqa: E501
                .format(target_framework, allowed_values)
            )

        self._target_framework = target_framework

    @property
    def robot_size(self):
        """Gets the robot_size of this ReleaseDto.  # noqa: E501


        :return: The robot_size of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._robot_size

    @robot_size.setter
    def robot_size(self, robot_size):
        """Sets the robot_size of this ReleaseDto.


        :param robot_size: The robot_size of this ReleaseDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Small", "Standard", "Medium", "Large"]  # noqa: E501
        if (self._configuration.client_side_validation and
                robot_size not in allowed_values):
            raise ValueError(
                "Invalid value for `robot_size` ({0}), must be one of {1}"  # noqa: E501
                .format(robot_size, allowed_values)
            )

        self._robot_size = robot_size

    @property
    def tags(self):
        """Gets the tags of this ReleaseDto.  # noqa: E501


        :return: The tags of this ReleaseDto.  # noqa: E501
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReleaseDto.


        :param tags: The tags of this ReleaseDto.  # noqa: E501
        :type: list[TagDto]
        """

        self._tags = tags

    @property
    def remote_control_access(self):
        """Gets the remote_control_access of this ReleaseDto.  # noqa: E501


        :return: The remote_control_access of this ReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._remote_control_access

    @remote_control_access.setter
    def remote_control_access(self, remote_control_access):
        """Sets the remote_control_access of this ReleaseDto.


        :param remote_control_access: The remote_control_access of this ReleaseDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "ReadOnly", "Full"]  # noqa: E501
        if (self._configuration.client_side_validation and
                remote_control_access not in allowed_values):
            raise ValueError(
                "Invalid value for `remote_control_access` ({0}), must be one of {1}"  # noqa: E501
                .format(remote_control_access, allowed_values)
            )

        self._remote_control_access = remote_control_access

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this ReleaseDto.  # noqa: E501


        :return: The last_modification_time of this ReleaseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this ReleaseDto.


        :param last_modification_time: The last_modification_time of this ReleaseDto.  # noqa: E501
        :type: datetime
        """

        self._last_modification_time = last_modification_time

    @property
    def last_modifier_user_id(self):
        """Gets the last_modifier_user_id of this ReleaseDto.  # noqa: E501


        :return: The last_modifier_user_id of this ReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modifier_user_id

    @last_modifier_user_id.setter
    def last_modifier_user_id(self, last_modifier_user_id):
        """Sets the last_modifier_user_id of this ReleaseDto.


        :param last_modifier_user_id: The last_modifier_user_id of this ReleaseDto.  # noqa: E501
        :type: int
        """

        self._last_modifier_user_id = last_modifier_user_id

    @property
    def creation_time(self):
        """Gets the creation_time of this ReleaseDto.  # noqa: E501


        :return: The creation_time of this ReleaseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ReleaseDto.


        :param creation_time: The creation_time of this ReleaseDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this ReleaseDto.  # noqa: E501


        :return: The creator_user_id of this ReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this ReleaseDto.


        :param creator_user_id: The creator_user_id of this ReleaseDto.  # noqa: E501
        :type: int
        """

        self._creator_user_id = creator_user_id

    @property
    def id(self):
        """Gets the id of this ReleaseDto.  # noqa: E501


        :return: The id of this ReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleaseDto.


        :param id: The id of this ReleaseDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReleaseDto):
            return True

        return self.to_dict() != other.to_dict()
