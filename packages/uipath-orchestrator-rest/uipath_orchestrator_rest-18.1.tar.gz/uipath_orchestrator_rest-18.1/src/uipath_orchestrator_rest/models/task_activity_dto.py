# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TaskActivityDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator_user': 'UserLoginInfoDto',
        'target_user': 'UserLoginInfoDto',
        'task': 'TaskDto',
        'task_note': 'TaskNoteDto',
        'key': 'str',
        'tenant_id': 'int',
        'organization_unit_id': 'int',
        'task_id': 'int',
        'activity_type': 'str',
        'creator_user_id': 'int',
        'target_user_id': 'int',
        'task_note_id': 'int',
        'creation_time': 'datetime',
        'id': 'int'
    }

    attribute_map = {
        'creator_user': 'CreatorUser',
        'target_user': 'TargetUser',
        'task': 'Task',
        'task_note': 'TaskNote',
        'key': 'Key',
        'tenant_id': 'TenantId',
        'organization_unit_id': 'OrganizationUnitId',
        'task_id': 'TaskId',
        'activity_type': 'ActivityType',
        'creator_user_id': 'CreatorUserId',
        'target_user_id': 'TargetUserId',
        'task_note_id': 'TaskNoteId',
        'creation_time': 'CreationTime',
        'id': 'Id'
    }

    def __init__(self, creator_user=None, target_user=None, task=None, task_note=None, key=None, tenant_id=None, organization_unit_id=None, task_id=None, activity_type=None, creator_user_id=None, target_user_id=None, task_note_id=None, creation_time=None, id=None, _configuration=None):  # noqa: E501
        """TaskActivityDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creator_user = None
        self._target_user = None
        self._task = None
        self._task_note = None
        self._key = None
        self._tenant_id = None
        self._organization_unit_id = None
        self._task_id = None
        self._activity_type = None
        self._creator_user_id = None
        self._target_user_id = None
        self._task_note_id = None
        self._creation_time = None
        self._id = None
        self.discriminator = None

        if creator_user is not None:
            self.creator_user = creator_user
        if target_user is not None:
            self.target_user = target_user
        if task is not None:
            self.task = task
        if task_note is not None:
            self.task_note = task_note
        if key is not None:
            self.key = key
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if organization_unit_id is not None:
            self.organization_unit_id = organization_unit_id
        if task_id is not None:
            self.task_id = task_id
        if activity_type is not None:
            self.activity_type = activity_type
        if creator_user_id is not None:
            self.creator_user_id = creator_user_id
        if target_user_id is not None:
            self.target_user_id = target_user_id
        if task_note_id is not None:
            self.task_note_id = task_note_id
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id

    @property
    def creator_user(self):
        """Gets the creator_user of this TaskActivityDto.  # noqa: E501


        :return: The creator_user of this TaskActivityDto.  # noqa: E501
        :rtype: UserLoginInfoDto
        """
        return self._creator_user

    @creator_user.setter
    def creator_user(self, creator_user):
        """Sets the creator_user of this TaskActivityDto.


        :param creator_user: The creator_user of this TaskActivityDto.  # noqa: E501
        :type: UserLoginInfoDto
        """

        self._creator_user = creator_user

    @property
    def target_user(self):
        """Gets the target_user of this TaskActivityDto.  # noqa: E501


        :return: The target_user of this TaskActivityDto.  # noqa: E501
        :rtype: UserLoginInfoDto
        """
        return self._target_user

    @target_user.setter
    def target_user(self, target_user):
        """Sets the target_user of this TaskActivityDto.


        :param target_user: The target_user of this TaskActivityDto.  # noqa: E501
        :type: UserLoginInfoDto
        """

        self._target_user = target_user

    @property
    def task(self):
        """Gets the task of this TaskActivityDto.  # noqa: E501


        :return: The task of this TaskActivityDto.  # noqa: E501
        :rtype: TaskDto
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TaskActivityDto.


        :param task: The task of this TaskActivityDto.  # noqa: E501
        :type: TaskDto
        """

        self._task = task

    @property
    def task_note(self):
        """Gets the task_note of this TaskActivityDto.  # noqa: E501


        :return: The task_note of this TaskActivityDto.  # noqa: E501
        :rtype: TaskNoteDto
        """
        return self._task_note

    @task_note.setter
    def task_note(self, task_note):
        """Sets the task_note of this TaskActivityDto.


        :param task_note: The task_note of this TaskActivityDto.  # noqa: E501
        :type: TaskNoteDto
        """

        self._task_note = task_note

    @property
    def key(self):
        """Gets the key of this TaskActivityDto.  # noqa: E501

        Key  # noqa: E501

        :return: The key of this TaskActivityDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TaskActivityDto.

        Key  # noqa: E501

        :param key: The key of this TaskActivityDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def tenant_id(self):
        """Gets the tenant_id of this TaskActivityDto.  # noqa: E501

        Gets or Sets the Tenant Id.  # noqa: E501

        :return: The tenant_id of this TaskActivityDto.  # noqa: E501
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this TaskActivityDto.

        Gets or Sets the Tenant Id.  # noqa: E501

        :param tenant_id: The tenant_id of this TaskActivityDto.  # noqa: E501
        :type: int
        """

        self._tenant_id = tenant_id

    @property
    def organization_unit_id(self):
        """Gets the organization_unit_id of this TaskActivityDto.  # noqa: E501

        Gets or sets the folder/organization-unit id.  # noqa: E501

        :return: The organization_unit_id of this TaskActivityDto.  # noqa: E501
        :rtype: int
        """
        return self._organization_unit_id

    @organization_unit_id.setter
    def organization_unit_id(self, organization_unit_id):
        """Sets the organization_unit_id of this TaskActivityDto.

        Gets or sets the folder/organization-unit id.  # noqa: E501

        :param organization_unit_id: The organization_unit_id of this TaskActivityDto.  # noqa: E501
        :type: int
        """

        self._organization_unit_id = organization_unit_id

    @property
    def task_id(self):
        """Gets the task_id of this TaskActivityDto.  # noqa: E501

        Gets or sets the Id of Task to which this Note belongs to.  # noqa: E501

        :return: The task_id of this TaskActivityDto.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskActivityDto.

        Gets or sets the Id of Task to which this Note belongs to.  # noqa: E501

        :param task_id: The task_id of this TaskActivityDto.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def activity_type(self):
        """Gets the activity_type of this TaskActivityDto.  # noqa: E501

        Gets or sets the activity type performed on Task.  # noqa: E501

        :return: The activity_type of this TaskActivityDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this TaskActivityDto.

        Gets or sets the activity type performed on Task.  # noqa: E501

        :param activity_type: The activity_type of this TaskActivityDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Created", "Assigned", "Reassigned", "Unassigned", "Saved", "Forwarded", "Completed", "Commented", "Deleted", "BulkSaved", "BulkCompleted", "FirstOpened"]  # noqa: E501
        if (self._configuration.client_side_validation and
                activity_type not in allowed_values):
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this TaskActivityDto.  # noqa: E501

        Gets or sets the id of the user who created the Task Note.  # noqa: E501

        :return: The creator_user_id of this TaskActivityDto.  # noqa: E501
        :rtype: int
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this TaskActivityDto.

        Gets or sets the id of the user who created the Task Note.  # noqa: E501

        :param creator_user_id: The creator_user_id of this TaskActivityDto.  # noqa: E501
        :type: int
        """

        self._creator_user_id = creator_user_id

    @property
    def target_user_id(self):
        """Gets the target_user_id of this TaskActivityDto.  # noqa: E501

        user to whom the Task is assigned on this activity  # noqa: E501

        :return: The target_user_id of this TaskActivityDto.  # noqa: E501
        :rtype: int
        """
        return self._target_user_id

    @target_user_id.setter
    def target_user_id(self, target_user_id):
        """Sets the target_user_id of this TaskActivityDto.

        user to whom the Task is assigned on this activity  # noqa: E501

        :param target_user_id: The target_user_id of this TaskActivityDto.  # noqa: E501
        :type: int
        """

        self._target_user_id = target_user_id

    @property
    def task_note_id(self):
        """Gets the task_note_id of this TaskActivityDto.  # noqa: E501

        Gets or sets the Id of the TaskNote created for this activity.  # noqa: E501

        :return: The task_note_id of this TaskActivityDto.  # noqa: E501
        :rtype: int
        """
        return self._task_note_id

    @task_note_id.setter
    def task_note_id(self, task_note_id):
        """Sets the task_note_id of this TaskActivityDto.

        Gets or sets the Id of the TaskNote created for this activity.  # noqa: E501

        :param task_note_id: The task_note_id of this TaskActivityDto.  # noqa: E501
        :type: int
        """

        self._task_note_id = task_note_id

    @property
    def creation_time(self):
        """Gets the creation_time of this TaskActivityDto.  # noqa: E501

        Gets or sets time at which this task was created.  # noqa: E501

        :return: The creation_time of this TaskActivityDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TaskActivityDto.

        Gets or sets time at which this task was created.  # noqa: E501

        :param creation_time: The creation_time of this TaskActivityDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this TaskActivityDto.  # noqa: E501


        :return: The id of this TaskActivityDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskActivityDto.


        :param id: The id of this TaskActivityDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskActivityDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskActivityDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskActivityDto):
            return True

        return self.to_dict() != other.to_dict()
