# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class WebhookDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'name': 'str',
        'description': 'str',
        'url': 'str',
        'enabled': 'bool',
        'secret': 'str',
        'subscribe_to_all_events': 'bool',
        'allow_insecure_ssl': 'bool',
        'events': 'list[WebhookEventDto]',
        'id': 'int'
    }

    attribute_map = {
        'key': 'Key',
        'name': 'Name',
        'description': 'Description',
        'url': 'Url',
        'enabled': 'Enabled',
        'secret': 'Secret',
        'subscribe_to_all_events': 'SubscribeToAllEvents',
        'allow_insecure_ssl': 'AllowInsecureSsl',
        'events': 'Events',
        'id': 'Id'
    }

    def __init__(self, key=None, name=None, description=None, url=None, enabled=None, secret=None, subscribe_to_all_events=None, allow_insecure_ssl=None, events=None, id=None, _configuration=None):  # noqa: E501
        """WebhookDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._name = None
        self._description = None
        self._url = None
        self._enabled = None
        self._secret = None
        self._subscribe_to_all_events = None
        self._allow_insecure_ssl = None
        self._events = None
        self._id = None
        self.discriminator = None

        if key is not None:
            self.key = key
        self.name = name
        if description is not None:
            self.description = description
        self.url = url
        self.enabled = enabled
        if secret is not None:
            self.secret = secret
        self.subscribe_to_all_events = subscribe_to_all_events
        self.allow_insecure_ssl = allow_insecure_ssl
        if events is not None:
            self.events = events
        if id is not None:
            self.id = id

    @property
    def key(self):
        """Gets the key of this WebhookDto.  # noqa: E501


        :return: The key of this WebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WebhookDto.


        :param key: The key of this WebhookDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this WebhookDto.  # noqa: E501


        :return: The name of this WebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookDto.


        :param name: The name of this WebhookDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this WebhookDto.  # noqa: E501


        :return: The description of this WebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebhookDto.


        :param description: The description of this WebhookDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def url(self):
        """Gets the url of this WebhookDto.  # noqa: E501


        :return: The url of this WebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookDto.


        :param url: The url of this WebhookDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                url is not None and len(url) > 2000):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                url is not None and len(url) < 0):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `0`")  # noqa: E501

        self._url = url

    @property
    def enabled(self):
        """Gets the enabled of this WebhookDto.  # noqa: E501


        :return: The enabled of this WebhookDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WebhookDto.


        :param enabled: The enabled of this WebhookDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def secret(self):
        """Gets the secret of this WebhookDto.  # noqa: E501


        :return: The secret of this WebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this WebhookDto.


        :param secret: The secret of this WebhookDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                secret is not None and len(secret) > 100):
            raise ValueError("Invalid value for `secret`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                secret is not None and len(secret) < 0):
            raise ValueError("Invalid value for `secret`, length must be greater than or equal to `0`")  # noqa: E501

        self._secret = secret

    @property
    def subscribe_to_all_events(self):
        """Gets the subscribe_to_all_events of this WebhookDto.  # noqa: E501


        :return: The subscribe_to_all_events of this WebhookDto.  # noqa: E501
        :rtype: bool
        """
        return self._subscribe_to_all_events

    @subscribe_to_all_events.setter
    def subscribe_to_all_events(self, subscribe_to_all_events):
        """Sets the subscribe_to_all_events of this WebhookDto.


        :param subscribe_to_all_events: The subscribe_to_all_events of this WebhookDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and subscribe_to_all_events is None:
            raise ValueError("Invalid value for `subscribe_to_all_events`, must not be `None`")  # noqa: E501

        self._subscribe_to_all_events = subscribe_to_all_events

    @property
    def allow_insecure_ssl(self):
        """Gets the allow_insecure_ssl of this WebhookDto.  # noqa: E501


        :return: The allow_insecure_ssl of this WebhookDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_insecure_ssl

    @allow_insecure_ssl.setter
    def allow_insecure_ssl(self, allow_insecure_ssl):
        """Sets the allow_insecure_ssl of this WebhookDto.


        :param allow_insecure_ssl: The allow_insecure_ssl of this WebhookDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and allow_insecure_ssl is None:
            raise ValueError("Invalid value for `allow_insecure_ssl`, must not be `None`")  # noqa: E501

        self._allow_insecure_ssl = allow_insecure_ssl

    @property
    def events(self):
        """Gets the events of this WebhookDto.  # noqa: E501


        :return: The events of this WebhookDto.  # noqa: E501
        :rtype: list[WebhookEventDto]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WebhookDto.


        :param events: The events of this WebhookDto.  # noqa: E501
        :type: list[WebhookEventDto]
        """

        self._events = events

    @property
    def id(self):
        """Gets the id of this WebhookDto.  # noqa: E501


        :return: The id of this WebhookDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookDto.


        :param id: The id of this WebhookDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookDto):
            return True

        return self.to_dict() != other.to_dict()
