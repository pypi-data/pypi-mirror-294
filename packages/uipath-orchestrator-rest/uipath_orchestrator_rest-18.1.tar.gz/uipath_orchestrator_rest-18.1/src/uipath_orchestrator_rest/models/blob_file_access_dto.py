# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class BlobFileAccessDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'verb': 'str',
        'requires_auth': 'bool',
        'headers': 'ResponseDictionaryDto'
    }

    attribute_map = {
        'uri': 'Uri',
        'verb': 'Verb',
        'requires_auth': 'RequiresAuth',
        'headers': 'Headers'
    }

    def __init__(self, uri=None, verb=None, requires_auth=None, headers=None, _configuration=None):  # noqa: E501
        """BlobFileAccessDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uri = None
        self._verb = None
        self._requires_auth = None
        self._headers = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if verb is not None:
            self.verb = verb
        if requires_auth is not None:
            self.requires_auth = requires_auth
        if headers is not None:
            self.headers = headers

    @property
    def uri(self):
        """Gets the uri of this BlobFileAccessDto.  # noqa: E501


        :return: The uri of this BlobFileAccessDto.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this BlobFileAccessDto.


        :param uri: The uri of this BlobFileAccessDto.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def verb(self):
        """Gets the verb of this BlobFileAccessDto.  # noqa: E501


        :return: The verb of this BlobFileAccessDto.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this BlobFileAccessDto.


        :param verb: The verb of this BlobFileAccessDto.  # noqa: E501
        :type: str
        """

        self._verb = verb

    @property
    def requires_auth(self):
        """Gets the requires_auth of this BlobFileAccessDto.  # noqa: E501


        :return: The requires_auth of this BlobFileAccessDto.  # noqa: E501
        :rtype: bool
        """
        return self._requires_auth

    @requires_auth.setter
    def requires_auth(self, requires_auth):
        """Sets the requires_auth of this BlobFileAccessDto.


        :param requires_auth: The requires_auth of this BlobFileAccessDto.  # noqa: E501
        :type: bool
        """

        self._requires_auth = requires_auth

    @property
    def headers(self):
        """Gets the headers of this BlobFileAccessDto.  # noqa: E501


        :return: The headers of this BlobFileAccessDto.  # noqa: E501
        :rtype: ResponseDictionaryDto
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this BlobFileAccessDto.


        :param headers: The headers of this BlobFileAccessDto.  # noqa: E501
        :type: ResponseDictionaryDto
        """

        self._headers = headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlobFileAccessDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlobFileAccessDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BlobFileAccessDto):
            return True

        return self.to_dict() != other.to_dict()
