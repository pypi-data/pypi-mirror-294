# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class WrappedProcessingExceptionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reason': 'str',
        'details': 'str',
        'type': 'str',
        'timestamp': 'datetime',
        'associated_image_file_path': 'str'
    }

    attribute_map = {
        'reason': 'Reason',
        'details': 'Details',
        'type': 'Type',
        'timestamp': 'Timestamp',
        'associated_image_file_path': 'AssociatedImageFilePath'
    }

    def __init__(self, reason=None, details=None, type=None, timestamp=None, associated_image_file_path=None, _configuration=None):  # noqa: E501
        """WrappedProcessingExceptionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._reason = None
        self._details = None
        self._type = None
        self._timestamp = None
        self._associated_image_file_path = None
        self.discriminator = None

        if reason is not None:
            self.reason = reason
        if details is not None:
            self.details = details
        if type is not None:
            self.type = type
        if timestamp is not None:
            self.timestamp = timestamp
        if associated_image_file_path is not None:
            self.associated_image_file_path = associated_image_file_path

    @property
    def reason(self):
        """Gets the reason of this WrappedProcessingExceptionDto.  # noqa: E501

        The reason the processing failed.  # noqa: E501

        :return: The reason of this WrappedProcessingExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this WrappedProcessingExceptionDto.

        The reason the processing failed.  # noqa: E501

        :param reason: The reason of this WrappedProcessingExceptionDto.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def details(self):
        """Gets the details of this WrappedProcessingExceptionDto.  # noqa: E501

        Stores additional details about the exception.  # noqa: E501

        :return: The details of this WrappedProcessingExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this WrappedProcessingExceptionDto.

        Stores additional details about the exception.  # noqa: E501

        :param details: The details of this WrappedProcessingExceptionDto.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def type(self):
        """Gets the type of this WrappedProcessingExceptionDto.  # noqa: E501

        The processing exception type, if any.  # noqa: E501

        :return: The type of this WrappedProcessingExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WrappedProcessingExceptionDto.

        The processing exception type, if any.  # noqa: E501

        :param type: The type of this WrappedProcessingExceptionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ApplicationException", "BusinessException"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timestamp(self):
        """Gets the timestamp of this WrappedProcessingExceptionDto.  # noqa: E501

        The creation time  # noqa: E501

        :return: The timestamp of this WrappedProcessingExceptionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this WrappedProcessingExceptionDto.

        The creation time  # noqa: E501

        :param timestamp: The timestamp of this WrappedProcessingExceptionDto.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def associated_image_file_path(self):
        """Gets the associated_image_file_path of this WrappedProcessingExceptionDto.  # noqa: E501

        A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.  # noqa: E501

        :return: The associated_image_file_path of this WrappedProcessingExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._associated_image_file_path

    @associated_image_file_path.setter
    def associated_image_file_path(self, associated_image_file_path):
        """Sets the associated_image_file_path of this WrappedProcessingExceptionDto.

        A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.  # noqa: E501

        :param associated_image_file_path: The associated_image_file_path of this WrappedProcessingExceptionDto.  # noqa: E501
        :type: str
        """

        self._associated_image_file_path = associated_image_file_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WrappedProcessingExceptionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WrappedProcessingExceptionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WrappedProcessingExceptionDto):
            return True

        return self.to_dict() != other.to_dict()
