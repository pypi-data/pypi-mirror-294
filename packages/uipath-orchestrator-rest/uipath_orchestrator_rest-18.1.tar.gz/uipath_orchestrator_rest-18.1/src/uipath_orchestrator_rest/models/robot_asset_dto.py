# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class RobotAssetDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value_type': 'str',
        'string_value': 'str',
        'bool_value': 'bool',
        'int_value': 'int',
        'credential_username': 'str',
        'credential_password': 'str',
        'external_name': 'str',
        'credential_store_id': 'int',
        'key_value_list': 'list[CustomKeyValuePair]',
        'connection_data': 'CredentialsConnectionData',
        'id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'value_type': 'ValueType',
        'string_value': 'StringValue',
        'bool_value': 'BoolValue',
        'int_value': 'IntValue',
        'credential_username': 'CredentialUsername',
        'credential_password': 'CredentialPassword',
        'external_name': 'ExternalName',
        'credential_store_id': 'CredentialStoreId',
        'key_value_list': 'KeyValueList',
        'connection_data': 'ConnectionData',
        'id': 'Id'
    }

    def __init__(self, name=None, value_type=None, string_value=None, bool_value=None, int_value=None, credential_username=None, credential_password=None, external_name=None, credential_store_id=None, key_value_list=None, connection_data=None, id=None, _configuration=None):  # noqa: E501
        """RobotAssetDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._value_type = None
        self._string_value = None
        self._bool_value = None
        self._int_value = None
        self._credential_username = None
        self._credential_password = None
        self._external_name = None
        self._credential_store_id = None
        self._key_value_list = None
        self._connection_data = None
        self._id = None
        self.discriminator = None

        self.name = name
        if value_type is not None:
            self.value_type = value_type
        if string_value is not None:
            self.string_value = string_value
        if bool_value is not None:
            self.bool_value = bool_value
        if int_value is not None:
            self.int_value = int_value
        if credential_username is not None:
            self.credential_username = credential_username
        if credential_password is not None:
            self.credential_password = credential_password
        if external_name is not None:
            self.external_name = external_name
        if credential_store_id is not None:
            self.credential_store_id = credential_store_id
        if key_value_list is not None:
            self.key_value_list = key_value_list
        if connection_data is not None:
            self.connection_data = connection_data
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this RobotAssetDto.  # noqa: E501

        The asset name.  # noqa: E501

        :return: The name of this RobotAssetDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RobotAssetDto.

        The asset name.  # noqa: E501

        :param name: The name of this RobotAssetDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def value_type(self):
        """Gets the value_type of this RobotAssetDto.  # noqa: E501

        Defines the type of value stored by the asset.  # noqa: E501

        :return: The value_type of this RobotAssetDto.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this RobotAssetDto.

        Defines the type of value stored by the asset.  # noqa: E501

        :param value_type: The value_type of this RobotAssetDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["DBConnectionString", "HttpConnectionString", "Text", "Bool", "Integer", "Credential", "WindowsCredential", "KeyValueList"]  # noqa: E501
        if (self._configuration.client_side_validation and
                value_type not in allowed_values):
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"  # noqa: E501
                .format(value_type, allowed_values)
            )

        self._value_type = value_type

    @property
    def string_value(self):
        """Gets the string_value of this RobotAssetDto.  # noqa: E501

        The value of the asset when the value type is Text. Empty when the value type is not Text.  # noqa: E501

        :return: The string_value of this RobotAssetDto.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this RobotAssetDto.

        The value of the asset when the value type is Text. Empty when the value type is not Text.  # noqa: E501

        :param string_value: The string_value of this RobotAssetDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                string_value is not None and len(string_value) > 1000000):
            raise ValueError("Invalid value for `string_value`, length must be less than or equal to `1000000`")  # noqa: E501

        self._string_value = string_value

    @property
    def bool_value(self):
        """Gets the bool_value of this RobotAssetDto.  # noqa: E501

        The value of the asset when the value type is Bool. False when the value type is not Bool.  # noqa: E501

        :return: The bool_value of this RobotAssetDto.  # noqa: E501
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this RobotAssetDto.

        The value of the asset when the value type is Bool. False when the value type is not Bool.  # noqa: E501

        :param bool_value: The bool_value of this RobotAssetDto.  # noqa: E501
        :type: bool
        """

        self._bool_value = bool_value

    @property
    def int_value(self):
        """Gets the int_value of this RobotAssetDto.  # noqa: E501

        The value of the asset when the value type is Integer. 0 when the value type is not Integer.  # noqa: E501

        :return: The int_value of this RobotAssetDto.  # noqa: E501
        :rtype: int
        """
        return self._int_value

    @int_value.setter
    def int_value(self, int_value):
        """Sets the int_value of this RobotAssetDto.

        The value of the asset when the value type is Integer. 0 when the value type is not Integer.  # noqa: E501

        :param int_value: The int_value of this RobotAssetDto.  # noqa: E501
        :type: int
        """

        self._int_value = int_value

    @property
    def credential_username(self):
        """Gets the credential_username of this RobotAssetDto.  # noqa: E501

        The user name when the value type is Credential. Empty when the value type is not Credential.  # noqa: E501

        :return: The credential_username of this RobotAssetDto.  # noqa: E501
        :rtype: str
        """
        return self._credential_username

    @credential_username.setter
    def credential_username(self, credential_username):
        """Sets the credential_username of this RobotAssetDto.

        The user name when the value type is Credential. Empty when the value type is not Credential.  # noqa: E501

        :param credential_username: The credential_username of this RobotAssetDto.  # noqa: E501
        :type: str
        """

        self._credential_username = credential_username

    @property
    def credential_password(self):
        """Gets the credential_password of this RobotAssetDto.  # noqa: E501

        The password when the value type is Credential. Empty when the value type is not Credential.  # noqa: E501

        :return: The credential_password of this RobotAssetDto.  # noqa: E501
        :rtype: str
        """
        return self._credential_password

    @credential_password.setter
    def credential_password(self, credential_password):
        """Sets the credential_password of this RobotAssetDto.

        The password when the value type is Credential. Empty when the value type is not Credential.  # noqa: E501

        :param credential_password: The credential_password of this RobotAssetDto.  # noqa: E501
        :type: str
        """

        self._credential_password = credential_password

    @property
    def external_name(self):
        """Gets the external_name of this RobotAssetDto.  # noqa: E501

        Contains the value of the key in the external store used to store the credentials.  # noqa: E501

        :return: The external_name of this RobotAssetDto.  # noqa: E501
        :rtype: str
        """
        return self._external_name

    @external_name.setter
    def external_name(self, external_name):
        """Sets the external_name of this RobotAssetDto.

        Contains the value of the key in the external store used to store the credentials.  # noqa: E501

        :param external_name: The external_name of this RobotAssetDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                external_name is not None and len(external_name) > 450):
            raise ValueError("Invalid value for `external_name`, length must be less than or equal to `450`")  # noqa: E501
        if (self._configuration.client_side_validation and
                external_name is not None and len(external_name) < 0):
            raise ValueError("Invalid value for `external_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._external_name = external_name

    @property
    def credential_store_id(self):
        """Gets the credential_store_id of this RobotAssetDto.  # noqa: E501

        The Credential Store used to store the credentials.  # noqa: E501

        :return: The credential_store_id of this RobotAssetDto.  # noqa: E501
        :rtype: int
        """
        return self._credential_store_id

    @credential_store_id.setter
    def credential_store_id(self, credential_store_id):
        """Sets the credential_store_id of this RobotAssetDto.

        The Credential Store used to store the credentials.  # noqa: E501

        :param credential_store_id: The credential_store_id of this RobotAssetDto.  # noqa: E501
        :type: int
        """

        self._credential_store_id = credential_store_id

    @property
    def key_value_list(self):
        """Gets the key_value_list of this RobotAssetDto.  # noqa: E501

        A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.  # noqa: E501

        :return: The key_value_list of this RobotAssetDto.  # noqa: E501
        :rtype: list[CustomKeyValuePair]
        """
        return self._key_value_list

    @key_value_list.setter
    def key_value_list(self, key_value_list):
        """Sets the key_value_list of this RobotAssetDto.

        A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.  # noqa: E501

        :param key_value_list: The key_value_list of this RobotAssetDto.  # noqa: E501
        :type: list[CustomKeyValuePair]
        """

        self._key_value_list = key_value_list

    @property
    def connection_data(self):
        """Gets the connection_data of this RobotAssetDto.  # noqa: E501


        :return: The connection_data of this RobotAssetDto.  # noqa: E501
        :rtype: CredentialsConnectionData
        """
        return self._connection_data

    @connection_data.setter
    def connection_data(self, connection_data):
        """Sets the connection_data of this RobotAssetDto.


        :param connection_data: The connection_data of this RobotAssetDto.  # noqa: E501
        :type: CredentialsConnectionData
        """

        self._connection_data = connection_data

    @property
    def id(self):
        """Gets the id of this RobotAssetDto.  # noqa: E501


        :return: The id of this RobotAssetDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RobotAssetDto.


        :param id: The id of this RobotAssetDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RobotAssetDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RobotAssetDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RobotAssetDto):
            return True

        return self.to_dict() != other.to_dict()
