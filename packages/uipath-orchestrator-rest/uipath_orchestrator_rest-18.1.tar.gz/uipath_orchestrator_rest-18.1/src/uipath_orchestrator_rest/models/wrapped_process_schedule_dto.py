# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class WrappedProcessScheduleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'enabled': 'bool',
        'environment_id': 'str',
        'environment_name': 'str',
        'start_process_cron': 'str',
        'start_strategy': 'str',
        'stop_strategy': 'str',
        'external_job_key': 'str',
        'external_job_key_scheduler': 'str',
        'time_zone_id': 'str',
        'time_zone_iana': 'str',
        'use_calendar': 'bool',
        'calendar_id': 'int',
        'release': 'SimpleReleaseEventDto',
        'executor_robots': 'list[SimpleRobotEventDto]',
        'machine_robots': 'list[MachineRobotSessionDto]',
        'input_arguments': 'object'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'enabled': 'Enabled',
        'environment_id': 'EnvironmentId',
        'environment_name': 'EnvironmentName',
        'start_process_cron': 'StartProcessCron',
        'start_strategy': 'StartStrategy',
        'stop_strategy': 'StopStrategy',
        'external_job_key': 'ExternalJobKey',
        'external_job_key_scheduler': 'ExternalJobKeyScheduler',
        'time_zone_id': 'TimeZoneId',
        'time_zone_iana': 'TimeZoneIana',
        'use_calendar': 'UseCalendar',
        'calendar_id': 'CalendarId',
        'release': 'Release',
        'executor_robots': 'ExecutorRobots',
        'machine_robots': 'MachineRobots',
        'input_arguments': 'InputArguments'
    }

    def __init__(self, id=None, name=None, enabled=None, environment_id=None, environment_name=None, start_process_cron=None, start_strategy=None, stop_strategy=None, external_job_key=None, external_job_key_scheduler=None, time_zone_id=None, time_zone_iana=None, use_calendar=None, calendar_id=None, release=None, executor_robots=None, machine_robots=None, input_arguments=None, _configuration=None):  # noqa: E501
        """WrappedProcessScheduleDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._enabled = None
        self._environment_id = None
        self._environment_name = None
        self._start_process_cron = None
        self._start_strategy = None
        self._stop_strategy = None
        self._external_job_key = None
        self._external_job_key_scheduler = None
        self._time_zone_id = None
        self._time_zone_iana = None
        self._use_calendar = None
        self._calendar_id = None
        self._release = None
        self._executor_robots = None
        self._machine_robots = None
        self._input_arguments = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if enabled is not None:
            self.enabled = enabled
        if environment_id is not None:
            self.environment_id = environment_id
        if environment_name is not None:
            self.environment_name = environment_name
        if start_process_cron is not None:
            self.start_process_cron = start_process_cron
        if start_strategy is not None:
            self.start_strategy = start_strategy
        if stop_strategy is not None:
            self.stop_strategy = stop_strategy
        if external_job_key is not None:
            self.external_job_key = external_job_key
        if external_job_key_scheduler is not None:
            self.external_job_key_scheduler = external_job_key_scheduler
        if time_zone_id is not None:
            self.time_zone_id = time_zone_id
        if time_zone_iana is not None:
            self.time_zone_iana = time_zone_iana
        if use_calendar is not None:
            self.use_calendar = use_calendar
        if calendar_id is not None:
            self.calendar_id = calendar_id
        if release is not None:
            self.release = release
        if executor_robots is not None:
            self.executor_robots = executor_robots
        if machine_robots is not None:
            self.machine_robots = machine_robots
        if input_arguments is not None:
            self.input_arguments = input_arguments

    @property
    def id(self):
        """Gets the id of this WrappedProcessScheduleDto.  # noqa: E501


        :return: The id of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WrappedProcessScheduleDto.


        :param id: The id of this WrappedProcessScheduleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WrappedProcessScheduleDto.  # noqa: E501

        The name of the schedule.  # noqa: E501

        :return: The name of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WrappedProcessScheduleDto.

        The name of the schedule.  # noqa: E501

        :param name: The name of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this WrappedProcessScheduleDto.  # noqa: E501

        Specifies if the schedule is active or not.  # noqa: E501

        :return: The enabled of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WrappedProcessScheduleDto.

        Specifies if the schedule is active or not.  # noqa: E501

        :param enabled: The enabled of this WrappedProcessScheduleDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def environment_id(self):
        """Gets the environment_id of this WrappedProcessScheduleDto.  # noqa: E501

        The Id of the environment associated with the schedule.  # noqa: E501

        :return: The environment_id of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this WrappedProcessScheduleDto.

        The Id of the environment associated with the schedule.  # noqa: E501

        :param environment_id: The environment_id of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    @property
    def environment_name(self):
        """Gets the environment_name of this WrappedProcessScheduleDto.  # noqa: E501

        The name of the environment associated with the schedule.  # noqa: E501

        :return: The environment_name of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this WrappedProcessScheduleDto.

        The name of the environment associated with the schedule.  # noqa: E501

        :param environment_name: The environment_name of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._environment_name = environment_name

    @property
    def start_process_cron(self):
        """Gets the start_process_cron of this WrappedProcessScheduleDto.  # noqa: E501

        The start cron expression of the schedule.  # noqa: E501

        :return: The start_process_cron of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._start_process_cron

    @start_process_cron.setter
    def start_process_cron(self, start_process_cron):
        """Sets the start_process_cron of this WrappedProcessScheduleDto.

        The start cron expression of the schedule.  # noqa: E501

        :param start_process_cron: The start_process_cron of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._start_process_cron = start_process_cron

    @property
    def start_strategy(self):
        """Gets the start_strategy of this WrappedProcessScheduleDto.  # noqa: E501

        States which robots from the environment are being run by the schedule.  # noqa: E501

        :return: The start_strategy of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._start_strategy

    @start_strategy.setter
    def start_strategy(self, start_strategy):
        """Sets the start_strategy of this WrappedProcessScheduleDto.

        States which robots from the environment are being run by the schedule.  # noqa: E501

        :param start_strategy: The start_strategy of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["All", "Specific", "RobotCount", "JobsCount", "ModernJobsCount"]  # noqa: E501
        if (self._configuration.client_side_validation and
                start_strategy not in allowed_values):
            raise ValueError(
                "Invalid value for `start_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(start_strategy, allowed_values)
            )

        self._start_strategy = start_strategy

    @property
    def stop_strategy(self):
        """Gets the stop_strategy of this WrappedProcessScheduleDto.  # noqa: E501

        The way a running process is stopped.  # noqa: E501

        :return: The stop_strategy of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._stop_strategy

    @stop_strategy.setter
    def stop_strategy(self, stop_strategy):
        """Sets the stop_strategy of this WrappedProcessScheduleDto.

        The way a running process is stopped.  # noqa: E501

        :param stop_strategy: The stop_strategy of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["SoftStop", "Kill"]  # noqa: E501
        if (self._configuration.client_side_validation and
                stop_strategy not in allowed_values):
            raise ValueError(
                "Invalid value for `stop_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(stop_strategy, allowed_values)
            )

        self._stop_strategy = stop_strategy

    @property
    def external_job_key(self):
        """Gets the external_job_key of this WrappedProcessScheduleDto.  # noqa: E501

        The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.  # noqa: E501

        :return: The external_job_key of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._external_job_key

    @external_job_key.setter
    def external_job_key(self, external_job_key):
        """Sets the external_job_key of this WrappedProcessScheduleDto.

        The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.  # noqa: E501

        :param external_job_key: The external_job_key of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._external_job_key = external_job_key

    @property
    def external_job_key_scheduler(self):
        """Gets the external_job_key_scheduler of this WrappedProcessScheduleDto.  # noqa: E501

        The unique identifier of the external background task schedule associated with the background tasks generated by this schedule. A key is generated for each batch of background tasks triggered by this schedule.  # noqa: E501

        :return: The external_job_key_scheduler of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._external_job_key_scheduler

    @external_job_key_scheduler.setter
    def external_job_key_scheduler(self, external_job_key_scheduler):
        """Sets the external_job_key_scheduler of this WrappedProcessScheduleDto.

        The unique identifier of the external background task schedule associated with the background tasks generated by this schedule. A key is generated for each batch of background tasks triggered by this schedule.  # noqa: E501

        :param external_job_key_scheduler: The external_job_key_scheduler of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._external_job_key_scheduler = external_job_key_scheduler

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this WrappedProcessScheduleDto.  # noqa: E501

        The timezone under which the schedule will run.  # noqa: E501

        :return: The time_zone_id of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this WrappedProcessScheduleDto.

        The timezone under which the schedule will run.  # noqa: E501

        :param time_zone_id: The time_zone_id of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._time_zone_id = time_zone_id

    @property
    def time_zone_iana(self):
        """Gets the time_zone_iana of this WrappedProcessScheduleDto.  # noqa: E501

        The timezone under which the schedule will run in Iana Standard.  # noqa: E501

        :return: The time_zone_iana of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_iana

    @time_zone_iana.setter
    def time_zone_iana(self, time_zone_iana):
        """Sets the time_zone_iana of this WrappedProcessScheduleDto.

        The timezone under which the schedule will run in Iana Standard.  # noqa: E501

        :param time_zone_iana: The time_zone_iana of this WrappedProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._time_zone_iana = time_zone_iana

    @property
    def use_calendar(self):
        """Gets the use_calendar of this WrappedProcessScheduleDto.  # noqa: E501

        DEPRECATED. Specify whether the schedule uses a calendar  # noqa: E501

        :return: The use_calendar of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_calendar

    @use_calendar.setter
    def use_calendar(self, use_calendar):
        """Sets the use_calendar of this WrappedProcessScheduleDto.

        DEPRECATED. Specify whether the schedule uses a calendar  # noqa: E501

        :param use_calendar: The use_calendar of this WrappedProcessScheduleDto.  # noqa: E501
        :type: bool
        """

        self._use_calendar = use_calendar

    @property
    def calendar_id(self):
        """Gets the calendar_id of this WrappedProcessScheduleDto.  # noqa: E501

        Specify which calendar to use  # noqa: E501

        :return: The calendar_id of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this WrappedProcessScheduleDto.

        Specify which calendar to use  # noqa: E501

        :param calendar_id: The calendar_id of this WrappedProcessScheduleDto.  # noqa: E501
        :type: int
        """

        self._calendar_id = calendar_id

    @property
    def release(self):
        """Gets the release of this WrappedProcessScheduleDto.  # noqa: E501


        :return: The release of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: SimpleReleaseEventDto
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this WrappedProcessScheduleDto.


        :param release: The release of this WrappedProcessScheduleDto.  # noqa: E501
        :type: SimpleReleaseEventDto
        """

        self._release = release

    @property
    def executor_robots(self):
        """Gets the executor_robots of this WrappedProcessScheduleDto.  # noqa: E501

        The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).  # noqa: E501

        :return: The executor_robots of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: list[SimpleRobotEventDto]
        """
        return self._executor_robots

    @executor_robots.setter
    def executor_robots(self, executor_robots):
        """Sets the executor_robots of this WrappedProcessScheduleDto.

        The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).  # noqa: E501

        :param executor_robots: The executor_robots of this WrappedProcessScheduleDto.  # noqa: E501
        :type: list[SimpleRobotEventDto]
        """

        self._executor_robots = executor_robots

    @property
    def machine_robots(self):
        """Gets the machine_robots of this WrappedProcessScheduleDto.  # noqa: E501

        The machine robots. This collection must be empty if there are no explicit machine mappings  # noqa: E501

        :return: The machine_robots of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: list[MachineRobotSessionDto]
        """
        return self._machine_robots

    @machine_robots.setter
    def machine_robots(self, machine_robots):
        """Sets the machine_robots of this WrappedProcessScheduleDto.

        The machine robots. This collection must be empty if there are no explicit machine mappings  # noqa: E501

        :param machine_robots: The machine_robots of this WrappedProcessScheduleDto.  # noqa: E501
        :type: list[MachineRobotSessionDto]
        """

        self._machine_robots = machine_robots

    @property
    def input_arguments(self):
        """Gets the input_arguments of this WrappedProcessScheduleDto.  # noqa: E501

        Input parameters that will be passed to each job created by this schedule.  # noqa: E501

        :return: The input_arguments of this WrappedProcessScheduleDto.  # noqa: E501
        :rtype: object
        """
        return self._input_arguments

    @input_arguments.setter
    def input_arguments(self, input_arguments):
        """Sets the input_arguments of this WrappedProcessScheduleDto.

        Input parameters that will be passed to each job created by this schedule.  # noqa: E501

        :param input_arguments: The input_arguments of this WrappedProcessScheduleDto.  # noqa: E501
        :type: object
        """

        self._input_arguments = input_arguments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WrappedProcessScheduleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WrappedProcessScheduleDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WrappedProcessScheduleDto):
            return True

        return self.to_dict() != other.to_dict()
