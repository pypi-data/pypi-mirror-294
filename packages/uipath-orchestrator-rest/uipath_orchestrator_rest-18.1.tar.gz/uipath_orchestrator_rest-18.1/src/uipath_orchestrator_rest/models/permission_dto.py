# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class PermissionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_granted': 'bool',
        'role_id': 'int',
        'scope': 'str',
        'id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'is_granted': 'IsGranted',
        'role_id': 'RoleId',
        'scope': 'Scope',
        'id': 'Id'
    }

    def __init__(self, name=None, is_granted=None, role_id=None, scope=None, id=None, _configuration=None):  # noqa: E501
        """PermissionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._is_granted = None
        self._role_id = None
        self._scope = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if is_granted is not None:
            self.is_granted = is_granted
        if role_id is not None:
            self.role_id = role_id
        if scope is not None:
            self.scope = scope
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this PermissionDto.  # noqa: E501

        The name of the application permission.  # noqa: E501

        :return: The name of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PermissionDto.

        The name of the application permission.  # noqa: E501

        :param name: The name of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_granted(self):
        """Gets the is_granted of this PermissionDto.  # noqa: E501

        States if a user associated with the role will be allowed or denied to perform the actions governed by the permission.  # noqa: E501

        :return: The is_granted of this PermissionDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_granted

    @is_granted.setter
    def is_granted(self, is_granted):
        """Sets the is_granted of this PermissionDto.

        States if a user associated with the role will be allowed or denied to perform the actions governed by the permission.  # noqa: E501

        :param is_granted: The is_granted of this PermissionDto.  # noqa: E501
        :type: bool
        """

        self._is_granted = is_granted

    @property
    def role_id(self):
        """Gets the role_id of this PermissionDto.  # noqa: E501

        The Id of the role associated with the permission.  # noqa: E501

        :return: The role_id of this PermissionDto.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this PermissionDto.

        The Id of the role associated with the permission.  # noqa: E501

        :param role_id: The role_id of this PermissionDto.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def scope(self):
        """Gets the scope of this PermissionDto.  # noqa: E501

        The application scope in which the permission will be applied  # noqa: E501

        :return: The scope of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PermissionDto.

        The application scope in which the permission will be applied  # noqa: E501

        :param scope: The scope of this PermissionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Global", "Folder", "GlobalOrFolder"]  # noqa: E501
        if (self._configuration.client_side_validation and
                scope not in allowed_values):
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def id(self):
        """Gets the id of this PermissionDto.  # noqa: E501


        :return: The id of this PermissionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PermissionDto.


        :param id: The id of this PermissionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PermissionDto):
            return True

        return self.to_dict() != other.to_dict()
