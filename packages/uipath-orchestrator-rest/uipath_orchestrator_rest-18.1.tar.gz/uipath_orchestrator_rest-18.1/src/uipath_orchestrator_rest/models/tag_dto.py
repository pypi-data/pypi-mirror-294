# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TagDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'value': 'str',
        'display_value': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'display_name': 'DisplayName',
        'value': 'Value',
        'display_value': 'DisplayValue'
    }

    def __init__(self, name=None, display_name=None, value=None, display_value=None, _configuration=None):  # noqa: E501
        """TagDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._value = None
        self._display_value = None
        self.discriminator = None

        self.name = name
        if display_name is not None:
            self.display_name = display_name
        if value is not None:
            self.value = value
        if display_value is not None:
            self.display_value = display_value

    @property
    def name(self):
        """Gets the name of this TagDto.  # noqa: E501


        :return: The name of this TagDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagDto.


        :param name: The name of this TagDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 256):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this TagDto.  # noqa: E501


        :return: The display_name of this TagDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TagDto.


        :param display_name: The display_name of this TagDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                display_name is not None and len(display_name) > 256):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                display_name is not None and len(display_name) < 0):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._display_name = display_name

    @property
    def value(self):
        """Gets the value of this TagDto.  # noqa: E501


        :return: The value of this TagDto.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TagDto.


        :param value: The value of this TagDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                value is not None and len(value) > 256):
            raise ValueError("Invalid value for `value`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                value is not None and len(value) < 0):
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `0`")  # noqa: E501

        self._value = value

    @property
    def display_value(self):
        """Gets the display_value of this TagDto.  # noqa: E501


        :return: The display_value of this TagDto.  # noqa: E501
        :rtype: str
        """
        return self._display_value

    @display_value.setter
    def display_value(self, display_value):
        """Sets the display_value of this TagDto.


        :param display_value: The display_value of this TagDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                display_value is not None and len(display_value) > 256):
            raise ValueError("Invalid value for `display_value`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                display_value is not None and len(display_value) < 0):
            raise ValueError("Invalid value for `display_value`, length must be greater than or equal to `0`")  # noqa: E501

        self._display_value = display_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagDto):
            return True

        return self.to_dict() != other.to_dict()
