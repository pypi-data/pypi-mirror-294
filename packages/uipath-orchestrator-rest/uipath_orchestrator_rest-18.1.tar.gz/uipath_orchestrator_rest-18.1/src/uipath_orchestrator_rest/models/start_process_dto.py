# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class StartProcessDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'release_key': 'str',
        'strategy': 'str',
        'robot_ids': 'list[int]',
        'machine_session_ids': 'list[int]',
        'no_of_robots': 'int',
        'jobs_count': 'int',
        'source': 'str',
        'job_priority': 'str',
        'specific_priority_value': 'int',
        'runtime_type': 'str',
        'input_arguments': 'str',
        'reference': 'str',
        'machine_robots': 'list[MachineRobotDto]',
        'target_framework': 'str',
        'resume_on_same_context': 'bool',
        'batch_execution_key': 'str',
        'requires_user_interaction': 'bool',
        'stop_process_expression': 'str',
        'stop_strategy': 'str',
        'kill_process_expression': 'str',
        'remote_control_access': 'str',
        'alert_pending_expression': 'str',
        'alert_running_expression': 'str',
        'run_as_me': 'bool',
        'parent_operation_id': 'str'
    }

    attribute_map = {
        'release_key': 'ReleaseKey',
        'strategy': 'Strategy',
        'robot_ids': 'RobotIds',
        'machine_session_ids': 'MachineSessionIds',
        'no_of_robots': 'NoOfRobots',
        'jobs_count': 'JobsCount',
        'source': 'Source',
        'job_priority': 'JobPriority',
        'specific_priority_value': 'SpecificPriorityValue',
        'runtime_type': 'RuntimeType',
        'input_arguments': 'InputArguments',
        'reference': 'Reference',
        'machine_robots': 'MachineRobots',
        'target_framework': 'TargetFramework',
        'resume_on_same_context': 'ResumeOnSameContext',
        'batch_execution_key': 'BatchExecutionKey',
        'requires_user_interaction': 'RequiresUserInteraction',
        'stop_process_expression': 'StopProcessExpression',
        'stop_strategy': 'StopStrategy',
        'kill_process_expression': 'KillProcessExpression',
        'remote_control_access': 'RemoteControlAccess',
        'alert_pending_expression': 'AlertPendingExpression',
        'alert_running_expression': 'AlertRunningExpression',
        'run_as_me': 'RunAsMe',
        'parent_operation_id': 'ParentOperationId'
    }

    def __init__(self, release_key=None, strategy=None, robot_ids=None, machine_session_ids=None, no_of_robots=None, jobs_count=None, source=None, job_priority=None, specific_priority_value=None, runtime_type=None, input_arguments=None, reference=None, machine_robots=None, target_framework=None, resume_on_same_context=None, batch_execution_key=None, requires_user_interaction=None, stop_process_expression=None, stop_strategy=None, kill_process_expression=None, remote_control_access=None, alert_pending_expression=None, alert_running_expression=None, run_as_me=None, parent_operation_id=None, _configuration=None):  # noqa: E501
        """StartProcessDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._release_key = None
        self._strategy = None
        self._robot_ids = None
        self._machine_session_ids = None
        self._no_of_robots = None
        self._jobs_count = None
        self._source = None
        self._job_priority = None
        self._specific_priority_value = None
        self._runtime_type = None
        self._input_arguments = None
        self._reference = None
        self._machine_robots = None
        self._target_framework = None
        self._resume_on_same_context = None
        self._batch_execution_key = None
        self._requires_user_interaction = None
        self._stop_process_expression = None
        self._stop_strategy = None
        self._kill_process_expression = None
        self._remote_control_access = None
        self._alert_pending_expression = None
        self._alert_running_expression = None
        self._run_as_me = None
        self._parent_operation_id = None
        self.discriminator = None

        if release_key is not None:
            self.release_key = release_key
        if strategy is not None:
            self.strategy = strategy
        if robot_ids is not None:
            self.robot_ids = robot_ids
        if machine_session_ids is not None:
            self.machine_session_ids = machine_session_ids
        if no_of_robots is not None:
            self.no_of_robots = no_of_robots
        if jobs_count is not None:
            self.jobs_count = jobs_count
        if source is not None:
            self.source = source
        if job_priority is not None:
            self.job_priority = job_priority
        if specific_priority_value is not None:
            self.specific_priority_value = specific_priority_value
        if runtime_type is not None:
            self.runtime_type = runtime_type
        if input_arguments is not None:
            self.input_arguments = input_arguments
        if reference is not None:
            self.reference = reference
        if machine_robots is not None:
            self.machine_robots = machine_robots
        if target_framework is not None:
            self.target_framework = target_framework
        if resume_on_same_context is not None:
            self.resume_on_same_context = resume_on_same_context
        if batch_execution_key is not None:
            self.batch_execution_key = batch_execution_key
        if requires_user_interaction is not None:
            self.requires_user_interaction = requires_user_interaction
        if stop_process_expression is not None:
            self.stop_process_expression = stop_process_expression
        if stop_strategy is not None:
            self.stop_strategy = stop_strategy
        if kill_process_expression is not None:
            self.kill_process_expression = kill_process_expression
        if remote_control_access is not None:
            self.remote_control_access = remote_control_access
        if alert_pending_expression is not None:
            self.alert_pending_expression = alert_pending_expression
        if alert_running_expression is not None:
            self.alert_running_expression = alert_running_expression
        if run_as_me is not None:
            self.run_as_me = run_as_me
        if parent_operation_id is not None:
            self.parent_operation_id = parent_operation_id

    @property
    def release_key(self):
        """Gets the release_key of this StartProcessDto.  # noqa: E501

        The unique key of the release associated with the process.  # noqa: E501

        :return: The release_key of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._release_key

    @release_key.setter
    def release_key(self, release_key):
        """Sets the release_key of this StartProcessDto.

        The unique key of the release associated with the process.  # noqa: E501

        :param release_key: The release_key of this StartProcessDto.  # noqa: E501
        :type: str
        """

        self._release_key = release_key

    @property
    def strategy(self):
        """Gets the strategy of this StartProcessDto.  # noqa: E501

        States which robots from the environment are being run by the process.  # noqa: E501

        :return: The strategy of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this StartProcessDto.

        States which robots from the environment are being run by the process.  # noqa: E501

        :param strategy: The strategy of this StartProcessDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["All", "Specific", "RobotCount", "JobsCount", "ModernJobsCount"]  # noqa: E501
        if (self._configuration.client_side_validation and
                strategy not in allowed_values):
            raise ValueError(
                "Invalid value for `strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(strategy, allowed_values)
            )

        self._strategy = strategy

    @property
    def robot_ids(self):
        """Gets the robot_ids of this StartProcessDto.  # noqa: E501

        The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.  # noqa: E501

        :return: The robot_ids of this StartProcessDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._robot_ids

    @robot_ids.setter
    def robot_ids(self, robot_ids):
        """Sets the robot_ids of this StartProcessDto.

        The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.  # noqa: E501

        :param robot_ids: The robot_ids of this StartProcessDto.  # noqa: E501
        :type: list[int]
        """

        self._robot_ids = robot_ids

    @property
    def machine_session_ids(self):
        """Gets the machine_session_ids of this StartProcessDto.  # noqa: E501

        The machines used for running the job. If empty, the job will start on the first available machine  # noqa: E501

        :return: The machine_session_ids of this StartProcessDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._machine_session_ids

    @machine_session_ids.setter
    def machine_session_ids(self, machine_session_ids):
        """Sets the machine_session_ids of this StartProcessDto.

        The machines used for running the job. If empty, the job will start on the first available machine  # noqa: E501

        :param machine_session_ids: The machine_session_ids of this StartProcessDto.  # noqa: E501
        :type: list[int]
        """

        self._machine_session_ids = machine_session_ids

    @property
    def no_of_robots(self):
        """Gets the no_of_robots of this StartProcessDto.  # noqa: E501

        DEPRECATED. Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is RobotCount.  # noqa: E501

        :return: The no_of_robots of this StartProcessDto.  # noqa: E501
        :rtype: int
        """
        return self._no_of_robots

    @no_of_robots.setter
    def no_of_robots(self, no_of_robots):
        """Sets the no_of_robots of this StartProcessDto.

        DEPRECATED. Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is RobotCount.  # noqa: E501

        :param no_of_robots: The no_of_robots of this StartProcessDto.  # noqa: E501
        :type: int
        """

        self._no_of_robots = no_of_robots

    @property
    def jobs_count(self):
        """Gets the jobs_count of this StartProcessDto.  # noqa: E501

        Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.  # noqa: E501

        :return: The jobs_count of this StartProcessDto.  # noqa: E501
        :rtype: int
        """
        return self._jobs_count

    @jobs_count.setter
    def jobs_count(self, jobs_count):
        """Sets the jobs_count of this StartProcessDto.

        Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.  # noqa: E501

        :param jobs_count: The jobs_count of this StartProcessDto.  # noqa: E501
        :type: int
        """

        self._jobs_count = jobs_count

    @property
    def source(self):
        """Gets the source of this StartProcessDto.  # noqa: E501

        The Source of the job starting the current process.  # noqa: E501

        :return: The source of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StartProcessDto.

        The Source of the job starting the current process.  # noqa: E501

        :param source: The source of this StartProcessDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Manual", "Schedule", "Queue", "StudioWeb", "IntegrationTrigger", "StudioDesktop", "AutomationOpsPipelines", "Apps", "SAP", "HttpTrigger", "HttpTriggerWithCallback", "RobotAPI", "Assistant", "CommandLine", "RobotNetAPI"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def job_priority(self):
        """Gets the job_priority of this StartProcessDto.  # noqa: E501

        Execution priority. If null, defaults to the JobPriority of its release.  # noqa: E501

        :return: The job_priority of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._job_priority

    @job_priority.setter
    def job_priority(self, job_priority):
        """Sets the job_priority of this StartProcessDto.

        Execution priority. If null, defaults to the JobPriority of its release.  # noqa: E501

        :param job_priority: The job_priority of this StartProcessDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Low", "Normal", "High"]  # noqa: E501
        if (self._configuration.client_side_validation and
                job_priority not in allowed_values):
            raise ValueError(
                "Invalid value for `job_priority` ({0}), must be one of {1}"  # noqa: E501
                .format(job_priority, allowed_values)
            )

        self._job_priority = job_priority

    @property
    def specific_priority_value(self):
        """Gets the specific_priority_value of this StartProcessDto.  # noqa: E501

        Value for more granular control over execution priority.  # noqa: E501

        :return: The specific_priority_value of this StartProcessDto.  # noqa: E501
        :rtype: int
        """
        return self._specific_priority_value

    @specific_priority_value.setter
    def specific_priority_value(self, specific_priority_value):
        """Sets the specific_priority_value of this StartProcessDto.

        Value for more granular control over execution priority.  # noqa: E501

        :param specific_priority_value: The specific_priority_value of this StartProcessDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                specific_priority_value is not None and specific_priority_value > 100):  # noqa: E501
            raise ValueError("Invalid value for `specific_priority_value`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                specific_priority_value is not None and specific_priority_value < 1):  # noqa: E501
            raise ValueError("Invalid value for `specific_priority_value`, must be a value greater than or equal to `1`")  # noqa: E501

        self._specific_priority_value = specific_priority_value

    @property
    def runtime_type(self):
        """Gets the runtime_type of this StartProcessDto.  # noqa: E501


        :return: The runtime_type of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """Sets the runtime_type of this StartProcessDto.


        :param runtime_type: The runtime_type of this StartProcessDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NonProduction", "Attended", "Unattended", "Development", "Studio", "RpaDeveloper", "StudioX", "CitizenDeveloper", "Headless", "StudioPro", "RpaDeveloperPro", "TestAutomation", "AutomationCloud", "Serverless", "AutomationKit", "ServerlessTestAutomation", "AutomationCloudTestAutomation", "AttendedStudioWeb"]  # noqa: E501
        if (self._configuration.client_side_validation and
                runtime_type not in allowed_values):
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    @property
    def input_arguments(self):
        """Gets the input_arguments of this StartProcessDto.  # noqa: E501

        Input parameters in JSON format to be passed to job execution.  # noqa: E501

        :return: The input_arguments of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._input_arguments

    @input_arguments.setter
    def input_arguments(self, input_arguments):
        """Sets the input_arguments of this StartProcessDto.

        Input parameters in JSON format to be passed to job execution.  # noqa: E501

        :param input_arguments: The input_arguments of this StartProcessDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                input_arguments is not None and len(input_arguments) > 10000):
            raise ValueError("Invalid value for `input_arguments`, length must be less than or equal to `10000`")  # noqa: E501

        self._input_arguments = input_arguments

    @property
    def reference(self):
        """Gets the reference of this StartProcessDto.  # noqa: E501

        Optional user-specified reference for jobs  # noqa: E501

        :return: The reference of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this StartProcessDto.

        Optional user-specified reference for jobs  # noqa: E501

        :param reference: The reference of this StartProcessDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reference is not None and len(reference) > 128):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `128`")  # noqa: E501

        self._reference = reference

    @property
    def machine_robots(self):
        """Gets the machine_robots of this StartProcessDto.  # noqa: E501

        The machine-robot mappings used for running the job.  # noqa: E501

        :return: The machine_robots of this StartProcessDto.  # noqa: E501
        :rtype: list[MachineRobotDto]
        """
        return self._machine_robots

    @machine_robots.setter
    def machine_robots(self, machine_robots):
        """Sets the machine_robots of this StartProcessDto.

        The machine-robot mappings used for running the job.  # noqa: E501

        :param machine_robots: The machine_robots of this StartProcessDto.  # noqa: E501
        :type: list[MachineRobotDto]
        """

        self._machine_robots = machine_robots

    @property
    def target_framework(self):
        """Gets the target_framework of this StartProcessDto.  # noqa: E501


        :return: The target_framework of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._target_framework

    @target_framework.setter
    def target_framework(self, target_framework):
        """Sets the target_framework of this StartProcessDto.


        :param target_framework: The target_framework of this StartProcessDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Legacy", "Windows", "Portable"]  # noqa: E501
        if (self._configuration.client_side_validation and
                target_framework not in allowed_values):
            raise ValueError(
                "Invalid value for `target_framework` ({0}), must be one of {1}"  # noqa: E501
                .format(target_framework, allowed_values)
            )

        self._target_framework = target_framework

    @property
    def resume_on_same_context(self):
        """Gets the resume_on_same_context of this StartProcessDto.  # noqa: E501

        Gets or sets flag for honoring initial machine and robot choice upon resumption of created jobs, if jobs are suspended. <br />  If set, the jobs will resume on the same robot-machine pair on which they initially ran.  # noqa: E501

        :return: The resume_on_same_context of this StartProcessDto.  # noqa: E501
        :rtype: bool
        """
        return self._resume_on_same_context

    @resume_on_same_context.setter
    def resume_on_same_context(self, resume_on_same_context):
        """Sets the resume_on_same_context of this StartProcessDto.

        Gets or sets flag for honoring initial machine and robot choice upon resumption of created jobs, if jobs are suspended. <br />  If set, the jobs will resume on the same robot-machine pair on which they initially ran.  # noqa: E501

        :param resume_on_same_context: The resume_on_same_context of this StartProcessDto.  # noqa: E501
        :type: bool
        """

        self._resume_on_same_context = resume_on_same_context

    @property
    def batch_execution_key(self):
        """Gets the batch_execution_key of this StartProcessDto.  # noqa: E501

        Optional BatchExecutionKey  # noqa: E501

        :return: The batch_execution_key of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._batch_execution_key

    @batch_execution_key.setter
    def batch_execution_key(self, batch_execution_key):
        """Sets the batch_execution_key of this StartProcessDto.

        Optional BatchExecutionKey  # noqa: E501

        :param batch_execution_key: The batch_execution_key of this StartProcessDto.  # noqa: E501
        :type: str
        """

        self._batch_execution_key = batch_execution_key

    @property
    def requires_user_interaction(self):
        """Gets the requires_user_interaction of this StartProcessDto.  # noqa: E501

        Specifies if the process can run in headless mode.  # noqa: E501

        :return: The requires_user_interaction of this StartProcessDto.  # noqa: E501
        :rtype: bool
        """
        return self._requires_user_interaction

    @requires_user_interaction.setter
    def requires_user_interaction(self, requires_user_interaction):
        """Sets the requires_user_interaction of this StartProcessDto.

        Specifies if the process can run in headless mode.  # noqa: E501

        :param requires_user_interaction: The requires_user_interaction of this StartProcessDto.  # noqa: E501
        :type: bool
        """

        self._requires_user_interaction = requires_user_interaction

    @property
    def stop_process_expression(self):
        """Gets the stop_process_expression of this StartProcessDto.  # noqa: E501

        Number of seconds after which a running process will be stopped.  # noqa: E501

        :return: The stop_process_expression of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._stop_process_expression

    @stop_process_expression.setter
    def stop_process_expression(self, stop_process_expression):
        """Sets the stop_process_expression of this StartProcessDto.

        Number of seconds after which a running process will be stopped.  # noqa: E501

        :param stop_process_expression: The stop_process_expression of this StartProcessDto.  # noqa: E501
        :type: str
        """

        self._stop_process_expression = stop_process_expression

    @property
    def stop_strategy(self):
        """Gets the stop_strategy of this StartProcessDto.  # noqa: E501

        The way a running process is stopped.  # noqa: E501

        :return: The stop_strategy of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._stop_strategy

    @stop_strategy.setter
    def stop_strategy(self, stop_strategy):
        """Sets the stop_strategy of this StartProcessDto.

        The way a running process is stopped.  # noqa: E501

        :param stop_strategy: The stop_strategy of this StartProcessDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["SoftStop", "Kill"]  # noqa: E501
        if (self._configuration.client_side_validation and
                stop_strategy not in allowed_values):
            raise ValueError(
                "Invalid value for `stop_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(stop_strategy, allowed_values)
            )

        self._stop_strategy = stop_strategy

    @property
    def kill_process_expression(self):
        """Gets the kill_process_expression of this StartProcessDto.  # noqa: E501

        Grace period (in seconds) for soft stop. If a process doesn't stop after this amount, it will be killed  # noqa: E501

        :return: The kill_process_expression of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._kill_process_expression

    @kill_process_expression.setter
    def kill_process_expression(self, kill_process_expression):
        """Sets the kill_process_expression of this StartProcessDto.

        Grace period (in seconds) for soft stop. If a process doesn't stop after this amount, it will be killed  # noqa: E501

        :param kill_process_expression: The kill_process_expression of this StartProcessDto.  # noqa: E501
        :type: str
        """

        self._kill_process_expression = kill_process_expression

    @property
    def remote_control_access(self):
        """Gets the remote_control_access of this StartProcessDto.  # noqa: E501


        :return: The remote_control_access of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._remote_control_access

    @remote_control_access.setter
    def remote_control_access(self, remote_control_access):
        """Sets the remote_control_access of this StartProcessDto.


        :param remote_control_access: The remote_control_access of this StartProcessDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "ReadOnly", "Full"]  # noqa: E501
        if (self._configuration.client_side_validation and
                remote_control_access not in allowed_values):
            raise ValueError(
                "Invalid value for `remote_control_access` ({0}), must be one of {1}"  # noqa: E501
                .format(remote_control_access, allowed_values)
            )

        self._remote_control_access = remote_control_access

    @property
    def alert_pending_expression(self):
        """Gets the alert_pending_expression of this StartProcessDto.  # noqa: E501


        :return: The alert_pending_expression of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._alert_pending_expression

    @alert_pending_expression.setter
    def alert_pending_expression(self, alert_pending_expression):
        """Sets the alert_pending_expression of this StartProcessDto.


        :param alert_pending_expression: The alert_pending_expression of this StartProcessDto.  # noqa: E501
        :type: str
        """

        self._alert_pending_expression = alert_pending_expression

    @property
    def alert_running_expression(self):
        """Gets the alert_running_expression of this StartProcessDto.  # noqa: E501


        :return: The alert_running_expression of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._alert_running_expression

    @alert_running_expression.setter
    def alert_running_expression(self, alert_running_expression):
        """Sets the alert_running_expression of this StartProcessDto.


        :param alert_running_expression: The alert_running_expression of this StartProcessDto.  # noqa: E501
        :type: str
        """

        self._alert_running_expression = alert_running_expression

    @property
    def run_as_me(self):
        """Gets the run_as_me of this StartProcessDto.  # noqa: E501


        :return: The run_as_me of this StartProcessDto.  # noqa: E501
        :rtype: bool
        """
        return self._run_as_me

    @run_as_me.setter
    def run_as_me(self, run_as_me):
        """Sets the run_as_me of this StartProcessDto.


        :param run_as_me: The run_as_me of this StartProcessDto.  # noqa: E501
        :type: bool
        """

        self._run_as_me = run_as_me

    @property
    def parent_operation_id(self):
        """Gets the parent_operation_id of this StartProcessDto.  # noqa: E501

        Operation id which started the job.  # noqa: E501

        :return: The parent_operation_id of this StartProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_operation_id

    @parent_operation_id.setter
    def parent_operation_id(self, parent_operation_id):
        """Sets the parent_operation_id of this StartProcessDto.

        Operation id which started the job.  # noqa: E501

        :param parent_operation_id: The parent_operation_id of this StartProcessDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                parent_operation_id is not None and len(parent_operation_id) > 128):
            raise ValueError("Invalid value for `parent_operation_id`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                parent_operation_id is not None and len(parent_operation_id) < 0):
            raise ValueError("Invalid value for `parent_operation_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._parent_operation_id = parent_operation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StartProcessDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartProcessDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StartProcessDto):
            return True

        return self.to_dict() != other.to_dict()
