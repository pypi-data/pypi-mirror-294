# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class QueueProcessingRecordDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'queue_definition_id': 'int',
        'ui_queue_metadata': 'QueueDefinitionDto',
        'processing_time': 'datetime',
        'report_type': 'str',
        'number_of_remaining_transactions': 'int',
        'number_of_in_progress_transactions': 'int',
        'number_of_application_exceptions': 'int',
        'number_of_business_exceptions': 'int',
        'number_of_successful_transactions': 'int',
        'number_of_retried_items': 'int',
        'application_exceptions_processing_time': 'float',
        'business_exceptions_processing_time': 'float',
        'successful_transactions_processing_time': 'float',
        'total_number_of_transactions': 'int',
        'tenant_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'queue_definition_id': 'QueueDefinitionId',
        'ui_queue_metadata': 'UiQueueMetadata',
        'processing_time': 'ProcessingTime',
        'report_type': 'ReportType',
        'number_of_remaining_transactions': 'NumberOfRemainingTransactions',
        'number_of_in_progress_transactions': 'NumberOfInProgressTransactions',
        'number_of_application_exceptions': 'NumberOfApplicationExceptions',
        'number_of_business_exceptions': 'NumberOfBusinessExceptions',
        'number_of_successful_transactions': 'NumberOfSuccessfulTransactions',
        'number_of_retried_items': 'NumberOfRetriedItems',
        'application_exceptions_processing_time': 'ApplicationExceptionsProcessingTime',
        'business_exceptions_processing_time': 'BusinessExceptionsProcessingTime',
        'successful_transactions_processing_time': 'SuccessfulTransactionsProcessingTime',
        'total_number_of_transactions': 'TotalNumberOfTransactions',
        'tenant_id': 'TenantId',
        'id': 'Id'
    }

    def __init__(self, queue_definition_id=None, ui_queue_metadata=None, processing_time=None, report_type=None, number_of_remaining_transactions=None, number_of_in_progress_transactions=None, number_of_application_exceptions=None, number_of_business_exceptions=None, number_of_successful_transactions=None, number_of_retried_items=None, application_exceptions_processing_time=None, business_exceptions_processing_time=None, successful_transactions_processing_time=None, total_number_of_transactions=None, tenant_id=None, id=None, _configuration=None):  # noqa: E501
        """QueueProcessingRecordDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._queue_definition_id = None
        self._ui_queue_metadata = None
        self._processing_time = None
        self._report_type = None
        self._number_of_remaining_transactions = None
        self._number_of_in_progress_transactions = None
        self._number_of_application_exceptions = None
        self._number_of_business_exceptions = None
        self._number_of_successful_transactions = None
        self._number_of_retried_items = None
        self._application_exceptions_processing_time = None
        self._business_exceptions_processing_time = None
        self._successful_transactions_processing_time = None
        self._total_number_of_transactions = None
        self._tenant_id = None
        self._id = None
        self.discriminator = None

        if queue_definition_id is not None:
            self.queue_definition_id = queue_definition_id
        if ui_queue_metadata is not None:
            self.ui_queue_metadata = ui_queue_metadata
        if processing_time is not None:
            self.processing_time = processing_time
        if report_type is not None:
            self.report_type = report_type
        if number_of_remaining_transactions is not None:
            self.number_of_remaining_transactions = number_of_remaining_transactions
        if number_of_in_progress_transactions is not None:
            self.number_of_in_progress_transactions = number_of_in_progress_transactions
        if number_of_application_exceptions is not None:
            self.number_of_application_exceptions = number_of_application_exceptions
        if number_of_business_exceptions is not None:
            self.number_of_business_exceptions = number_of_business_exceptions
        if number_of_successful_transactions is not None:
            self.number_of_successful_transactions = number_of_successful_transactions
        if number_of_retried_items is not None:
            self.number_of_retried_items = number_of_retried_items
        if application_exceptions_processing_time is not None:
            self.application_exceptions_processing_time = application_exceptions_processing_time
        if business_exceptions_processing_time is not None:
            self.business_exceptions_processing_time = business_exceptions_processing_time
        if successful_transactions_processing_time is not None:
            self.successful_transactions_processing_time = successful_transactions_processing_time
        if total_number_of_transactions is not None:
            self.total_number_of_transactions = total_number_of_transactions
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if id is not None:
            self.id = id

    @property
    def queue_definition_id(self):
        """Gets the queue_definition_id of this QueueProcessingRecordDto.  # noqa: E501

        The Id of the queue for which the report is done.  # noqa: E501

        :return: The queue_definition_id of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._queue_definition_id

    @queue_definition_id.setter
    def queue_definition_id(self, queue_definition_id):
        """Sets the queue_definition_id of this QueueProcessingRecordDto.

        The Id of the queue for which the report is done.  # noqa: E501

        :param queue_definition_id: The queue_definition_id of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._queue_definition_id = queue_definition_id

    @property
    def ui_queue_metadata(self):
        """Gets the ui_queue_metadata of this QueueProcessingRecordDto.  # noqa: E501


        :return: The ui_queue_metadata of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: QueueDefinitionDto
        """
        return self._ui_queue_metadata

    @ui_queue_metadata.setter
    def ui_queue_metadata(self, ui_queue_metadata):
        """Sets the ui_queue_metadata of this QueueProcessingRecordDto.


        :param ui_queue_metadata: The ui_queue_metadata of this QueueProcessingRecordDto.  # noqa: E501
        :type: QueueDefinitionDto
        """

        self._ui_queue_metadata = ui_queue_metadata

    @property
    def processing_time(self):
        """Gets the processing_time of this QueueProcessingRecordDto.  # noqa: E501

        The date and time when the report is computed.  # noqa: E501

        :return: The processing_time of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: datetime
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this QueueProcessingRecordDto.

        The date and time when the report is computed.  # noqa: E501

        :param processing_time: The processing_time of this QueueProcessingRecordDto.  # noqa: E501
        :type: datetime
        """

        self._processing_time = processing_time

    @property
    def report_type(self):
        """Gets the report_type of this QueueProcessingRecordDto.  # noqa: E501

        The aggregation period used in the report.  # noqa: E501

        :return: The report_type of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this QueueProcessingRecordDto.

        The aggregation period used in the report.  # noqa: E501

        :param report_type: The report_type of this QueueProcessingRecordDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["All", "Minute", "Hour", "Day"]  # noqa: E501
        if (self._configuration.client_side_validation and
                report_type not in allowed_values):
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"  # noqa: E501
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    @property
    def number_of_remaining_transactions(self):
        """Gets the number_of_remaining_transactions of this QueueProcessingRecordDto.  # noqa: E501

        The number of unprocessed (new) items.  # noqa: E501

        :return: The number_of_remaining_transactions of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._number_of_remaining_transactions

    @number_of_remaining_transactions.setter
    def number_of_remaining_transactions(self, number_of_remaining_transactions):
        """Sets the number_of_remaining_transactions of this QueueProcessingRecordDto.

        The number of unprocessed (new) items.  # noqa: E501

        :param number_of_remaining_transactions: The number_of_remaining_transactions of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._number_of_remaining_transactions = number_of_remaining_transactions

    @property
    def number_of_in_progress_transactions(self):
        """Gets the number_of_in_progress_transactions of this QueueProcessingRecordDto.  # noqa: E501

        The number of items in progress.  # noqa: E501

        :return: The number_of_in_progress_transactions of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._number_of_in_progress_transactions

    @number_of_in_progress_transactions.setter
    def number_of_in_progress_transactions(self, number_of_in_progress_transactions):
        """Sets the number_of_in_progress_transactions of this QueueProcessingRecordDto.

        The number of items in progress.  # noqa: E501

        :param number_of_in_progress_transactions: The number_of_in_progress_transactions of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._number_of_in_progress_transactions = number_of_in_progress_transactions

    @property
    def number_of_application_exceptions(self):
        """Gets the number_of_application_exceptions of this QueueProcessingRecordDto.  # noqa: E501

        The total number of application exceptions thrown while processing queue items in the given time period.  # noqa: E501

        :return: The number_of_application_exceptions of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._number_of_application_exceptions

    @number_of_application_exceptions.setter
    def number_of_application_exceptions(self, number_of_application_exceptions):
        """Sets the number_of_application_exceptions of this QueueProcessingRecordDto.

        The total number of application exceptions thrown while processing queue items in the given time period.  # noqa: E501

        :param number_of_application_exceptions: The number_of_application_exceptions of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._number_of_application_exceptions = number_of_application_exceptions

    @property
    def number_of_business_exceptions(self):
        """Gets the number_of_business_exceptions of this QueueProcessingRecordDto.  # noqa: E501

        The total number of business exceptions thrown while processing queue items in the given time period.  # noqa: E501

        :return: The number_of_business_exceptions of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._number_of_business_exceptions

    @number_of_business_exceptions.setter
    def number_of_business_exceptions(self, number_of_business_exceptions):
        """Sets the number_of_business_exceptions of this QueueProcessingRecordDto.

        The total number of business exceptions thrown while processing queue items in the given time period.  # noqa: E501

        :param number_of_business_exceptions: The number_of_business_exceptions of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._number_of_business_exceptions = number_of_business_exceptions

    @property
    def number_of_successful_transactions(self):
        """Gets the number_of_successful_transactions of this QueueProcessingRecordDto.  # noqa: E501

        The total number of successfully processed queue items in the given time period.  # noqa: E501

        :return: The number_of_successful_transactions of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._number_of_successful_transactions

    @number_of_successful_transactions.setter
    def number_of_successful_transactions(self, number_of_successful_transactions):
        """Sets the number_of_successful_transactions of this QueueProcessingRecordDto.

        The total number of successfully processed queue items in the given time period.  # noqa: E501

        :param number_of_successful_transactions: The number_of_successful_transactions of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._number_of_successful_transactions = number_of_successful_transactions

    @property
    def number_of_retried_items(self):
        """Gets the number_of_retried_items of this QueueProcessingRecordDto.  # noqa: E501

        The total number of processing retries occurred in the given time period.  # noqa: E501

        :return: The number_of_retried_items of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._number_of_retried_items

    @number_of_retried_items.setter
    def number_of_retried_items(self, number_of_retried_items):
        """Sets the number_of_retried_items of this QueueProcessingRecordDto.

        The total number of processing retries occurred in the given time period.  # noqa: E501

        :param number_of_retried_items: The number_of_retried_items of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._number_of_retried_items = number_of_retried_items

    @property
    def application_exceptions_processing_time(self):
        """Gets the application_exceptions_processing_time of this QueueProcessingRecordDto.  # noqa: E501

        The total number of seconds spent processing queue items that failed with application exception in the given time period.  # noqa: E501

        :return: The application_exceptions_processing_time of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: float
        """
        return self._application_exceptions_processing_time

    @application_exceptions_processing_time.setter
    def application_exceptions_processing_time(self, application_exceptions_processing_time):
        """Sets the application_exceptions_processing_time of this QueueProcessingRecordDto.

        The total number of seconds spent processing queue items that failed with application exception in the given time period.  # noqa: E501

        :param application_exceptions_processing_time: The application_exceptions_processing_time of this QueueProcessingRecordDto.  # noqa: E501
        :type: float
        """

        self._application_exceptions_processing_time = application_exceptions_processing_time

    @property
    def business_exceptions_processing_time(self):
        """Gets the business_exceptions_processing_time of this QueueProcessingRecordDto.  # noqa: E501

        The total number of seconds spent processing queue items that failed with business exception in the given time period.  # noqa: E501

        :return: The business_exceptions_processing_time of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: float
        """
        return self._business_exceptions_processing_time

    @business_exceptions_processing_time.setter
    def business_exceptions_processing_time(self, business_exceptions_processing_time):
        """Sets the business_exceptions_processing_time of this QueueProcessingRecordDto.

        The total number of seconds spent processing queue items that failed with business exception in the given time period.  # noqa: E501

        :param business_exceptions_processing_time: The business_exceptions_processing_time of this QueueProcessingRecordDto.  # noqa: E501
        :type: float
        """

        self._business_exceptions_processing_time = business_exceptions_processing_time

    @property
    def successful_transactions_processing_time(self):
        """Gets the successful_transactions_processing_time of this QueueProcessingRecordDto.  # noqa: E501

        The total number of seconds spent processing successful queue items in the given time period.  # noqa: E501

        :return: The successful_transactions_processing_time of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: float
        """
        return self._successful_transactions_processing_time

    @successful_transactions_processing_time.setter
    def successful_transactions_processing_time(self, successful_transactions_processing_time):
        """Sets the successful_transactions_processing_time of this QueueProcessingRecordDto.

        The total number of seconds spent processing successful queue items in the given time period.  # noqa: E501

        :param successful_transactions_processing_time: The successful_transactions_processing_time of this QueueProcessingRecordDto.  # noqa: E501
        :type: float
        """

        self._successful_transactions_processing_time = successful_transactions_processing_time

    @property
    def total_number_of_transactions(self):
        """Gets the total_number_of_transactions of this QueueProcessingRecordDto.  # noqa: E501

        The total number of item processing transactions, both failed and successful.  # noqa: E501

        :return: The total_number_of_transactions of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._total_number_of_transactions

    @total_number_of_transactions.setter
    def total_number_of_transactions(self, total_number_of_transactions):
        """Sets the total_number_of_transactions of this QueueProcessingRecordDto.

        The total number of item processing transactions, both failed and successful.  # noqa: E501

        :param total_number_of_transactions: The total_number_of_transactions of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._total_number_of_transactions = total_number_of_transactions

    @property
    def tenant_id(self):
        """Gets the tenant_id of this QueueProcessingRecordDto.  # noqa: E501

        The Id of the queue tenant.  # noqa: E501

        :return: The tenant_id of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this QueueProcessingRecordDto.

        The Id of the queue tenant.  # noqa: E501

        :param tenant_id: The tenant_id of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._tenant_id = tenant_id

    @property
    def id(self):
        """Gets the id of this QueueProcessingRecordDto.  # noqa: E501


        :return: The id of this QueueProcessingRecordDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueueProcessingRecordDto.


        :param id: The id of this QueueProcessingRecordDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueProcessingRecordDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueProcessingRecordDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueProcessingRecordDto):
            return True

        return self.to_dict() != other.to_dict()
