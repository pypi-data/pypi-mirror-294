# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class JobTriggerDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'int',
        'trigger_type': 'str',
        'status': 'str',
        'item_id': 'int',
        'timer': 'datetime',
        'trigger_message': 'str',
        'inbox_id': 'str',
        'id': 'int'
    }

    attribute_map = {
        'job_id': 'JobId',
        'trigger_type': 'TriggerType',
        'status': 'Status',
        'item_id': 'ItemId',
        'timer': 'Timer',
        'trigger_message': 'TriggerMessage',
        'inbox_id': 'InboxId',
        'id': 'Id'
    }

    def __init__(self, job_id=None, trigger_type=None, status=None, item_id=None, timer=None, trigger_message=None, inbox_id=None, id=None, _configuration=None):  # noqa: E501
        """JobTriggerDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._job_id = None
        self._trigger_type = None
        self._status = None
        self._item_id = None
        self._timer = None
        self._trigger_message = None
        self._inbox_id = None
        self._id = None
        self.discriminator = None

        if job_id is not None:
            self.job_id = job_id
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if status is not None:
            self.status = status
        if item_id is not None:
            self.item_id = item_id
        if timer is not None:
            self.timer = timer
        if trigger_message is not None:
            self.trigger_message = trigger_message
        if inbox_id is not None:
            self.inbox_id = inbox_id
        if id is not None:
            self.id = id

    @property
    def job_id(self):
        """Gets the job_id of this JobTriggerDto.  # noqa: E501


        :return: The job_id of this JobTriggerDto.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobTriggerDto.


        :param job_id: The job_id of this JobTriggerDto.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def trigger_type(self):
        """Gets the trigger_type of this JobTriggerDto.  # noqa: E501

        Resume type (job, queue, task etc)  # noqa: E501

        :return: The trigger_type of this JobTriggerDto.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this JobTriggerDto.

        Resume type (job, queue, task etc)  # noqa: E501

        :param trigger_type: The trigger_type of this JobTriggerDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "QueueItem", "Job", "Task", "Timer", "Inbox"]  # noqa: E501
        if (self._configuration.client_side_validation and
                trigger_type not in allowed_values):
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def status(self):
        """Gets the status of this JobTriggerDto.  # noqa: E501

        Job trigger status (new, ready, fired etc)  # noqa: E501

        :return: The status of this JobTriggerDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobTriggerDto.

        Job trigger status (new, ready, fired etc)  # noqa: E501

        :param status: The status of this JobTriggerDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["New", "Ready", "Fired"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def item_id(self):
        """Gets the item_id of this JobTriggerDto.  # noqa: E501

        item Id (queue item id, task id, job id etc)  # noqa: E501

        :return: The item_id of this JobTriggerDto.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this JobTriggerDto.

        item Id (queue item id, task id, job id etc)  # noqa: E501

        :param item_id: The item_id of this JobTriggerDto.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def timer(self):
        """Gets the timer of this JobTriggerDto.  # noqa: E501

        Resume timer (for time trigger)  # noqa: E501

        :return: The timer of this JobTriggerDto.  # noqa: E501
        :rtype: datetime
        """
        return self._timer

    @timer.setter
    def timer(self, timer):
        """Sets the timer of this JobTriggerDto.

        Resume timer (for time trigger)  # noqa: E501

        :param timer: The timer of this JobTriggerDto.  # noqa: E501
        :type: datetime
        """

        self._timer = timer

    @property
    def trigger_message(self):
        """Gets the trigger_message of this JobTriggerDto.  # noqa: E501

        Workflow provided resume trigger description/message  # noqa: E501

        :return: The trigger_message of this JobTriggerDto.  # noqa: E501
        :rtype: str
        """
        return self._trigger_message

    @trigger_message.setter
    def trigger_message(self, trigger_message):
        """Sets the trigger_message of this JobTriggerDto.

        Workflow provided resume trigger description/message  # noqa: E501

        :param trigger_message: The trigger_message of this JobTriggerDto.  # noqa: E501
        :type: str
        """

        self._trigger_message = trigger_message

    @property
    def inbox_id(self):
        """Gets the inbox_id of this JobTriggerDto.  # noqa: E501


        :return: The inbox_id of this JobTriggerDto.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this JobTriggerDto.


        :param inbox_id: The inbox_id of this JobTriggerDto.  # noqa: E501
        :type: str
        """

        self._inbox_id = inbox_id

    @property
    def id(self):
        """Gets the id of this JobTriggerDto.  # noqa: E501


        :return: The id of this JobTriggerDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobTriggerDto.


        :param id: The id of this JobTriggerDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobTriggerDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobTriggerDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobTriggerDto):
            return True

        return self.to_dict() != other.to_dict()
