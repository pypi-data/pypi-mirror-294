# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class MachinesFolderAssociationsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder_id': 'int',
        'added_machine_ids': 'list[int]',
        'removed_machine_ids': 'list[int]'
    }

    attribute_map = {
        'folder_id': 'FolderId',
        'added_machine_ids': 'AddedMachineIds',
        'removed_machine_ids': 'RemovedMachineIds'
    }

    def __init__(self, folder_id=None, added_machine_ids=None, removed_machine_ids=None, _configuration=None):  # noqa: E501
        """MachinesFolderAssociationsDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._folder_id = None
        self._added_machine_ids = None
        self._removed_machine_ids = None
        self.discriminator = None

        if folder_id is not None:
            self.folder_id = folder_id
        if added_machine_ids is not None:
            self.added_machine_ids = added_machine_ids
        if removed_machine_ids is not None:
            self.removed_machine_ids = removed_machine_ids

    @property
    def folder_id(self):
        """Gets the folder_id of this MachinesFolderAssociationsDto.  # noqa: E501


        :return: The folder_id of this MachinesFolderAssociationsDto.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this MachinesFolderAssociationsDto.


        :param folder_id: The folder_id of this MachinesFolderAssociationsDto.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def added_machine_ids(self):
        """Gets the added_machine_ids of this MachinesFolderAssociationsDto.  # noqa: E501


        :return: The added_machine_ids of this MachinesFolderAssociationsDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._added_machine_ids

    @added_machine_ids.setter
    def added_machine_ids(self, added_machine_ids):
        """Sets the added_machine_ids of this MachinesFolderAssociationsDto.


        :param added_machine_ids: The added_machine_ids of this MachinesFolderAssociationsDto.  # noqa: E501
        :type: list[int]
        """

        self._added_machine_ids = added_machine_ids

    @property
    def removed_machine_ids(self):
        """Gets the removed_machine_ids of this MachinesFolderAssociationsDto.  # noqa: E501


        :return: The removed_machine_ids of this MachinesFolderAssociationsDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._removed_machine_ids

    @removed_machine_ids.setter
    def removed_machine_ids(self, removed_machine_ids):
        """Sets the removed_machine_ids of this MachinesFolderAssociationsDto.


        :param removed_machine_ids: The removed_machine_ids of this MachinesFolderAssociationsDto.  # noqa: E501
        :type: list[int]
        """

        self._removed_machine_ids = removed_machine_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachinesFolderAssociationsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachinesFolderAssociationsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MachinesFolderAssociationsDto):
            return True

        return self.to_dict() != other.to_dict()
