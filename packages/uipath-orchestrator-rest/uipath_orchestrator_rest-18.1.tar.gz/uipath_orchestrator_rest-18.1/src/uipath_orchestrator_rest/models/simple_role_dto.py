# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class SimpleRoleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'origin': 'str',
        'role_type': 'str',
        'inherited_from_folder': 'SimpleFolderDto',
        'name': 'str',
        'id': 'int'
    }

    attribute_map = {
        'origin': 'Origin',
        'role_type': 'RoleType',
        'inherited_from_folder': 'InheritedFromFolder',
        'name': 'Name',
        'id': 'Id'
    }

    def __init__(self, origin=None, role_type=None, inherited_from_folder=None, name=None, id=None, _configuration=None):  # noqa: E501
        """SimpleRoleDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._origin = None
        self._role_type = None
        self._inherited_from_folder = None
        self._name = None
        self._id = None
        self.discriminator = None

        if origin is not None:
            self.origin = origin
        if role_type is not None:
            self.role_type = role_type
        if inherited_from_folder is not None:
            self.inherited_from_folder = inherited_from_folder
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id

    @property
    def origin(self):
        """Gets the origin of this SimpleRoleDto.  # noqa: E501


        :return: The origin of this SimpleRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SimpleRoleDto.


        :param origin: The origin of this SimpleRoleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Assigned", "Inherited"]  # noqa: E501
        if (self._configuration.client_side_validation and
                origin not in allowed_values):
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"  # noqa: E501
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def role_type(self):
        """Gets the role_type of this SimpleRoleDto.  # noqa: E501


        :return: The role_type of this SimpleRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this SimpleRoleDto.


        :param role_type: The role_type of this SimpleRoleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Mixed", "Tenant", "Folder"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role_type not in allowed_values):
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"  # noqa: E501
                .format(role_type, allowed_values)
            )

        self._role_type = role_type

    @property
    def inherited_from_folder(self):
        """Gets the inherited_from_folder of this SimpleRoleDto.  # noqa: E501


        :return: The inherited_from_folder of this SimpleRoleDto.  # noqa: E501
        :rtype: SimpleFolderDto
        """
        return self._inherited_from_folder

    @inherited_from_folder.setter
    def inherited_from_folder(self, inherited_from_folder):
        """Sets the inherited_from_folder of this SimpleRoleDto.


        :param inherited_from_folder: The inherited_from_folder of this SimpleRoleDto.  # noqa: E501
        :type: SimpleFolderDto
        """

        self._inherited_from_folder = inherited_from_folder

    @property
    def name(self):
        """Gets the name of this SimpleRoleDto.  # noqa: E501


        :return: The name of this SimpleRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimpleRoleDto.


        :param name: The name of this SimpleRoleDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this SimpleRoleDto.  # noqa: E501


        :return: The id of this SimpleRoleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimpleRoleDto.


        :param id: The id of this SimpleRoleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleRoleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleRoleDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimpleRoleDto):
            return True

        return self.to_dict() != other.to_dict()
