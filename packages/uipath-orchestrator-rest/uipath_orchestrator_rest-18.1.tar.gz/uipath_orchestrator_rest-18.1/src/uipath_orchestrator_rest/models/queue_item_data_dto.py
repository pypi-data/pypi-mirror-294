# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class QueueItemDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'priority': 'str',
        'specific_content': 'dict(str, object)',
        'defer_date': 'datetime',
        'due_date': 'datetime',
        'risk_sla_date': 'datetime',
        'reference': 'str',
        'progress': 'str',
        'source': 'str',
        'parent_operation_id': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'priority': 'Priority',
        'specific_content': 'SpecificContent',
        'defer_date': 'DeferDate',
        'due_date': 'DueDate',
        'risk_sla_date': 'RiskSlaDate',
        'reference': 'Reference',
        'progress': 'Progress',
        'source': 'Source',
        'parent_operation_id': 'ParentOperationId'
    }

    def __init__(self, name=None, priority=None, specific_content=None, defer_date=None, due_date=None, risk_sla_date=None, reference=None, progress=None, source=None, parent_operation_id=None, _configuration=None):  # noqa: E501
        """QueueItemDataDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._priority = None
        self._specific_content = None
        self._defer_date = None
        self._due_date = None
        self._risk_sla_date = None
        self._reference = None
        self._progress = None
        self._source = None
        self._parent_operation_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if specific_content is not None:
            self.specific_content = specific_content
        if defer_date is not None:
            self.defer_date = defer_date
        if due_date is not None:
            self.due_date = due_date
        if risk_sla_date is not None:
            self.risk_sla_date = risk_sla_date
        if reference is not None:
            self.reference = reference
        if progress is not None:
            self.progress = progress
        if source is not None:
            self.source = source
        if parent_operation_id is not None:
            self.parent_operation_id = parent_operation_id

    @property
    def name(self):
        """Gets the name of this QueueItemDataDto.  # noqa: E501

        The name of the queue into which the item will be added.  # noqa: E501

        :return: The name of this QueueItemDataDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QueueItemDataDto.

        The name of the queue into which the item will be added.  # noqa: E501

        :param name: The name of this QueueItemDataDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this QueueItemDataDto.  # noqa: E501

        Sets the processing importance for a given item.  # noqa: E501

        :return: The priority of this QueueItemDataDto.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this QueueItemDataDto.

        Sets the processing importance for a given item.  # noqa: E501

        :param priority: The priority of this QueueItemDataDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["High", "Normal", "Low"]  # noqa: E501
        if (self._configuration.client_side_validation and
                priority not in allowed_values):
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def specific_content(self):
        """Gets the specific_content of this QueueItemDataDto.  # noqa: E501

        A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.  # noqa: E501

        :return: The specific_content of this QueueItemDataDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._specific_content

    @specific_content.setter
    def specific_content(self, specific_content):
        """Sets the specific_content of this QueueItemDataDto.

        A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.  # noqa: E501

        :param specific_content: The specific_content of this QueueItemDataDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._specific_content = specific_content

    @property
    def defer_date(self):
        """Gets the defer_date of this QueueItemDataDto.  # noqa: E501

        The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.  # noqa: E501

        :return: The defer_date of this QueueItemDataDto.  # noqa: E501
        :rtype: datetime
        """
        return self._defer_date

    @defer_date.setter
    def defer_date(self, defer_date):
        """Sets the defer_date of this QueueItemDataDto.

        The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.  # noqa: E501

        :param defer_date: The defer_date of this QueueItemDataDto.  # noqa: E501
        :type: datetime
        """

        self._defer_date = defer_date

    @property
    def due_date(self):
        """Gets the due_date of this QueueItemDataDto.  # noqa: E501

        The latest date and time at which the item should be processed. If empty the item can be processed at any given time.  # noqa: E501

        :return: The due_date of this QueueItemDataDto.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this QueueItemDataDto.

        The latest date and time at which the item should be processed. If empty the item can be processed at any given time.  # noqa: E501

        :param due_date: The due_date of this QueueItemDataDto.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def risk_sla_date(self):
        """Gets the risk_sla_date of this QueueItemDataDto.  # noqa: E501

        The RiskSla date at time which is considered as risk zone for the item to be processed.  # noqa: E501

        :return: The risk_sla_date of this QueueItemDataDto.  # noqa: E501
        :rtype: datetime
        """
        return self._risk_sla_date

    @risk_sla_date.setter
    def risk_sla_date(self, risk_sla_date):
        """Sets the risk_sla_date of this QueueItemDataDto.

        The RiskSla date at time which is considered as risk zone for the item to be processed.  # noqa: E501

        :param risk_sla_date: The risk_sla_date of this QueueItemDataDto.  # noqa: E501
        :type: datetime
        """

        self._risk_sla_date = risk_sla_date

    @property
    def reference(self):
        """Gets the reference of this QueueItemDataDto.  # noqa: E501

        An optional, user-specified value for queue item identification.  # noqa: E501

        :return: The reference of this QueueItemDataDto.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this QueueItemDataDto.

        An optional, user-specified value for queue item identification.  # noqa: E501

        :param reference: The reference of this QueueItemDataDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reference is not None and len(reference) > 128):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                reference is not None and len(reference) < 0):
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `0`")  # noqa: E501

        self._reference = reference

    @property
    def progress(self):
        """Gets the progress of this QueueItemDataDto.  # noqa: E501

        String field which is used to keep track of the business flow progress.  # noqa: E501

        :return: The progress of this QueueItemDataDto.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this QueueItemDataDto.

        String field which is used to keep track of the business flow progress.  # noqa: E501

        :param progress: The progress of this QueueItemDataDto.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def source(self):
        """Gets the source of this QueueItemDataDto.  # noqa: E501

        The Source type of the item.  # noqa: E501

        :return: The source of this QueueItemDataDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this QueueItemDataDto.

        The Source type of the item.  # noqa: E501

        :param source: The source of this QueueItemDataDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source is not None and len(source) > 20):
            raise ValueError("Invalid value for `source`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source is not None and len(source) < 0):
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source is not None and not re.search(r'Manual|Apps', source)):  # noqa: E501
            raise ValueError(r"Invalid value for `source`, must be a follow pattern or equal to `/Manual|Apps/`")  # noqa: E501

        self._source = source

    @property
    def parent_operation_id(self):
        """Gets the parent_operation_id of this QueueItemDataDto.  # noqa: E501

        Operation id which started the job.  # noqa: E501

        :return: The parent_operation_id of this QueueItemDataDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_operation_id

    @parent_operation_id.setter
    def parent_operation_id(self, parent_operation_id):
        """Sets the parent_operation_id of this QueueItemDataDto.

        Operation id which started the job.  # noqa: E501

        :param parent_operation_id: The parent_operation_id of this QueueItemDataDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                parent_operation_id is not None and len(parent_operation_id) > 128):
            raise ValueError("Invalid value for `parent_operation_id`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                parent_operation_id is not None and len(parent_operation_id) < 0):
            raise ValueError("Invalid value for `parent_operation_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._parent_operation_id = parent_operation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueItemDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueItemDataDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueItemDataDto):
            return True

        return self.to_dict() != other.to_dict()
