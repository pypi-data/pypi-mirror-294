# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class BucketDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'identifier': 'str',
        'storage_provider': 'str',
        'storage_parameters': 'str',
        'storage_container': 'str',
        'options': 'str',
        'credential_store_id': 'int',
        'external_name': 'str',
        'password': 'str',
        'folders_count': 'int',
        'tags': 'list[TagDto]',
        'id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'description': 'Description',
        'identifier': 'Identifier',
        'storage_provider': 'StorageProvider',
        'storage_parameters': 'StorageParameters',
        'storage_container': 'StorageContainer',
        'options': 'Options',
        'credential_store_id': 'CredentialStoreId',
        'external_name': 'ExternalName',
        'password': 'Password',
        'folders_count': 'FoldersCount',
        'tags': 'Tags',
        'id': 'Id'
    }

    def __init__(self, name=None, description=None, identifier=None, storage_provider=None, storage_parameters=None, storage_container=None, options=None, credential_store_id=None, external_name=None, password=None, folders_count=None, tags=None, id=None, _configuration=None):  # noqa: E501
        """BucketDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._identifier = None
        self._storage_provider = None
        self._storage_parameters = None
        self._storage_container = None
        self._options = None
        self._credential_store_id = None
        self._external_name = None
        self._password = None
        self._folders_count = None
        self._tags = None
        self._id = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.identifier = identifier
        if storage_provider is not None:
            self.storage_provider = storage_provider
        if storage_parameters is not None:
            self.storage_parameters = storage_parameters
        if storage_container is not None:
            self.storage_container = storage_container
        if options is not None:
            self.options = options
        if credential_store_id is not None:
            self.credential_store_id = credential_store_id
        if external_name is not None:
            self.external_name = external_name
        if password is not None:
            self.password = password
        if folders_count is not None:
            self.folders_count = folders_count
        if tags is not None:
            self.tags = tags
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this BucketDto.  # noqa: E501

        Display name of the Bucket  # noqa: E501

        :return: The name of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BucketDto.

        Display name of the Bucket  # noqa: E501

        :param name: The name of this BucketDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this BucketDto.  # noqa: E501

        Description of the Bucket  # noqa: E501

        :return: The description of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BucketDto.

        Description of the Bucket  # noqa: E501

        :param description: The description of this BucketDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 512):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def identifier(self):
        """Gets the identifier of this BucketDto.  # noqa: E501

        A stable unique identifier  # noqa: E501

        :return: The identifier of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this BucketDto.

        A stable unique identifier  # noqa: E501

        :param identifier: The identifier of this BucketDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def storage_provider(self):
        """Gets the storage_provider of this BucketDto.  # noqa: E501

        Provider Name.  Otherwise one of the supported providers:  - FileSystem  - Azure  - Amazon  - Minio  - S3Compatible  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :return: The storage_provider of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._storage_provider

    @storage_provider.setter
    def storage_provider(self, storage_provider):
        """Sets the storage_provider of this BucketDto.

        Provider Name.  Otherwise one of the supported providers:  - FileSystem  - Azure  - Amazon  - Minio  - S3Compatible  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :param storage_provider: The storage_provider of this BucketDto.  # noqa: E501
        :type: str
        """

        self._storage_provider = storage_provider

    @property
    def storage_parameters(self):
        """Gets the storage_parameters of this BucketDto.  # noqa: E501

        Provider specific initialization parameters.  Use a $Password for where the password should be inserted.  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :return: The storage_parameters of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._storage_parameters

    @storage_parameters.setter
    def storage_parameters(self, storage_parameters):
        """Sets the storage_parameters of this BucketDto.

        Provider specific initialization parameters.  Use a $Password for where the password should be inserted.  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :param storage_parameters: The storage_parameters of this BucketDto.  # noqa: E501
        :type: str
        """

        self._storage_parameters = storage_parameters

    @property
    def storage_container(self):
        """Gets the storage_container of this BucketDto.  # noqa: E501

        Provider specific Container name (AWS, WASB).  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :return: The storage_container of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._storage_container

    @storage_container.setter
    def storage_container(self, storage_container):
        """Sets the storage_container of this BucketDto.

        Provider specific Container name (AWS, WASB).  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :param storage_container: The storage_container of this BucketDto.  # noqa: E501
        :type: str
        """

        self._storage_container = storage_container

    @property
    def options(self):
        """Gets the options of this BucketDto.  # noqa: E501

        Bucket options  # noqa: E501

        :return: The options of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this BucketDto.

        Bucket options  # noqa: E501

        :param options: The options of this BucketDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "ReadOnly", "AuditReadAccess", "AccessDataThroughOrchestrator"]  # noqa: E501
        if (self._configuration.client_side_validation and
                options not in allowed_values):
            raise ValueError(
                "Invalid value for `options` ({0}), must be one of {1}"  # noqa: E501
                .format(options, allowed_values)
            )

        self._options = options

    @property
    def credential_store_id(self):
        """Gets the credential_store_id of this BucketDto.  # noqa: E501

        Credential store used to keep the provider access password.  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :return: The credential_store_id of this BucketDto.  # noqa: E501
        :rtype: int
        """
        return self._credential_store_id

    @credential_store_id.setter
    def credential_store_id(self, credential_store_id):
        """Sets the credential_store_id of this BucketDto.

        Credential store used to keep the provider access password.  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :param credential_store_id: The credential_store_id of this BucketDto.  # noqa: E501
        :type: int
        """

        self._credential_store_id = credential_store_id

    @property
    def external_name(self):
        """Gets the external_name of this BucketDto.  # noqa: E501

        The external name of the password in the credential store.  If null, it defaults to the bucket name.  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :return: The external_name of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._external_name

    @external_name.setter
    def external_name(self, external_name):
        """Sets the external_name of this BucketDto.

        The external name of the password in the credential store.  If null, it defaults to the bucket name.  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :param external_name: The external_name of this BucketDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                external_name is not None and len(external_name) > 450):
            raise ValueError("Invalid value for `external_name`, length must be less than or equal to `450`")  # noqa: E501
        if (self._configuration.client_side_validation and
                external_name is not None and len(external_name) < 0):
            raise ValueError("Invalid value for `external_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._external_name = external_name

    @property
    def password(self):
        """Gets the password of this BucketDto.  # noqa: E501

        Provider specific password/secret.  It is inserted as a replacement of the $Password token in the StorageParameters.  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :return: The password of this BucketDto.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BucketDto.

        Provider specific password/secret.  It is inserted as a replacement of the $Password token in the StorageParameters.  Leave null for built-in Orchestrator host provider.  # noqa: E501

        :param password: The password of this BucketDto.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def folders_count(self):
        """Gets the folders_count of this BucketDto.  # noqa: E501

        Number of folders where the bucket is shared.  # noqa: E501

        :return: The folders_count of this BucketDto.  # noqa: E501
        :rtype: int
        """
        return self._folders_count

    @folders_count.setter
    def folders_count(self, folders_count):
        """Sets the folders_count of this BucketDto.

        Number of folders where the bucket is shared.  # noqa: E501

        :param folders_count: The folders_count of this BucketDto.  # noqa: E501
        :type: int
        """

        self._folders_count = folders_count

    @property
    def tags(self):
        """Gets the tags of this BucketDto.  # noqa: E501


        :return: The tags of this BucketDto.  # noqa: E501
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BucketDto.


        :param tags: The tags of this BucketDto.  # noqa: E501
        :type: list[TagDto]
        """

        self._tags = tags

    @property
    def id(self):
        """Gets the id of this BucketDto.  # noqa: E501


        :return: The id of this BucketDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BucketDto.


        :param id: The id of this BucketDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BucketDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BucketDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BucketDto):
            return True

        return self.to_dict() != other.to_dict()
