# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class LicenseNamedUserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'user_name': 'str',
        'last_login_date': 'datetime',
        'machines_count': 'int',
        'is_licensed': 'bool',
        'is_external_licensed': 'bool',
        'active_robot_id': 'int',
        'machine_names': 'list[str]',
        'active_machine_names': 'list[str]'
    }

    attribute_map = {
        'key': 'Key',
        'user_name': 'UserName',
        'last_login_date': 'LastLoginDate',
        'machines_count': 'MachinesCount',
        'is_licensed': 'IsLicensed',
        'is_external_licensed': 'IsExternalLicensed',
        'active_robot_id': 'ActiveRobotId',
        'machine_names': 'MachineNames',
        'active_machine_names': 'ActiveMachineNames'
    }

    def __init__(self, key=None, user_name=None, last_login_date=None, machines_count=None, is_licensed=None, is_external_licensed=None, active_robot_id=None, machine_names=None, active_machine_names=None, _configuration=None):  # noqa: E501
        """LicenseNamedUserDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._user_name = None
        self._last_login_date = None
        self._machines_count = None
        self._is_licensed = None
        self._is_external_licensed = None
        self._active_robot_id = None
        self._machine_names = None
        self._active_machine_names = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if user_name is not None:
            self.user_name = user_name
        if last_login_date is not None:
            self.last_login_date = last_login_date
        if machines_count is not None:
            self.machines_count = machines_count
        if is_licensed is not None:
            self.is_licensed = is_licensed
        if is_external_licensed is not None:
            self.is_external_licensed = is_external_licensed
        if active_robot_id is not None:
            self.active_robot_id = active_robot_id
        if machine_names is not None:
            self.machine_names = machine_names
        if active_machine_names is not None:
            self.active_machine_names = active_machine_names

    @property
    def key(self):
        """Gets the key of this LicenseNamedUserDto.  # noqa: E501

        The license key.  # noqa: E501

        :return: The key of this LicenseNamedUserDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LicenseNamedUserDto.

        The license key.  # noqa: E501

        :param key: The key of this LicenseNamedUserDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def user_name(self):
        """Gets the user_name of this LicenseNamedUserDto.  # noqa: E501

        The Robot's UserName.  # noqa: E501

        :return: The user_name of this LicenseNamedUserDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LicenseNamedUserDto.

        The Robot's UserName.  # noqa: E501

        :param user_name: The user_name of this LicenseNamedUserDto.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def last_login_date(self):
        """Gets the last_login_date of this LicenseNamedUserDto.  # noqa: E501

        The last date when the Robot acquired a license.  # noqa: E501

        :return: The last_login_date of this LicenseNamedUserDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_date

    @last_login_date.setter
    def last_login_date(self, last_login_date):
        """Sets the last_login_date of this LicenseNamedUserDto.

        The last date when the Robot acquired a license.  # noqa: E501

        :param last_login_date: The last_login_date of this LicenseNamedUserDto.  # noqa: E501
        :type: datetime
        """

        self._last_login_date = last_login_date

    @property
    def machines_count(self):
        """Gets the machines_count of this LicenseNamedUserDto.  # noqa: E501

        Total number of machines where a robot with UserName is defined.  # noqa: E501

        :return: The machines_count of this LicenseNamedUserDto.  # noqa: E501
        :rtype: int
        """
        return self._machines_count

    @machines_count.setter
    def machines_count(self, machines_count):
        """Sets the machines_count of this LicenseNamedUserDto.

        Total number of machines where a robot with UserName is defined.  # noqa: E501

        :param machines_count: The machines_count of this LicenseNamedUserDto.  # noqa: E501
        :type: int
        """

        self._machines_count = machines_count

    @property
    def is_licensed(self):
        """Gets the is_licensed of this LicenseNamedUserDto.  # noqa: E501

        If the license is in use.  # noqa: E501

        :return: The is_licensed of this LicenseNamedUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_licensed

    @is_licensed.setter
    def is_licensed(self, is_licensed):
        """Sets the is_licensed of this LicenseNamedUserDto.

        If the license is in use.  # noqa: E501

        :param is_licensed: The is_licensed of this LicenseNamedUserDto.  # noqa: E501
        :type: bool
        """

        self._is_licensed = is_licensed

    @property
    def is_external_licensed(self):
        """Gets the is_external_licensed of this LicenseNamedUserDto.  # noqa: E501

        If the robot is external licensed  # noqa: E501

        :return: The is_external_licensed of this LicenseNamedUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_external_licensed

    @is_external_licensed.setter
    def is_external_licensed(self, is_external_licensed):
        """Sets the is_external_licensed of this LicenseNamedUserDto.

        If the robot is external licensed  # noqa: E501

        :param is_external_licensed: The is_external_licensed of this LicenseNamedUserDto.  # noqa: E501
        :type: bool
        """

        self._is_external_licensed = is_external_licensed

    @property
    def active_robot_id(self):
        """Gets the active_robot_id of this LicenseNamedUserDto.  # noqa: E501

        The Id of the Robot that uses the license.  # noqa: E501

        :return: The active_robot_id of this LicenseNamedUserDto.  # noqa: E501
        :rtype: int
        """
        return self._active_robot_id

    @active_robot_id.setter
    def active_robot_id(self, active_robot_id):
        """Sets the active_robot_id of this LicenseNamedUserDto.

        The Id of the Robot that uses the license.  # noqa: E501

        :param active_robot_id: The active_robot_id of this LicenseNamedUserDto.  # noqa: E501
        :type: int
        """

        self._active_robot_id = active_robot_id

    @property
    def machine_names(self):
        """Gets the machine_names of this LicenseNamedUserDto.  # noqa: E501

        The Machine names of the defined Robot.  # noqa: E501

        :return: The machine_names of this LicenseNamedUserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._machine_names

    @machine_names.setter
    def machine_names(self, machine_names):
        """Sets the machine_names of this LicenseNamedUserDto.

        The Machine names of the defined Robot.  # noqa: E501

        :param machine_names: The machine_names of this LicenseNamedUserDto.  # noqa: E501
        :type: list[str]
        """

        self._machine_names = machine_names

    @property
    def active_machine_names(self):
        """Gets the active_machine_names of this LicenseNamedUserDto.  # noqa: E501

        The Machine names of the connected and licensed Robot.  # noqa: E501

        :return: The active_machine_names of this LicenseNamedUserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_machine_names

    @active_machine_names.setter
    def active_machine_names(self, active_machine_names):
        """Sets the active_machine_names of this LicenseNamedUserDto.

        The Machine names of the connected and licensed Robot.  # noqa: E501

        :param active_machine_names: The active_machine_names of this LicenseNamedUserDto.  # noqa: E501
        :type: list[str]
        """

        self._active_machine_names = active_machine_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseNamedUserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseNamedUserDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseNamedUserDto):
            return True

        return self.to_dict() != other.to_dict()
