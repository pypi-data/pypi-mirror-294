# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class AssetsSetRobotAssetsByKeyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'robot_key': 'str',
        'robot_asset': 'RobotAssetDto'
    }

    attribute_map = {
        'robot_key': 'robotKey',
        'robot_asset': 'robotAsset'
    }

    def __init__(self, robot_key=None, robot_asset=None, _configuration=None):  # noqa: E501
        """AssetsSetRobotAssetsByKeyRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._robot_key = None
        self._robot_asset = None
        self.discriminator = None

        self.robot_key = robot_key
        self.robot_asset = robot_asset

    @property
    def robot_key(self):
        """Gets the robot_key of this AssetsSetRobotAssetsByKeyRequest.  # noqa: E501


        :return: The robot_key of this AssetsSetRobotAssetsByKeyRequest.  # noqa: E501
        :rtype: str
        """
        return self._robot_key

    @robot_key.setter
    def robot_key(self, robot_key):
        """Sets the robot_key of this AssetsSetRobotAssetsByKeyRequest.


        :param robot_key: The robot_key of this AssetsSetRobotAssetsByKeyRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and robot_key is None:
            raise ValueError("Invalid value for `robot_key`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                robot_key is not None and len(robot_key) < 1):
            raise ValueError("Invalid value for `robot_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._robot_key = robot_key

    @property
    def robot_asset(self):
        """Gets the robot_asset of this AssetsSetRobotAssetsByKeyRequest.  # noqa: E501


        :return: The robot_asset of this AssetsSetRobotAssetsByKeyRequest.  # noqa: E501
        :rtype: RobotAssetDto
        """
        return self._robot_asset

    @robot_asset.setter
    def robot_asset(self, robot_asset):
        """Sets the robot_asset of this AssetsSetRobotAssetsByKeyRequest.


        :param robot_asset: The robot_asset of this AssetsSetRobotAssetsByKeyRequest.  # noqa: E501
        :type: RobotAssetDto
        """
        if self._configuration.client_side_validation and robot_asset is None:
            raise ValueError("Invalid value for `robot_asset`, must not be `None`")  # noqa: E501

        self._robot_asset = robot_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetsSetRobotAssetsByKeyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetsSetRobotAssetsByKeyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetsSetRobotAssetsByKeyRequest):
            return True

        return self.to_dict() != other.to_dict()
