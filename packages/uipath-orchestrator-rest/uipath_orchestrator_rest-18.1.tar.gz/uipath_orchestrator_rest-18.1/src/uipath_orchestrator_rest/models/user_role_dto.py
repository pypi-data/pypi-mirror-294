# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class UserRoleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'role_id': 'int',
        'user_name': 'str',
        'role_name': 'str',
        'role_type': 'str',
        'id': 'int'
    }

    attribute_map = {
        'user_id': 'UserId',
        'role_id': 'RoleId',
        'user_name': 'UserName',
        'role_name': 'RoleName',
        'role_type': 'RoleType',
        'id': 'Id'
    }

    def __init__(self, user_id=None, role_id=None, user_name=None, role_name=None, role_type=None, id=None, _configuration=None):  # noqa: E501
        """UserRoleDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_id = None
        self._role_id = None
        self._user_name = None
        self._role_name = None
        self._role_type = None
        self._id = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if role_id is not None:
            self.role_id = role_id
        if user_name is not None:
            self.user_name = user_name
        if role_name is not None:
            self.role_name = role_name
        if role_type is not None:
            self.role_type = role_type
        if id is not None:
            self.id = id

    @property
    def user_id(self):
        """Gets the user_id of this UserRoleDto.  # noqa: E501

        The Id of the associated user.  # noqa: E501

        :return: The user_id of this UserRoleDto.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserRoleDto.

        The Id of the associated user.  # noqa: E501

        :param user_id: The user_id of this UserRoleDto.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def role_id(self):
        """Gets the role_id of this UserRoleDto.  # noqa: E501

        The Id of the associated role.  # noqa: E501

        :return: The role_id of this UserRoleDto.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserRoleDto.

        The Id of the associated role.  # noqa: E501

        :param role_id: The role_id of this UserRoleDto.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def user_name(self):
        """Gets the user_name of this UserRoleDto.  # noqa: E501

        The name of the associated user  # noqa: E501

        :return: The user_name of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserRoleDto.

        The name of the associated user  # noqa: E501

        :param user_name: The user_name of this UserRoleDto.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def role_name(self):
        """Gets the role_name of this UserRoleDto.  # noqa: E501

        The name of the associated role  # noqa: E501

        :return: The role_name of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this UserRoleDto.

        The name of the associated role  # noqa: E501

        :param role_name: The role_name of this UserRoleDto.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def role_type(self):
        """Gets the role_type of this UserRoleDto.  # noqa: E501


        :return: The role_type of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this UserRoleDto.


        :param role_type: The role_type of this UserRoleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Mixed", "Tenant", "Folder"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role_type not in allowed_values):
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"  # noqa: E501
                .format(role_type, allowed_values)
            )

        self._role_type = role_type

    @property
    def id(self):
        """Gets the id of this UserRoleDto.  # noqa: E501


        :return: The id of this UserRoleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRoleDto.


        :param id: The id of this UserRoleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRoleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRoleDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserRoleDto):
            return True

        return self.to_dict() != other.to_dict()
