# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class MachineUpdatedEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_key': 'str',
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'scope': 'str',
        'non_production_slots': 'int',
        'headless_slots': 'int',
        'test_automation_slots': 'int',
        'development_slots': 'int',
        'automation_cloud_slots': 'int',
        'automation_cloud_test_automation_slots': 'int',
        'unattended_slots': 'int',
        'tags': 'list[TagDto]',
        'tenant_id': 'int',
        'event_time': 'datetime',
        'event_source': 'object'
    }

    attribute_map = {
        'entity_key': 'entityKey',
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'scope': 'scope',
        'non_production_slots': 'nonProductionSlots',
        'headless_slots': 'headlessSlots',
        'test_automation_slots': 'testAutomationSlots',
        'development_slots': 'developmentSlots',
        'automation_cloud_slots': 'automationCloudSlots',
        'automation_cloud_test_automation_slots': 'automationCloudTestAutomationSlots',
        'unattended_slots': 'unattendedSlots',
        'tags': 'tags',
        'tenant_id': 'tenantId',
        'event_time': 'eventTime',
        'event_source': 'eventSource'
    }

    def __init__(self, entity_key=None, id=None, name=None, description=None, type=None, scope=None, non_production_slots=None, headless_slots=None, test_automation_slots=None, development_slots=None, automation_cloud_slots=None, automation_cloud_test_automation_slots=None, unattended_slots=None, tags=None, tenant_id=None, event_time=None, event_source=None, _configuration=None):  # noqa: E501
        """MachineUpdatedEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._entity_key = None
        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._scope = None
        self._non_production_slots = None
        self._headless_slots = None
        self._test_automation_slots = None
        self._development_slots = None
        self._automation_cloud_slots = None
        self._automation_cloud_test_automation_slots = None
        self._unattended_slots = None
        self._tags = None
        self._tenant_id = None
        self._event_time = None
        self._event_source = None
        self.discriminator = None

        if entity_key is not None:
            self.entity_key = entity_key
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if scope is not None:
            self.scope = scope
        if non_production_slots is not None:
            self.non_production_slots = non_production_slots
        if headless_slots is not None:
            self.headless_slots = headless_slots
        if test_automation_slots is not None:
            self.test_automation_slots = test_automation_slots
        if development_slots is not None:
            self.development_slots = development_slots
        if automation_cloud_slots is not None:
            self.automation_cloud_slots = automation_cloud_slots
        if automation_cloud_test_automation_slots is not None:
            self.automation_cloud_test_automation_slots = automation_cloud_test_automation_slots
        if unattended_slots is not None:
            self.unattended_slots = unattended_slots
        if tags is not None:
            self.tags = tags
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if event_time is not None:
            self.event_time = event_time
        if event_source is not None:
            self.event_source = event_source

    @property
    def entity_key(self):
        """Gets the entity_key of this MachineUpdatedEvent.  # noqa: E501


        :return: The entity_key of this MachineUpdatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._entity_key

    @entity_key.setter
    def entity_key(self, entity_key):
        """Sets the entity_key of this MachineUpdatedEvent.


        :param entity_key: The entity_key of this MachineUpdatedEvent.  # noqa: E501
        :type: str
        """

        self._entity_key = entity_key

    @property
    def id(self):
        """Gets the id of this MachineUpdatedEvent.  # noqa: E501


        :return: The id of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MachineUpdatedEvent.


        :param id: The id of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MachineUpdatedEvent.  # noqa: E501


        :return: The name of this MachineUpdatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MachineUpdatedEvent.


        :param name: The name of this MachineUpdatedEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MachineUpdatedEvent.  # noqa: E501


        :return: The description of this MachineUpdatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MachineUpdatedEvent.


        :param description: The description of this MachineUpdatedEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this MachineUpdatedEvent.  # noqa: E501


        :return: The type of this MachineUpdatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MachineUpdatedEvent.


        :param type: The type of this MachineUpdatedEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["Standard", "Template"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def scope(self):
        """Gets the scope of this MachineUpdatedEvent.  # noqa: E501


        :return: The scope of this MachineUpdatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this MachineUpdatedEvent.


        :param scope: The scope of this MachineUpdatedEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Shared", "PersonalWorkspace", "Cloud", "Serverless"]  # noqa: E501
        if (self._configuration.client_side_validation and
                scope not in allowed_values):
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def non_production_slots(self):
        """Gets the non_production_slots of this MachineUpdatedEvent.  # noqa: E501


        :return: The non_production_slots of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._non_production_slots

    @non_production_slots.setter
    def non_production_slots(self, non_production_slots):
        """Sets the non_production_slots of this MachineUpdatedEvent.


        :param non_production_slots: The non_production_slots of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._non_production_slots = non_production_slots

    @property
    def headless_slots(self):
        """Gets the headless_slots of this MachineUpdatedEvent.  # noqa: E501


        :return: The headless_slots of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._headless_slots

    @headless_slots.setter
    def headless_slots(self, headless_slots):
        """Sets the headless_slots of this MachineUpdatedEvent.


        :param headless_slots: The headless_slots of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._headless_slots = headless_slots

    @property
    def test_automation_slots(self):
        """Gets the test_automation_slots of this MachineUpdatedEvent.  # noqa: E501


        :return: The test_automation_slots of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._test_automation_slots

    @test_automation_slots.setter
    def test_automation_slots(self, test_automation_slots):
        """Sets the test_automation_slots of this MachineUpdatedEvent.


        :param test_automation_slots: The test_automation_slots of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._test_automation_slots = test_automation_slots

    @property
    def development_slots(self):
        """Gets the development_slots of this MachineUpdatedEvent.  # noqa: E501


        :return: The development_slots of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._development_slots

    @development_slots.setter
    def development_slots(self, development_slots):
        """Sets the development_slots of this MachineUpdatedEvent.


        :param development_slots: The development_slots of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._development_slots = development_slots

    @property
    def automation_cloud_slots(self):
        """Gets the automation_cloud_slots of this MachineUpdatedEvent.  # noqa: E501


        :return: The automation_cloud_slots of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._automation_cloud_slots

    @automation_cloud_slots.setter
    def automation_cloud_slots(self, automation_cloud_slots):
        """Sets the automation_cloud_slots of this MachineUpdatedEvent.


        :param automation_cloud_slots: The automation_cloud_slots of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._automation_cloud_slots = automation_cloud_slots

    @property
    def automation_cloud_test_automation_slots(self):
        """Gets the automation_cloud_test_automation_slots of this MachineUpdatedEvent.  # noqa: E501


        :return: The automation_cloud_test_automation_slots of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._automation_cloud_test_automation_slots

    @automation_cloud_test_automation_slots.setter
    def automation_cloud_test_automation_slots(self, automation_cloud_test_automation_slots):
        """Sets the automation_cloud_test_automation_slots of this MachineUpdatedEvent.


        :param automation_cloud_test_automation_slots: The automation_cloud_test_automation_slots of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._automation_cloud_test_automation_slots = automation_cloud_test_automation_slots

    @property
    def unattended_slots(self):
        """Gets the unattended_slots of this MachineUpdatedEvent.  # noqa: E501


        :return: The unattended_slots of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._unattended_slots

    @unattended_slots.setter
    def unattended_slots(self, unattended_slots):
        """Sets the unattended_slots of this MachineUpdatedEvent.


        :param unattended_slots: The unattended_slots of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._unattended_slots = unattended_slots

    @property
    def tags(self):
        """Gets the tags of this MachineUpdatedEvent.  # noqa: E501


        :return: The tags of this MachineUpdatedEvent.  # noqa: E501
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MachineUpdatedEvent.


        :param tags: The tags of this MachineUpdatedEvent.  # noqa: E501
        :type: list[TagDto]
        """

        self._tags = tags

    @property
    def tenant_id(self):
        """Gets the tenant_id of this MachineUpdatedEvent.  # noqa: E501


        :return: The tenant_id of this MachineUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this MachineUpdatedEvent.


        :param tenant_id: The tenant_id of this MachineUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._tenant_id = tenant_id

    @property
    def event_time(self):
        """Gets the event_time of this MachineUpdatedEvent.  # noqa: E501


        :return: The event_time of this MachineUpdatedEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this MachineUpdatedEvent.


        :param event_time: The event_time of this MachineUpdatedEvent.  # noqa: E501
        :type: datetime
        """

        self._event_time = event_time

    @property
    def event_source(self):
        """Gets the event_source of this MachineUpdatedEvent.  # noqa: E501


        :return: The event_source of this MachineUpdatedEvent.  # noqa: E501
        :rtype: object
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this MachineUpdatedEvent.


        :param event_source: The event_source of this MachineUpdatedEvent.  # noqa: E501
        :type: object
        """

        self._event_source = event_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineUpdatedEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineUpdatedEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MachineUpdatedEvent):
            return True

        return self.to_dict() != other.to_dict()
