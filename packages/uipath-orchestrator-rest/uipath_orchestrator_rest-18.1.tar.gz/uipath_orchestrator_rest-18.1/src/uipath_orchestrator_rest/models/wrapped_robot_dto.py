# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class WrappedRobotDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'key': 'str',
        'name': 'str',
        'machine_id': 'int',
        'machine_key': 'str',
        'machine_name': 'str',
        'description': 'str',
        'user_name': 'str',
        'type': 'str',
        'hosting_type': 'str',
        'environments': 'list[WrappedEnvironmentDto]',
        'execution_settings': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'Id',
        'key': 'Key',
        'name': 'Name',
        'machine_id': 'MachineId',
        'machine_key': 'MachineKey',
        'machine_name': 'MachineName',
        'description': 'Description',
        'user_name': 'UserName',
        'type': 'Type',
        'hosting_type': 'HostingType',
        'environments': 'Environments',
        'execution_settings': 'ExecutionSettings'
    }

    def __init__(self, id=None, key=None, name=None, machine_id=None, machine_key=None, machine_name=None, description=None, user_name=None, type=None, hosting_type=None, environments=None, execution_settings=None, _configuration=None):  # noqa: E501
        """WrappedRobotDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._key = None
        self._name = None
        self._machine_id = None
        self._machine_key = None
        self._machine_name = None
        self._description = None
        self._user_name = None
        self._type = None
        self._hosting_type = None
        self._environments = None
        self._execution_settings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if machine_id is not None:
            self.machine_id = machine_id
        if machine_key is not None:
            self.machine_key = machine_key
        if machine_name is not None:
            self.machine_name = machine_name
        if description is not None:
            self.description = description
        if user_name is not None:
            self.user_name = user_name
        if type is not None:
            self.type = type
        if hosting_type is not None:
            self.hosting_type = hosting_type
        if environments is not None:
            self.environments = environments
        if execution_settings is not None:
            self.execution_settings = execution_settings

    @property
    def id(self):
        """Gets the id of this WrappedRobotDto.  # noqa: E501


        :return: The id of this WrappedRobotDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WrappedRobotDto.


        :param id: The id of this WrappedRobotDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this WrappedRobotDto.  # noqa: E501


        :return: The key of this WrappedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WrappedRobotDto.


        :param key: The key of this WrappedRobotDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this WrappedRobotDto.  # noqa: E501


        :return: The name of this WrappedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WrappedRobotDto.


        :param name: The name of this WrappedRobotDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def machine_id(self):
        """Gets the machine_id of this WrappedRobotDto.  # noqa: E501


        :return: The machine_id of this WrappedRobotDto.  # noqa: E501
        :rtype: int
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this WrappedRobotDto.


        :param machine_id: The machine_id of this WrappedRobotDto.  # noqa: E501
        :type: int
        """

        self._machine_id = machine_id

    @property
    def machine_key(self):
        """Gets the machine_key of this WrappedRobotDto.  # noqa: E501


        :return: The machine_key of this WrappedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_key

    @machine_key.setter
    def machine_key(self, machine_key):
        """Sets the machine_key of this WrappedRobotDto.


        :param machine_key: The machine_key of this WrappedRobotDto.  # noqa: E501
        :type: str
        """

        self._machine_key = machine_key

    @property
    def machine_name(self):
        """Gets the machine_name of this WrappedRobotDto.  # noqa: E501


        :return: The machine_name of this WrappedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this WrappedRobotDto.


        :param machine_name: The machine_name of this WrappedRobotDto.  # noqa: E501
        :type: str
        """

        self._machine_name = machine_name

    @property
    def description(self):
        """Gets the description of this WrappedRobotDto.  # noqa: E501


        :return: The description of this WrappedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WrappedRobotDto.


        :param description: The description of this WrappedRobotDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def user_name(self):
        """Gets the user_name of this WrappedRobotDto.  # noqa: E501


        :return: The user_name of this WrappedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this WrappedRobotDto.


        :param user_name: The user_name of this WrappedRobotDto.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def type(self):
        """Gets the type of this WrappedRobotDto.  # noqa: E501


        :return: The type of this WrappedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WrappedRobotDto.


        :param type: The type of this WrappedRobotDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NonProduction", "Attended", "Unattended", "Development", "Studio", "RpaDeveloper", "StudioX", "CitizenDeveloper", "Headless", "StudioPro", "RpaDeveloperPro", "TestAutomation", "AutomationCloud", "Serverless", "AutomationKit", "ServerlessTestAutomation", "AutomationCloudTestAutomation", "AttendedStudioWeb"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def hosting_type(self):
        """Gets the hosting_type of this WrappedRobotDto.  # noqa: E501


        :return: The hosting_type of this WrappedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._hosting_type

    @hosting_type.setter
    def hosting_type(self, hosting_type):
        """Sets the hosting_type of this WrappedRobotDto.


        :param hosting_type: The hosting_type of this WrappedRobotDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Standard", "Floating"]  # noqa: E501
        if (self._configuration.client_side_validation and
                hosting_type not in allowed_values):
            raise ValueError(
                "Invalid value for `hosting_type` ({0}), must be one of {1}"  # noqa: E501
                .format(hosting_type, allowed_values)
            )

        self._hosting_type = hosting_type

    @property
    def environments(self):
        """Gets the environments of this WrappedRobotDto.  # noqa: E501


        :return: The environments of this WrappedRobotDto.  # noqa: E501
        :rtype: list[WrappedEnvironmentDto]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this WrappedRobotDto.


        :param environments: The environments of this WrappedRobotDto.  # noqa: E501
        :type: list[WrappedEnvironmentDto]
        """

        self._environments = environments

    @property
    def execution_settings(self):
        """Gets the execution_settings of this WrappedRobotDto.  # noqa: E501


        :return: The execution_settings of this WrappedRobotDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._execution_settings

    @execution_settings.setter
    def execution_settings(self, execution_settings):
        """Sets the execution_settings of this WrappedRobotDto.


        :param execution_settings: The execution_settings of this WrappedRobotDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._execution_settings = execution_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WrappedRobotDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WrappedRobotDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WrappedRobotDto):
            return True

        return self.to_dict() != other.to_dict()
