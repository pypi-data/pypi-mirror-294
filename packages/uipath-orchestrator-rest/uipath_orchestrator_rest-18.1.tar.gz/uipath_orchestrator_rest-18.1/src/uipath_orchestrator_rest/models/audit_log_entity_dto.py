# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class AuditLogEntityDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_log_id': 'int',
        'custom_data': 'str',
        'entity_id': 'int',
        'entity_name': 'str',
        'action': 'str',
        'id': 'int'
    }

    attribute_map = {
        'audit_log_id': 'AuditLogId',
        'custom_data': 'CustomData',
        'entity_id': 'EntityId',
        'entity_name': 'EntityName',
        'action': 'Action',
        'id': 'Id'
    }

    def __init__(self, audit_log_id=None, custom_data=None, entity_id=None, entity_name=None, action=None, id=None, _configuration=None):  # noqa: E501
        """AuditLogEntityDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audit_log_id = None
        self._custom_data = None
        self._entity_id = None
        self._entity_name = None
        self._action = None
        self._id = None
        self.discriminator = None

        if audit_log_id is not None:
            self.audit_log_id = audit_log_id
        if custom_data is not None:
            self.custom_data = custom_data
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_name is not None:
            self.entity_name = entity_name
        if action is not None:
            self.action = action
        if id is not None:
            self.id = id

    @property
    def audit_log_id(self):
        """Gets the audit_log_id of this AuditLogEntityDto.  # noqa: E501

        Business audit entry that triggered the changes  # noqa: E501

        :return: The audit_log_id of this AuditLogEntityDto.  # noqa: E501
        :rtype: int
        """
        return self._audit_log_id

    @audit_log_id.setter
    def audit_log_id(self, audit_log_id):
        """Sets the audit_log_id of this AuditLogEntityDto.

        Business audit entry that triggered the changes  # noqa: E501

        :param audit_log_id: The audit_log_id of this AuditLogEntityDto.  # noqa: E501
        :type: int
        """

        self._audit_log_id = audit_log_id

    @property
    def custom_data(self):
        """Gets the custom_data of this AuditLogEntityDto.  # noqa: E501

        Data about the old/new/included values  # noqa: E501

        :return: The custom_data of this AuditLogEntityDto.  # noqa: E501
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this AuditLogEntityDto.

        Data about the old/new/included values  # noqa: E501

        :param custom_data: The custom_data of this AuditLogEntityDto.  # noqa: E501
        :type: str
        """

        self._custom_data = custom_data

    @property
    def entity_id(self):
        """Gets the entity_id of this AuditLogEntityDto.  # noqa: E501

        The Id of the referred entity  # noqa: E501

        :return: The entity_id of this AuditLogEntityDto.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this AuditLogEntityDto.

        The Id of the referred entity  # noqa: E501

        :param entity_id: The entity_id of this AuditLogEntityDto.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """Gets the entity_name of this AuditLogEntityDto.  # noqa: E501

        The name of the entity the auditLog refers to  # noqa: E501

        :return: The entity_name of this AuditLogEntityDto.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this AuditLogEntityDto.

        The name of the entity the auditLog refers to  # noqa: E501

        :param entity_name: The entity_name of this AuditLogEntityDto.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def action(self):
        """Gets the action of this AuditLogEntityDto.  # noqa: E501

        The action (created, updated, deleted etc)  # noqa: E501

        :return: The action of this AuditLogEntityDto.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditLogEntityDto.

        The action (created, updated, deleted etc)  # noqa: E501

        :param action: The action of this AuditLogEntityDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Create", "Update", "Delete", "StartJob", "StopJob", "Associate", "Upload", "ChangeStatus", "Import", "ChangePassword", "Register", "Toggle", "ResetPassword", "PasswordResetAttempt", "Download", "Acknowledge", "Activate", "Assign", "BulkUpload", "UpdateFeature", "ResumeJob", "Start", "End", "Skip", "Unassign", "Deactivate", "CreateBlobFileSas", "DeleteBlobFile", "Move", "Set", "StartDelete", "ExploreStart", "ExploreEnd", "Save", "Convert", "Forward", "BulkComplete", "BulkSave", "ForceStopJob", "MigrateFolder", "EditTaskMetadata", "Archive", "StartMigrateFolders", "ToggleUserFolderSubscription", "StartUninstall", "StartInstall", "VideoAccess", "AutomaticallyExploreEnd", "InstallState", "FinishInstall", "FinishUninstall"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def id(self):
        """Gets the id of this AuditLogEntityDto.  # noqa: E501


        :return: The id of this AuditLogEntityDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditLogEntityDto.


        :param id: The id of this AuditLogEntityDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLogEntityDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLogEntityDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditLogEntityDto):
            return True

        return self.to_dict() != other.to_dict()
