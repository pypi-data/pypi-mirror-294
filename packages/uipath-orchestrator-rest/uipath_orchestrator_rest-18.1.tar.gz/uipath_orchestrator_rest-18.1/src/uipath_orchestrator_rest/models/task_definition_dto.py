# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TaskDefinitionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'key': 'str',
        'description': 'str',
        'properties': 'TaskDefinitionPropertiesDto',
        'is_deleted': 'bool',
        'deleter_user_id': 'int',
        'deletion_time': 'datetime',
        'last_modification_time': 'datetime',
        'last_modifier_user_id': 'int',
        'creation_time': 'datetime',
        'creator_user_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'key': 'Key',
        'description': 'Description',
        'properties': 'Properties',
        'is_deleted': 'IsDeleted',
        'deleter_user_id': 'DeleterUserId',
        'deletion_time': 'DeletionTime',
        'last_modification_time': 'LastModificationTime',
        'last_modifier_user_id': 'LastModifierUserId',
        'creation_time': 'CreationTime',
        'creator_user_id': 'CreatorUserId',
        'id': 'Id'
    }

    def __init__(self, name=None, key=None, description=None, properties=None, is_deleted=None, deleter_user_id=None, deletion_time=None, last_modification_time=None, last_modifier_user_id=None, creation_time=None, creator_user_id=None, id=None, _configuration=None):  # noqa: E501
        """TaskDefinitionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._key = None
        self._description = None
        self._properties = None
        self._is_deleted = None
        self._deleter_user_id = None
        self._deletion_time = None
        self._last_modification_time = None
        self._last_modifier_user_id = None
        self._creation_time = None
        self._creator_user_id = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if key is not None:
            self.key = key
        if description is not None:
            self.description = description
        if properties is not None:
            self.properties = properties
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if deleter_user_id is not None:
            self.deleter_user_id = deleter_user_id
        if deletion_time is not None:
            self.deletion_time = deletion_time
        if last_modification_time is not None:
            self.last_modification_time = last_modification_time
        if last_modifier_user_id is not None:
            self.last_modifier_user_id = last_modifier_user_id
        if creation_time is not None:
            self.creation_time = creation_time
        if creator_user_id is not None:
            self.creator_user_id = creator_user_id
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this TaskDefinitionDto.  # noqa: E501

        Name of the Task Definition.  # noqa: E501

        :return: The name of this TaskDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskDefinitionDto.

        Name of the Task Definition.  # noqa: E501

        :param name: The name of this TaskDefinitionDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def key(self):
        """Gets the key of this TaskDefinitionDto.  # noqa: E501

        Unique key for Task Definition  # noqa: E501

        :return: The key of this TaskDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TaskDefinitionDto.

        Unique key for Task Definition  # noqa: E501

        :param key: The key of this TaskDefinitionDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def description(self):
        """Gets the description of this TaskDefinitionDto.  # noqa: E501

        Description of this task definition.  # noqa: E501

        :return: The description of this TaskDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskDefinitionDto.

        Description of this task definition.  # noqa: E501

        :param description: The description of this TaskDefinitionDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this TaskDefinitionDto.  # noqa: E501


        :return: The properties of this TaskDefinitionDto.  # noqa: E501
        :rtype: TaskDefinitionPropertiesDto
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TaskDefinitionDto.


        :param properties: The properties of this TaskDefinitionDto.  # noqa: E501
        :type: TaskDefinitionPropertiesDto
        """

        self._properties = properties

    @property
    def is_deleted(self):
        """Gets the is_deleted of this TaskDefinitionDto.  # noqa: E501


        :return: The is_deleted of this TaskDefinitionDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this TaskDefinitionDto.


        :param is_deleted: The is_deleted of this TaskDefinitionDto.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def deleter_user_id(self):
        """Gets the deleter_user_id of this TaskDefinitionDto.  # noqa: E501


        :return: The deleter_user_id of this TaskDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._deleter_user_id

    @deleter_user_id.setter
    def deleter_user_id(self, deleter_user_id):
        """Sets the deleter_user_id of this TaskDefinitionDto.


        :param deleter_user_id: The deleter_user_id of this TaskDefinitionDto.  # noqa: E501
        :type: int
        """

        self._deleter_user_id = deleter_user_id

    @property
    def deletion_time(self):
        """Gets the deletion_time of this TaskDefinitionDto.  # noqa: E501


        :return: The deletion_time of this TaskDefinitionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._deletion_time

    @deletion_time.setter
    def deletion_time(self, deletion_time):
        """Sets the deletion_time of this TaskDefinitionDto.


        :param deletion_time: The deletion_time of this TaskDefinitionDto.  # noqa: E501
        :type: datetime
        """

        self._deletion_time = deletion_time

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this TaskDefinitionDto.  # noqa: E501


        :return: The last_modification_time of this TaskDefinitionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this TaskDefinitionDto.


        :param last_modification_time: The last_modification_time of this TaskDefinitionDto.  # noqa: E501
        :type: datetime
        """

        self._last_modification_time = last_modification_time

    @property
    def last_modifier_user_id(self):
        """Gets the last_modifier_user_id of this TaskDefinitionDto.  # noqa: E501


        :return: The last_modifier_user_id of this TaskDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modifier_user_id

    @last_modifier_user_id.setter
    def last_modifier_user_id(self, last_modifier_user_id):
        """Sets the last_modifier_user_id of this TaskDefinitionDto.


        :param last_modifier_user_id: The last_modifier_user_id of this TaskDefinitionDto.  # noqa: E501
        :type: int
        """

        self._last_modifier_user_id = last_modifier_user_id

    @property
    def creation_time(self):
        """Gets the creation_time of this TaskDefinitionDto.  # noqa: E501


        :return: The creation_time of this TaskDefinitionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TaskDefinitionDto.


        :param creation_time: The creation_time of this TaskDefinitionDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this TaskDefinitionDto.  # noqa: E501


        :return: The creator_user_id of this TaskDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this TaskDefinitionDto.


        :param creator_user_id: The creator_user_id of this TaskDefinitionDto.  # noqa: E501
        :type: int
        """

        self._creator_user_id = creator_user_id

    @property
    def id(self):
        """Gets the id of this TaskDefinitionDto.  # noqa: E501


        :return: The id of this TaskDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskDefinitionDto.


        :param id: The id of this TaskDefinitionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDefinitionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDefinitionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskDefinitionDto):
            return True

        return self.to_dict() != other.to_dict()
