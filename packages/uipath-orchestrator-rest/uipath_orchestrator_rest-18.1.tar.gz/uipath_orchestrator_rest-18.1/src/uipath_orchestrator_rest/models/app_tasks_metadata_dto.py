# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class AppTasksMetadataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'app_version': 'int',
        'creation_time': 'datetime',
        'creator_user_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'app_id': 'appId',
        'app_version': 'appVersion',
        'creation_time': 'creationTime',
        'creator_user_id': 'creatorUserId',
        'id': 'id'
    }

    def __init__(self, app_id=None, app_version=None, creation_time=None, creator_user_id=None, id=None, _configuration=None):  # noqa: E501
        """AppTasksMetadataDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_id = None
        self._app_version = None
        self._creation_time = None
        self._creator_user_id = None
        self._id = None
        self.discriminator = None

        if app_id is not None:
            self.app_id = app_id
        if app_version is not None:
            self.app_version = app_version
        if creation_time is not None:
            self.creation_time = creation_time
        if creator_user_id is not None:
            self.creator_user_id = creator_user_id
        if id is not None:
            self.id = id

    @property
    def app_id(self):
        """Gets the app_id of this AppTasksMetadataDto.  # noqa: E501

        Associated App Id for App Tasks  # noqa: E501

        :return: The app_id of this AppTasksMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppTasksMetadataDto.

        Associated App Id for App Tasks  # noqa: E501

        :param app_id: The app_id of this AppTasksMetadataDto.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_version(self):
        """Gets the app_version of this AppTasksMetadataDto.  # noqa: E501

        Associated App Version for App Tasks  # noqa: E501

        :return: The app_version of this AppTasksMetadataDto.  # noqa: E501
        :rtype: int
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this AppTasksMetadataDto.

        Associated App Version for App Tasks  # noqa: E501

        :param app_version: The app_version of this AppTasksMetadataDto.  # noqa: E501
        :type: int
        """

        self._app_version = app_version

    @property
    def creation_time(self):
        """Gets the creation_time of this AppTasksMetadataDto.  # noqa: E501


        :return: The creation_time of this AppTasksMetadataDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AppTasksMetadataDto.


        :param creation_time: The creation_time of this AppTasksMetadataDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this AppTasksMetadataDto.  # noqa: E501


        :return: The creator_user_id of this AppTasksMetadataDto.  # noqa: E501
        :rtype: int
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this AppTasksMetadataDto.


        :param creator_user_id: The creator_user_id of this AppTasksMetadataDto.  # noqa: E501
        :type: int
        """

        self._creator_user_id = creator_user_id

    @property
    def id(self):
        """Gets the id of this AppTasksMetadataDto.  # noqa: E501


        :return: The id of this AppTasksMetadataDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppTasksMetadataDto.


        :param id: The id of this AppTasksMetadataDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppTasksMetadataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppTasksMetadataDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppTasksMetadataDto):
            return True

        return self.to_dict() != other.to_dict()
