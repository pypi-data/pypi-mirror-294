# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class CredentialStoreDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proxy_id': 'int',
        'proxy_type': 'str',
        'host_name': 'str',
        'name': 'str',
        'type': 'str',
        'additional_configuration': 'str',
        'details': 'CredentialStoreDetailsDto',
        'default_credential_stores': 'list[DefaultCredentialStoreDto]',
        'id': 'int'
    }

    attribute_map = {
        'proxy_id': 'ProxyId',
        'proxy_type': 'ProxyType',
        'host_name': 'HostName',
        'name': 'Name',
        'type': 'Type',
        'additional_configuration': 'AdditionalConfiguration',
        'details': 'Details',
        'default_credential_stores': 'DefaultCredentialStores',
        'id': 'Id'
    }

    def __init__(self, proxy_id=None, proxy_type=None, host_name=None, name=None, type=None, additional_configuration=None, details=None, default_credential_stores=None, id=None, _configuration=None):  # noqa: E501
        """CredentialStoreDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._proxy_id = None
        self._proxy_type = None
        self._host_name = None
        self._name = None
        self._type = None
        self._additional_configuration = None
        self._details = None
        self._default_credential_stores = None
        self._id = None
        self.discriminator = None

        if proxy_id is not None:
            self.proxy_id = proxy_id
        if proxy_type is not None:
            self.proxy_type = proxy_type
        if host_name is not None:
            self.host_name = host_name
        self.name = name
        self.type = type
        if additional_configuration is not None:
            self.additional_configuration = additional_configuration
        if details is not None:
            self.details = details
        if default_credential_stores is not None:
            self.default_credential_stores = default_credential_stores
        if id is not None:
            self.id = id

    @property
    def proxy_id(self):
        """Gets the proxy_id of this CredentialStoreDto.  # noqa: E501


        :return: The proxy_id of this CredentialStoreDto.  # noqa: E501
        :rtype: int
        """
        return self._proxy_id

    @proxy_id.setter
    def proxy_id(self, proxy_id):
        """Sets the proxy_id of this CredentialStoreDto.


        :param proxy_id: The proxy_id of this CredentialStoreDto.  # noqa: E501
        :type: int
        """

        self._proxy_id = proxy_id

    @property
    def proxy_type(self):
        """Gets the proxy_type of this CredentialStoreDto.  # noqa: E501


        :return: The proxy_type of this CredentialStoreDto.  # noqa: E501
        :rtype: str
        """
        return self._proxy_type

    @proxy_type.setter
    def proxy_type(self, proxy_type):
        """Sets the proxy_type of this CredentialStoreDto.


        :param proxy_type: The proxy_type of this CredentialStoreDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Connected", "Disconnected"]  # noqa: E501
        if (self._configuration.client_side_validation and
                proxy_type not in allowed_values):
            raise ValueError(
                "Invalid value for `proxy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(proxy_type, allowed_values)
            )

        self._proxy_type = proxy_type

    @property
    def host_name(self):
        """Gets the host_name of this CredentialStoreDto.  # noqa: E501


        :return: The host_name of this CredentialStoreDto.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this CredentialStoreDto.


        :param host_name: The host_name of this CredentialStoreDto.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def name(self):
        """Gets the name of this CredentialStoreDto.  # noqa: E501


        :return: The name of this CredentialStoreDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CredentialStoreDto.


        :param name: The name of this CredentialStoreDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this CredentialStoreDto.  # noqa: E501


        :return: The type of this CredentialStoreDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CredentialStoreDto.


        :param type: The type of this CredentialStoreDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def additional_configuration(self):
        """Gets the additional_configuration of this CredentialStoreDto.  # noqa: E501

        Additional information specific to the type of the Credential Store.  # noqa: E501

        :return: The additional_configuration of this CredentialStoreDto.  # noqa: E501
        :rtype: str
        """
        return self._additional_configuration

    @additional_configuration.setter
    def additional_configuration(self, additional_configuration):
        """Sets the additional_configuration of this CredentialStoreDto.

        Additional information specific to the type of the Credential Store.  # noqa: E501

        :param additional_configuration: The additional_configuration of this CredentialStoreDto.  # noqa: E501
        :type: str
        """

        self._additional_configuration = additional_configuration

    @property
    def details(self):
        """Gets the details of this CredentialStoreDto.  # noqa: E501


        :return: The details of this CredentialStoreDto.  # noqa: E501
        :rtype: CredentialStoreDetailsDto
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CredentialStoreDto.


        :param details: The details of this CredentialStoreDto.  # noqa: E501
        :type: CredentialStoreDetailsDto
        """

        self._details = details

    @property
    def default_credential_stores(self):
        """Gets the default_credential_stores of this CredentialStoreDto.  # noqa: E501

        Default credential stores  # noqa: E501

        :return: The default_credential_stores of this CredentialStoreDto.  # noqa: E501
        :rtype: list[DefaultCredentialStoreDto]
        """
        return self._default_credential_stores

    @default_credential_stores.setter
    def default_credential_stores(self, default_credential_stores):
        """Sets the default_credential_stores of this CredentialStoreDto.

        Default credential stores  # noqa: E501

        :param default_credential_stores: The default_credential_stores of this CredentialStoreDto.  # noqa: E501
        :type: list[DefaultCredentialStoreDto]
        """

        self._default_credential_stores = default_credential_stores

    @property
    def id(self):
        """Gets the id of this CredentialStoreDto.  # noqa: E501


        :return: The id of this CredentialStoreDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredentialStoreDto.


        :param id: The id of this CredentialStoreDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialStoreDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialStoreDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CredentialStoreDto):
            return True

        return self.to_dict() != other.to_dict()
