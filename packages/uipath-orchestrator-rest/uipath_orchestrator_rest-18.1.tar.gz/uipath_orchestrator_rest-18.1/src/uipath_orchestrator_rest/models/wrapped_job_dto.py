# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class WrappedJobDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'key': 'str',
        'creation_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'state': 'str',
        'source': 'str',
        'source_type': 'str',
        'batch_execution_key': 'str',
        'info': 'str',
        'starting_schedule_id': 'int',
        'release_name': 'str',
        'type': 'str',
        'host_machine_name': 'str',
        'robot': 'WrappedRobotDto',
        'release': 'WrappedReleaseDto',
        'input_arguments': 'object',
        'output_arguments': 'object',
        'runtime_type': 'str',
        'process_type': 'str',
        'specific_priority_value': 'int',
        'project_key': 'str',
        'parent_operation_id': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'key': 'Key',
        'creation_time': 'CreationTime',
        'start_time': 'StartTime',
        'end_time': 'EndTime',
        'state': 'State',
        'source': 'Source',
        'source_type': 'SourceType',
        'batch_execution_key': 'BatchExecutionKey',
        'info': 'Info',
        'starting_schedule_id': 'StartingScheduleId',
        'release_name': 'ReleaseName',
        'type': 'Type',
        'host_machine_name': 'HostMachineName',
        'robot': 'Robot',
        'release': 'Release',
        'input_arguments': 'InputArguments',
        'output_arguments': 'OutputArguments',
        'runtime_type': 'RuntimeType',
        'process_type': 'ProcessType',
        'specific_priority_value': 'SpecificPriorityValue',
        'project_key': 'ProjectKey',
        'parent_operation_id': 'ParentOperationId'
    }

    def __init__(self, id=None, key=None, creation_time=None, start_time=None, end_time=None, state=None, source=None, source_type=None, batch_execution_key=None, info=None, starting_schedule_id=None, release_name=None, type=None, host_machine_name=None, robot=None, release=None, input_arguments=None, output_arguments=None, runtime_type=None, process_type=None, specific_priority_value=None, project_key=None, parent_operation_id=None, _configuration=None):  # noqa: E501
        """WrappedJobDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._key = None
        self._creation_time = None
        self._start_time = None
        self._end_time = None
        self._state = None
        self._source = None
        self._source_type = None
        self._batch_execution_key = None
        self._info = None
        self._starting_schedule_id = None
        self._release_name = None
        self._type = None
        self._host_machine_name = None
        self._robot = None
        self._release = None
        self._input_arguments = None
        self._output_arguments = None
        self._runtime_type = None
        self._process_type = None
        self._specific_priority_value = None
        self._project_key = None
        self._parent_operation_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if creation_time is not None:
            self.creation_time = creation_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if state is not None:
            self.state = state
        if source is not None:
            self.source = source
        if source_type is not None:
            self.source_type = source_type
        if batch_execution_key is not None:
            self.batch_execution_key = batch_execution_key
        if info is not None:
            self.info = info
        if starting_schedule_id is not None:
            self.starting_schedule_id = starting_schedule_id
        if release_name is not None:
            self.release_name = release_name
        if type is not None:
            self.type = type
        if host_machine_name is not None:
            self.host_machine_name = host_machine_name
        if robot is not None:
            self.robot = robot
        if release is not None:
            self.release = release
        if input_arguments is not None:
            self.input_arguments = input_arguments
        if output_arguments is not None:
            self.output_arguments = output_arguments
        if runtime_type is not None:
            self.runtime_type = runtime_type
        if process_type is not None:
            self.process_type = process_type
        if specific_priority_value is not None:
            self.specific_priority_value = specific_priority_value
        if project_key is not None:
            self.project_key = project_key
        if parent_operation_id is not None:
            self.parent_operation_id = parent_operation_id

    @property
    def id(self):
        """Gets the id of this WrappedJobDto.  # noqa: E501


        :return: The id of this WrappedJobDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WrappedJobDto.


        :param id: The id of this WrappedJobDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this WrappedJobDto.  # noqa: E501

        The unique job identifier.  # noqa: E501

        :return: The key of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WrappedJobDto.

        The unique job identifier.  # noqa: E501

        :param key: The key of this WrappedJobDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def creation_time(self):
        """Gets the creation_time of this WrappedJobDto.  # noqa: E501

        The Creation time of the job  # noqa: E501

        :return: The creation_time of this WrappedJobDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this WrappedJobDto.

        The Creation time of the job  # noqa: E501

        :param creation_time: The creation_time of this WrappedJobDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def start_time(self):
        """Gets the start_time of this WrappedJobDto.  # noqa: E501

        The date and time when the job execution started or null if the job hasn't started yet.  # noqa: E501

        :return: The start_time of this WrappedJobDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WrappedJobDto.

        The date and time when the job execution started or null if the job hasn't started yet.  # noqa: E501

        :param start_time: The start_time of this WrappedJobDto.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this WrappedJobDto.  # noqa: E501

        The date and time when the job execution ended or null if the job hasn't ended yet.  # noqa: E501

        :return: The end_time of this WrappedJobDto.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WrappedJobDto.

        The date and time when the job execution ended or null if the job hasn't ended yet.  # noqa: E501

        :param end_time: The end_time of this WrappedJobDto.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def state(self):
        """Gets the state of this WrappedJobDto.  # noqa: E501

        The state in which the job is.  # noqa: E501

        :return: The state of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WrappedJobDto.

        The state in which the job is.  # noqa: E501

        :param state: The state of this WrappedJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Running", "Stopping", "Terminating", "Faulted", "Successful", "Stopped", "Suspended", "Resumed"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def source(self):
        """Gets the source of this WrappedJobDto.  # noqa: E501

        The Source name of the job.  # noqa: E501

        :return: The source of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WrappedJobDto.

        The Source name of the job.  # noqa: E501

        :param source: The source of this WrappedJobDto.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_type(self):
        """Gets the source_type of this WrappedJobDto.  # noqa: E501

        The Source type of the job.  # noqa: E501

        :return: The source_type of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this WrappedJobDto.

        The Source type of the job.  # noqa: E501

        :param source_type: The source_type of this WrappedJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Manual", "Schedule", "Agent", "Queue", "StudioWeb", "IntegrationTrigger", "StudioDesktop", "AutomationOpsPipelines", "Apps", "SAP", "HttpTrigger", "HttpTriggerCallback", "RobotAPI", "CommandLine", "RobotNetAPI"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source_type not in allowed_values):
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def batch_execution_key(self):
        """Gets the batch_execution_key of this WrappedJobDto.  # noqa: E501

        The unique identifier grouping multiple jobs. It is usually generated when the job is created by a schedule.  # noqa: E501

        :return: The batch_execution_key of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._batch_execution_key

    @batch_execution_key.setter
    def batch_execution_key(self, batch_execution_key):
        """Sets the batch_execution_key of this WrappedJobDto.

        The unique identifier grouping multiple jobs. It is usually generated when the job is created by a schedule.  # noqa: E501

        :param batch_execution_key: The batch_execution_key of this WrappedJobDto.  # noqa: E501
        :type: str
        """

        self._batch_execution_key = batch_execution_key

    @property
    def info(self):
        """Gets the info of this WrappedJobDto.  # noqa: E501

        Additional information about the current job.  # noqa: E501

        :return: The info of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this WrappedJobDto.

        Additional information about the current job.  # noqa: E501

        :param info: The info of this WrappedJobDto.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def starting_schedule_id(self):
        """Gets the starting_schedule_id of this WrappedJobDto.  # noqa: E501

        The Id of the schedule that started the job, or null if the job was started by the user.  # noqa: E501

        :return: The starting_schedule_id of this WrappedJobDto.  # noqa: E501
        :rtype: int
        """
        return self._starting_schedule_id

    @starting_schedule_id.setter
    def starting_schedule_id(self, starting_schedule_id):
        """Sets the starting_schedule_id of this WrappedJobDto.

        The Id of the schedule that started the job, or null if the job was started by the user.  # noqa: E501

        :param starting_schedule_id: The starting_schedule_id of this WrappedJobDto.  # noqa: E501
        :type: int
        """

        self._starting_schedule_id = starting_schedule_id

    @property
    def release_name(self):
        """Gets the release_name of this WrappedJobDto.  # noqa: E501

        The name of the release associated with the current name.  # noqa: E501

        :return: The release_name of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._release_name

    @release_name.setter
    def release_name(self, release_name):
        """Sets the release_name of this WrappedJobDto.

        The name of the release associated with the current name.  # noqa: E501

        :param release_name: The release_name of this WrappedJobDto.  # noqa: E501
        :type: str
        """

        self._release_name = release_name

    @property
    def type(self):
        """Gets the type of this WrappedJobDto.  # noqa: E501

        The type of the job, Attended if started via the robot, Unattended otherwise  # noqa: E501

        :return: The type of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WrappedJobDto.

        The type of the job, Attended if started via the robot, Unattended otherwise  # noqa: E501

        :param type: The type of this WrappedJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unattended", "Attended", "ServerlessGeneric"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def host_machine_name(self):
        """Gets the host_machine_name of this WrappedJobDto.  # noqa: E501

        The name of the machine where the Robot run the job.  # noqa: E501

        :return: The host_machine_name of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._host_machine_name

    @host_machine_name.setter
    def host_machine_name(self, host_machine_name):
        """Sets the host_machine_name of this WrappedJobDto.

        The name of the machine where the Robot run the job.  # noqa: E501

        :param host_machine_name: The host_machine_name of this WrappedJobDto.  # noqa: E501
        :type: str
        """

        self._host_machine_name = host_machine_name

    @property
    def robot(self):
        """Gets the robot of this WrappedJobDto.  # noqa: E501


        :return: The robot of this WrappedJobDto.  # noqa: E501
        :rtype: WrappedRobotDto
        """
        return self._robot

    @robot.setter
    def robot(self, robot):
        """Sets the robot of this WrappedJobDto.


        :param robot: The robot of this WrappedJobDto.  # noqa: E501
        :type: WrappedRobotDto
        """

        self._robot = robot

    @property
    def release(self):
        """Gets the release of this WrappedJobDto.  # noqa: E501


        :return: The release of this WrappedJobDto.  # noqa: E501
        :rtype: WrappedReleaseDto
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this WrappedJobDto.


        :param release: The release of this WrappedJobDto.  # noqa: E501
        :type: WrappedReleaseDto
        """

        self._release = release

    @property
    def input_arguments(self):
        """Gets the input_arguments of this WrappedJobDto.  # noqa: E501

        Input parameters in JSON format to be passed to job execution  # noqa: E501

        :return: The input_arguments of this WrappedJobDto.  # noqa: E501
        :rtype: object
        """
        return self._input_arguments

    @input_arguments.setter
    def input_arguments(self, input_arguments):
        """Sets the input_arguments of this WrappedJobDto.

        Input parameters in JSON format to be passed to job execution  # noqa: E501

        :param input_arguments: The input_arguments of this WrappedJobDto.  # noqa: E501
        :type: object
        """

        self._input_arguments = input_arguments

    @property
    def output_arguments(self):
        """Gets the output_arguments of this WrappedJobDto.  # noqa: E501

        Output parameters in JSON format resulted from job execution  # noqa: E501

        :return: The output_arguments of this WrappedJobDto.  # noqa: E501
        :rtype: object
        """
        return self._output_arguments

    @output_arguments.setter
    def output_arguments(self, output_arguments):
        """Sets the output_arguments of this WrappedJobDto.

        Output parameters in JSON format resulted from job execution  # noqa: E501

        :param output_arguments: The output_arguments of this WrappedJobDto.  # noqa: E501
        :type: object
        """

        self._output_arguments = output_arguments

    @property
    def runtime_type(self):
        """Gets the runtime_type of this WrappedJobDto.  # noqa: E501

        The type of license used to run the job  # noqa: E501

        :return: The runtime_type of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """Sets the runtime_type of this WrappedJobDto.

        The type of license used to run the job  # noqa: E501

        :param runtime_type: The runtime_type of this WrappedJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NonProduction", "Attended", "Unattended", "Development", "Studio", "RpaDeveloper", "StudioX", "CitizenDeveloper", "Headless", "StudioPro", "RpaDeveloperPro", "TestAutomation", "AutomationCloud", "Serverless", "AutomationKit", "ServerlessTestAutomation", "AutomationCloudTestAutomation", "AttendedStudioWeb"]  # noqa: E501
        if (self._configuration.client_side_validation and
                runtime_type not in allowed_values):
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    @property
    def process_type(self):
        """Gets the process_type of this WrappedJobDto.  # noqa: E501

        The type of process  # noqa: E501

        :return: The process_type of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this WrappedJobDto.

        The type of process  # noqa: E501

        :param process_type: The process_type of this WrappedJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Undefined", "Process", "TestAutomationProcess"]  # noqa: E501
        if (self._configuration.client_side_validation and
                process_type not in allowed_values):
            raise ValueError(
                "Invalid value for `process_type` ({0}), must be one of {1}"  # noqa: E501
                .format(process_type, allowed_values)
            )

        self._process_type = process_type

    @property
    def specific_priority_value(self):
        """Gets the specific_priority_value of this WrappedJobDto.  # noqa: E501

        The priority for a job  # noqa: E501

        :return: The specific_priority_value of this WrappedJobDto.  # noqa: E501
        :rtype: int
        """
        return self._specific_priority_value

    @specific_priority_value.setter
    def specific_priority_value(self, specific_priority_value):
        """Sets the specific_priority_value of this WrappedJobDto.

        The priority for a job  # noqa: E501

        :param specific_priority_value: The specific_priority_value of this WrappedJobDto.  # noqa: E501
        :type: int
        """

        self._specific_priority_value = specific_priority_value

    @property
    def project_key(self):
        """Gets the project_key of this WrappedJobDto.  # noqa: E501

        The project key which the job is part of  # noqa: E501

        :return: The project_key of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this WrappedJobDto.

        The project key which the job is part of  # noqa: E501

        :param project_key: The project_key of this WrappedJobDto.  # noqa: E501
        :type: str
        """

        self._project_key = project_key

    @property
    def parent_operation_id(self):
        """Gets the parent_operation_id of this WrappedJobDto.  # noqa: E501

        The operation id which created the job  # noqa: E501

        :return: The parent_operation_id of this WrappedJobDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_operation_id

    @parent_operation_id.setter
    def parent_operation_id(self, parent_operation_id):
        """Sets the parent_operation_id of this WrappedJobDto.

        The operation id which created the job  # noqa: E501

        :param parent_operation_id: The parent_operation_id of this WrappedJobDto.  # noqa: E501
        :type: str
        """

        self._parent_operation_id = parent_operation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WrappedJobDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WrappedJobDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WrappedJobDto):
            return True

        return self.to_dict() != other.to_dict()
