# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uipath_orchestrator_rest.api_client import ApiClient


class TestAutomationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def test_automation_cancel_test_case_execution(self, **kwargs):  # noqa: E501
        """Cancels the specified test case execution.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Edit.  Responses:  202 Accepted  403 If the caller doesn't have permissions to cancel a test set execution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_cancel_test_case_execution(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_case_execution_id: Id for the test case execution to be canceled
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_cancel_test_case_execution_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_cancel_test_case_execution_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_cancel_test_case_execution_with_http_info(self, **kwargs):  # noqa: E501
        """Cancels the specified test case execution.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Edit.  Responses:  202 Accepted  403 If the caller doesn't have permissions to cancel a test set execution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_cancel_test_case_execution_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_case_execution_id: Id for the test case execution to be canceled
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_case_execution_id', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_cancel_test_case_execution" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_case_execution_id' in params:
            query_params.append(('testCaseExecutionId', params['test_case_execution_id']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/CancelTestCaseExecution', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_cancel_test_set_execution(self, **kwargs):  # noqa: E501
        """Cancels the specified test set execution.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Edit.  Responses:  202 Accepted  403 If the caller doesn't have permissions to cancel a test set execution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_cancel_test_set_execution(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_set_execution_id: Id for the test set execution to be canceled
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_cancel_test_set_execution_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_cancel_test_set_execution_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_cancel_test_set_execution_with_http_info(self, **kwargs):  # noqa: E501
        """Cancels the specified test set execution.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Edit.  Responses:  202 Accepted  403 If the caller doesn't have permissions to cancel a test set execution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_cancel_test_set_execution_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_set_execution_id: Id for the test set execution to be canceled
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_set_execution_id', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_cancel_test_set_execution" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_set_execution_id' in params:
            query_params.append(('testSetExecutionId', params['test_set_execution_id']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/CancelTestSetExecution', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_create_test_set_for_release_version(self, **kwargs):  # noqa: E501
        """This will create a test set with source type API.This endpoint it is supposed to be used by API integration.  # noqa: E501

        OAuth required scopes: OR.TestSets or OR.TestSets.Write.  Required permissions: TestSets.Create.  Responses:  201 Created returns test set Id  403 If the caller doesn't have permissions to create a test set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_create_test_set_for_release_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildTestSetRequestMessage body:
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_create_test_set_for_release_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_create_test_set_for_release_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_create_test_set_for_release_version_with_http_info(self, **kwargs):  # noqa: E501
        """This will create a test set with source type API.This endpoint it is supposed to be used by API integration.  # noqa: E501

        OAuth required scopes: OR.TestSets or OR.TestSets.Write.  Required permissions: TestSets.Create.  Responses:  201 Created returns test set Id  403 If the caller doesn't have permissions to create a test set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_create_test_set_for_release_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildTestSetRequestMessage body:
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_create_test_set_for_release_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/CreateTestSetForReleaseVersion', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_get_assertion_screenshot(self, **kwargs):  # noqa: E501
        """Get the screenshot for the specified test case assertion.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If the test case assertion is not found or the screenshot storage location is not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_assertion_screenshot(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_case_assertion_id: Id of the test case assertion
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_get_assertion_screenshot_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_get_assertion_screenshot_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_get_assertion_screenshot_with_http_info(self, **kwargs):  # noqa: E501
        """Get the screenshot for the specified test case assertion.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If the test case assertion is not found or the screenshot storage location is not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_assertion_screenshot_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_case_assertion_id: Id of the test case assertion
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_case_assertion_id', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_get_assertion_screenshot" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_case_assertion_id' in params:
            query_params.append(('testCaseAssertionId', params['test_case_assertion_id']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/GetAssertionScreenshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_get_package_info_by_test_case_unique_id(self, **kwargs):  # noqa: E501
        """Get the package identifier and the latest version for the specified test case.  # noqa: E501

        OAuth required scopes: OR.Execution or OR.Execution.Read.  Requires authentication.  Responses:  200 OK  403 If the caller doesn't have permissions to retrieve packages  404 If there is no test case with the specified UniqueId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_package_info_by_test_case_unique_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_case_unique_id:
        :param str package_identifier:
        :return: TestPackageInfoDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_get_package_info_by_test_case_unique_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_get_package_info_by_test_case_unique_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_get_package_info_by_test_case_unique_id_with_http_info(self, **kwargs):  # noqa: E501
        """Get the package identifier and the latest version for the specified test case.  # noqa: E501

        OAuth required scopes: OR.Execution or OR.Execution.Read.  Requires authentication.  Responses:  200 OK  403 If the caller doesn't have permissions to retrieve packages  404 If there is no test case with the specified UniqueId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_package_info_by_test_case_unique_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_case_unique_id:
        :param str package_identifier:
        :return: TestPackageInfoDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_case_unique_id', 'package_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_get_package_info_by_test_case_unique_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_case_unique_id' in params:
            query_params.append(('testCaseUniqueId', params['test_case_unique_id']))  # noqa: E501
        if 'package_identifier' in params:
            query_params.append(('packageIdentifier', params['package_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/GetPackageInfoByTestCaseUniqueId', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestPackageInfoDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_get_releases_for_package_version(self, **kwargs):  # noqa: E501
        """This will list all the processes filtered by package identifier and version cross-folder when no current folder is sent by header.  # noqa: E501

        OAuth required scopes: OR.Execution or OR.Execution.Read.  Required permissions: Processes.View.  Responses:  200 OK  404 If there is no release for the specified package identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_releases_for_package_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_identifier: 
        :param str version: 
        :param list[str] mandatory_permissions: If in a cross-folder scenario, these represent the additional permissions              required in the folders the data is retrieved from; all permissions in this set must be met
        :param list[str] at_least_one_permissions: If in a cross-folder scenario, these represent the additional permissions              required in the folders the data is retrieved from; at least one permission in this set must be met
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: list[TestReleaseVersionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_get_releases_for_package_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_get_releases_for_package_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_get_releases_for_package_version_with_http_info(self, **kwargs):  # noqa: E501
        """This will list all the processes filtered by package identifier and version cross-folder when no current folder is sent by header.  # noqa: E501

        OAuth required scopes: OR.Execution or OR.Execution.Read.  Required permissions: Processes.View.  Responses:  200 OK  404 If there is no release for the specified package identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_releases_for_package_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_identifier: 
        :param str version: 
        :param list[str] mandatory_permissions: If in a cross-folder scenario, these represent the additional permissions              required in the folders the data is retrieved from; all permissions in this set must be met
        :param list[str] at_least_one_permissions: If in a cross-folder scenario, these represent the additional permissions              required in the folders the data is retrieved from; at least one permission in this set must be met
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: list[TestReleaseVersionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_identifier', 'version', 'mandatory_permissions', 'at_least_one_permissions', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_get_releases_for_package_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'package_identifier' in params:
            query_params.append(('packageIdentifier', params['package_identifier']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'mandatory_permissions' in params:
            query_params.append(('mandatoryPermissions', params['mandatory_permissions']))  # noqa: E501
            collection_formats['mandatoryPermissions'] = 'multi'  # noqa: E501
        if 'at_least_one_permissions' in params:
            query_params.append(('atLeastOnePermissions', params['at_least_one_permissions']))  # noqa: E501
            collection_formats['atLeastOnePermissions'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/GetReleasesForPackageVersion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestReleaseVersionDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_get_test_case_execution_attachment(self, **kwargs):  # noqa: E501
        """Get the attachment for the specified test case execution attachment.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If the test case execution attachment is not found or the storage location is not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_test_case_execution_attachment(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_case_execution_attachment_id: Id of the test case execution attachment
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_get_test_case_execution_attachment_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_get_test_case_execution_attachment_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_get_test_case_execution_attachment_with_http_info(self, **kwargs):  # noqa: E501
        """Get the attachment for the specified test case execution attachment.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If the test case execution attachment is not found or the storage location is not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_test_case_execution_attachment_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_case_execution_attachment_id: Id of the test case execution attachment
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_case_execution_attachment_id', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_get_test_case_execution_attachment" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_case_execution_attachment_id' in params:
            query_params.append(('testCaseExecutionAttachmentId', params['test_case_execution_attachment_id']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/GetTestCaseExecutionAttachment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_get_test_case_execution_attachments(self, **kwargs):  # noqa: E501
        """This will list all test case execution attachments filtered by identifier and tags  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If there is no test case execution for the specified identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_test_case_execution_attachments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestCaseExecutionAttachmentFilterDto body: 
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: list[TestCaseExecutionAttachmentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_get_test_case_execution_attachments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_get_test_case_execution_attachments_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_get_test_case_execution_attachments_with_http_info(self, **kwargs):  # noqa: E501
        """This will list all test case execution attachments filtered by identifier and tags  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If there is no test case execution for the specified identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_test_case_execution_attachments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestCaseExecutionAttachmentFilterDto body: 
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: list[TestCaseExecutionAttachmentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_get_test_case_execution_attachments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/GetTestCaseExecutionAttachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestCaseExecutionAttachmentDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_get_test_set_execution_attachment(self, **kwargs):  # noqa: E501
        """Get the attachment for the specified test set execution attachment.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If the test set execution attachment is not found or the storage location is not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_test_set_execution_attachment(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_set_execution_attachment_id: Id of the test set execution attachment
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_get_test_set_execution_attachment_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_get_test_set_execution_attachment_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_get_test_set_execution_attachment_with_http_info(self, **kwargs):  # noqa: E501
        """Get the attachment for the specified test set execution attachment.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If the test set execution attachment is not found or the storage location is not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_test_set_execution_attachment_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_set_execution_attachment_id: Id of the test set execution attachment
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_set_execution_attachment_id', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_get_test_set_execution_attachment" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_set_execution_attachment_id' in params:
            query_params.append(('testSetExecutionAttachmentId', params['test_set_execution_attachment_id']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/GetTestSetExecutionAttachment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_get_test_set_execution_attachments(self, **kwargs):  # noqa: E501
        """This will list all test set execution attachments filtered by identifier and tags  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If there is no test set execution for the specified identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_test_set_execution_attachments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestSetExecutionAttachmentFilterDto body: 
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: list[TestSetExecutionAttachmentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_get_test_set_execution_attachments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_get_test_set_execution_attachments_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_get_test_set_execution_attachments_with_http_info(self, **kwargs):  # noqa: E501
        """This will list all test set execution attachments filtered by identifier and tags  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.View.  Responses:  200 OK  404 If there is no test set execution for the specified identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_get_test_set_execution_attachments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestSetExecutionAttachmentFilterDto body: 
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: list[TestSetExecutionAttachmentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_get_test_set_execution_attachments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/GetTestSetExecutionAttachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestSetExecutionAttachmentDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_reexecute_test_cases(self, **kwargs):  # noqa: E501
        """Re-execute the specified test case executions within the same test set execution.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Create.  Responses:  200 OK  403 If the caller doesn't have permissions to execute test sets  404 If one or more test cases were not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_reexecute_test_cases(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReexecuteTestCasesOptionsDto body: A list of test case executions with corresponding input arguments and optional RobotId and MachineSessionId fields
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: list[TestCaseExecutionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_reexecute_test_cases_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_reexecute_test_cases_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_reexecute_test_cases_with_http_info(self, **kwargs):  # noqa: E501
        """Re-execute the specified test case executions within the same test set execution.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Create.  Responses:  200 OK  403 If the caller doesn't have permissions to execute test sets  404 If one or more test cases were not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_reexecute_test_cases_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReexecuteTestCasesOptionsDto body: A list of test case executions with corresponding input arguments and optional RobotId and MachineSessionId fields
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: list[TestCaseExecutionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_reexecute_test_cases" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/ReexecuteTestCases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestCaseExecutionDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_start_test_set_execution(self, **kwargs):  # noqa: E501
        """Start a test set execution.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Create.  Responses:  200 OK returns test set execution Id  403 If the caller doesn't have permissions to execute a test set  404 If the test set was not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_start_test_set_execution(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_set_id:
        :param str test_set_key:
        :param str trigger_type: Specifies how was the execution triggered
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_start_test_set_execution_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_start_test_set_execution_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_start_test_set_execution_with_http_info(self, **kwargs):  # noqa: E501
        """Start a test set execution.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Create.  Responses:  200 OK returns test set execution Id  403 If the caller doesn't have permissions to execute a test set  404 If the test set was not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_start_test_set_execution_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int test_set_id:
        :param str test_set_key:
        :param str trigger_type: Specifies how was the execution triggered
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_set_id', 'test_set_key', 'trigger_type', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_start_test_set_execution" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_set_id' in params:
            query_params.append(('testSetId', params['test_set_id']))  # noqa: E501
        if 'test_set_key' in params:
            query_params.append(('testSetKey', params['test_set_key']))  # noqa: E501
        if 'trigger_type' in params:
            query_params.append(('triggerType', params['trigger_type']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/StartTestSetExecution', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_automation_start_test_set_execution_with_options(self, **kwargs):  # noqa: E501
        """Start a test set execution with additional options.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Create.  Responses:  200 OK returns test set execution Id  403 If the caller doesn't have permissions to execute a test set  404 If the test set was not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_start_test_set_execution_with_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestSetExecutionOptionsDto body: Provides options to set the BatchExecutionKey and TriggerType and override the input parameters for specific test cases
        :param int test_set_id:
        :param str test_set_key:
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_automation_start_test_set_execution_with_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_automation_start_test_set_execution_with_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_automation_start_test_set_execution_with_options_with_http_info(self, **kwargs):  # noqa: E501
        """Start a test set execution with additional options.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.  Required permissions: TestSetExecutions.Create.  Responses:  200 OK returns test set execution Id  403 If the caller doesn't have permissions to execute a test set  404 If the test set was not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_automation_start_test_set_execution_with_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestSetExecutionOptionsDto body: Provides options to set the BatchExecutionKey and TriggerType and override the input parameters for specific test cases
        :param int test_set_id:
        :param str test_set_key:
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_set_id', 'test_set_key', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_automation_start_test_set_execution_with_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_set_id' in params:
            query_params.append(('testSetId', params['test_set_id']))  # noqa: E501
        if 'test_set_key' in params:
            query_params.append(('testSetKey', params['test_set_key']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestAutomation/StartTestSetExecutionWithOptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
