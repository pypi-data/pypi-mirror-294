# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uipath_orchestrator_rest.api_client import ApiClient


class TestDataQueueActionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def test_data_queue_actions_add_item(self, **kwargs):  # noqa: E501
        """Add a new test data queue item  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Create.  Responses:  201 Returns the added test data queue item  403 If the caller doesn't have permissions to create test data queue items  409 If the test data queue item content violates the content JSON schema set on the queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_add_item(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueAddItemDto body: QueueName: the test data queue name; Content: the item content
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: TestDataQueueItemDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_data_queue_actions_add_item_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_data_queue_actions_add_item_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_data_queue_actions_add_item_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new test data queue item  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Create.  Responses:  201 Returns the added test data queue item  403 If the caller doesn't have permissions to create test data queue items  409 If the test data queue item content violates the content JSON schema set on the queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_add_item_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueAddItemDto body: QueueName: the test data queue name; Content: the item content
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: TestDataQueueItemDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_data_queue_actions_add_item" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestDataQueueActions/AddItem', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestDataQueueItemDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_data_queue_actions_bulk_add_items(self, **kwargs):  # noqa: E501
        """Bulk adds an array of data queue items  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Create.  Responses:  200 Returns the number of items added  403 If the caller doesn't have permissions to create test data queue items  409 If the test data queue items violates the content JSON schema set on the queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_bulk_add_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueBulkAddItemsDto body: QueueName: the test data queue name; Items: an array of item content
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_data_queue_actions_bulk_add_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_data_queue_actions_bulk_add_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_data_queue_actions_bulk_add_items_with_http_info(self, **kwargs):  # noqa: E501
        """Bulk adds an array of data queue items  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Create.  Responses:  200 Returns the number of items added  403 If the caller doesn't have permissions to create test data queue items  409 If the test data queue items violates the content JSON schema set on the queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_bulk_add_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueBulkAddItemsDto body: QueueName: the test data queue name; Items: an array of item content
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_data_queue_actions_bulk_add_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestDataQueueActions/BulkAddItems', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_data_queue_actions_delete_all_items(self, **kwargs):  # noqa: E501
        """Delete all items from a test data queue  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Delete.  Responses:  202 All items from the test data queue were scheduled for deletion  403 If the caller doesn't have permissions to delete test data queue items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_delete_all_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_name: The name of the test data queue
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_data_queue_actions_delete_all_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_data_queue_actions_delete_all_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_data_queue_actions_delete_all_items_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all items from a test data queue  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Delete.  Responses:  202 All items from the test data queue were scheduled for deletion  403 If the caller doesn't have permissions to delete test data queue items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_delete_all_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_name: The name of the test data queue
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_name', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_data_queue_actions_delete_all_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'queue_name' in params:
            query_params.append(('queueName', params['queue_name']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestDataQueueActions/DeleteAllItems', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_data_queue_actions_delete_items(self, **kwargs):  # noqa: E501
        """Delete specific test data queue items  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Delete.  Responses:  204 Deleted the test data queue items  403 If the caller doesn't have permissions to delete test data queue items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_delete_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The Ids of the test data queue items
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_data_queue_actions_delete_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_data_queue_actions_delete_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_data_queue_actions_delete_items_with_http_info(self, **kwargs):  # noqa: E501
        """Delete specific test data queue items  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Delete.  Responses:  204 Deleted the test data queue items  403 If the caller doesn't have permissions to delete test data queue items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_delete_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The Ids of the test data queue items
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_data_queue_actions_delete_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestDataQueueActions/DeleteItems', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_data_queue_actions_get_next_item(self, **kwargs):  # noqa: E501
        """Get the next unconsumed test data queue item  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.View.  Responses:  200 Returns the next unconsumed test data queue item  204 If there are no unconsumed test data queue items in the queue  403 If the caller doesn't have permissions to view test data queue items  404 If the test data queue does not exist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_get_next_item(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueGetNextItemDto body: QueueName:the test data queue name; SetConsumed: Whether to set the item's IsConsumed flag as true or false
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: TestDataQueueItemDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_data_queue_actions_get_next_item_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_data_queue_actions_get_next_item_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_data_queue_actions_get_next_item_with_http_info(self, **kwargs):  # noqa: E501
        """Get the next unconsumed test data queue item  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.View.  Responses:  200 Returns the next unconsumed test data queue item  204 If there are no unconsumed test data queue items in the queue  403 If the caller doesn't have permissions to view test data queue items  404 If the test data queue does not exist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_get_next_item_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueGetNextItemDto body: QueueName:the test data queue name; SetConsumed: Whether to set the item's IsConsumed flag as true or false
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: TestDataQueueItemDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_data_queue_actions_get_next_item" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestDataQueueActions/GetNextItem', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestDataQueueItemDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_data_queue_actions_set_all_items_consumed(self, **kwargs):  # noqa: E501
        """Set the IsConsumed flag for all items from a test data queue  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Edit.  Responses:  202 All items from the test data queue were scheduled for setting the IsConsumed flag  403 If the caller doesn't have permissions to edit test data queue items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_set_all_items_consumed(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueSetAllItemsConsumedDto body: QueueName: the name of the test data queue; IsConsumed: the value to be set on the items IsConsumed flag
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_data_queue_actions_set_all_items_consumed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_data_queue_actions_set_all_items_consumed_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_data_queue_actions_set_all_items_consumed_with_http_info(self, **kwargs):  # noqa: E501
        """Set the IsConsumed flag for all items from a test data queue  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Edit.  Responses:  202 All items from the test data queue were scheduled for setting the IsConsumed flag  403 If the caller doesn't have permissions to edit test data queue items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_set_all_items_consumed_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueSetAllItemsConsumedDto body: QueueName: the name of the test data queue; IsConsumed: the value to be set on the items IsConsumed flag
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_data_queue_actions_set_all_items_consumed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestDataQueueActions/SetAllItemsConsumed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_data_queue_actions_set_items_consumed(self, **kwargs):  # noqa: E501
        """Set the IsConsumed flag for specific test data queue items  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Edit.  Responses:  200 If the operation succeeded  403 If the caller doesn't have permissions to edit test data queue items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_set_items_consumed(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueSetItemsConsumedDto body: ItemIds: the list of item ids for which to set the IsConsumed flag; IsConsumed: the value to be set on the items IsConsumed flag
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_data_queue_actions_set_items_consumed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_data_queue_actions_set_items_consumed_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_data_queue_actions_set_items_consumed_with_http_info(self, **kwargs):  # noqa: E501
        """Set the IsConsumed flag for specific test data queue items  # noqa: E501

        OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.  Required permissions: TestDataQueueItems.Edit.  Responses:  200 If the operation succeeded  403 If the caller doesn't have permissions to edit test data queue items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_data_queue_actions_set_items_consumed_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestDataQueueSetItemsConsumedDto body: ItemIds: the list of item ids for which to set the IsConsumed flag; IsConsumed: the value to be set on the items IsConsumed flag
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_data_queue_actions_set_items_consumed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/TestDataQueueActions/SetItemsConsumed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
