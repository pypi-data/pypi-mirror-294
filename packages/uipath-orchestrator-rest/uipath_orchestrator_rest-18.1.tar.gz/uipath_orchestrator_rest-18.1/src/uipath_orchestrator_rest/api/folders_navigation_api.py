# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uipath_orchestrator_rest.api_client import ApiClient


class FoldersNavigationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def folders_navigation_get_all_folders_for_current_user(self, **kwargs):  # noqa: E501
        """Returns the folders the current user has access to.  The response will be a list of folders; the hierarchy can be reconstructed  using the ParentId properties. From the root to the folders the user has  actually been assigned to, the folders will be marked as non-selectable  and only the paths to the assigned-to folders will be included.  From the assigned-to folders down to the leaves, the nodes will be marked as  selectable and their children lists fully populated.  # noqa: E501

        OAuth authentication is not supported.  Requires authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folders_navigation_get_all_folders_for_current_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ExtendedFolderDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folders_navigation_get_all_folders_for_current_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.folders_navigation_get_all_folders_for_current_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def folders_navigation_get_all_folders_for_current_user_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the folders the current user has access to.  The response will be a list of folders; the hierarchy can be reconstructed  using the ParentId properties. From the root to the folders the user has  actually been assigned to, the folders will be marked as non-selectable  and only the paths to the assigned-to folders will be included.  From the assigned-to folders down to the leaves, the nodes will be marked as  selectable and their children lists fully populated.  # noqa: E501

        OAuth authentication is not supported.  Requires authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folders_navigation_get_all_folders_for_current_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ExtendedFolderDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folders_navigation_get_all_folders_for_current_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/FoldersNavigation/GetAllFoldersForCurrentUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExtendedFolderDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folders_navigation_get_all_roles_for_user(self, **kwargs):  # noqa: E501
        """Returns a page of the user-folder assignments for the input user, including the roles for each folder.  The response also includes the folders assigned to the directory groups of the user.  The distinction between the folders assigned directly to the user and the ones assigned to one of his groups  can be made via the User field of the response.  # noqa: E501

        OAuth authentication is not supported.  Required permissions: (Units.View - Gets roles from all folders) and (SubFolders.View - Gets roles only from folders where caller has SubFolders.View permission).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folders_navigation_get_all_roles_for_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: User name
        :param str type: 
        :param int skip: 
        :param int take: 
        :param str search_text: 
        :return: UserRoleAssignmentsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folders_navigation_get_all_roles_for_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.folders_navigation_get_all_roles_for_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def folders_navigation_get_all_roles_for_user_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a page of the user-folder assignments for the input user, including the roles for each folder.  The response also includes the folders assigned to the directory groups of the user.  The distinction between the folders assigned directly to the user and the ones assigned to one of his groups  can be made via the User field of the response.  # noqa: E501

        OAuth authentication is not supported.  Required permissions: (Units.View - Gets roles from all folders) and (SubFolders.View - Gets roles only from folders where caller has SubFolders.View permission).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folders_navigation_get_all_roles_for_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: User name
        :param str type: 
        :param int skip: 
        :param int take: 
        :param str search_text: 
        :return: UserRoleAssignmentsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'type', 'skip', 'take', 'search_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folders_navigation_get_all_roles_for_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('searchText', params['search_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/FoldersNavigation/GetAllRolesForUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserRoleAssignmentsDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folders_navigation_get_folder_navigation_context_for_current_user(self, **kwargs):  # noqa: E501
        """Returns a subset (paginated) of direct children for a given folder, which are accessible to the current user.  To ease a folder tree structure navigation design, the list of ancestors for the given folder is also returned.  # noqa: E501

        OAuth authentication is not supported.  Requires authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folders_navigation_get_folder_navigation_context_for_current_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param int folder_id:
        :return: FolderNavigationContextDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folders_navigation_get_folder_navigation_context_for_current_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.folders_navigation_get_folder_navigation_context_for_current_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def folders_navigation_get_folder_navigation_context_for_current_user_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a subset (paginated) of direct children for a given folder, which are accessible to the current user.  To ease a folder tree structure navigation design, the list of ancestors for the given folder is also returned.  # noqa: E501

        OAuth authentication is not supported.  Requires authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folders_navigation_get_folder_navigation_context_for_current_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param int folder_id:
        :return: FolderNavigationContextDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'take', 'folder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folders_navigation_get_folder_navigation_context_for_current_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'folder_id' in params:
            query_params.append(('folderId', params['folder_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/FoldersNavigation/GetFolderNavigationContextForCurrentUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FolderNavigationContextDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folders_navigation_get_folders_for_current_user(self, **kwargs):  # noqa: E501
        """Returns a filtered subset (paginated) of the folders the current user has access to.  # noqa: E501

        OAuth authentication is not supported.  Requires authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folders_navigation_get_folders_for_current_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param str search_text:
        :param list[str] folder_types:
        :return: PageResultDtoOfPathAwareFolderDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folders_navigation_get_folders_for_current_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.folders_navigation_get_folders_for_current_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def folders_navigation_get_folders_for_current_user_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a filtered subset (paginated) of the folders the current user has access to.  # noqa: E501

        OAuth authentication is not supported.  Requires authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folders_navigation_get_folders_for_current_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param str search_text:
        :param list[str] folder_types:
        :return: PageResultDtoOfPathAwareFolderDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'take', 'search_text', 'folder_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folders_navigation_get_folders_for_current_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('searchText', params['search_text']))  # noqa: E501
        if 'folder_types' in params:
            query_params.append(('folderTypes', params['folder_types']))  # noqa: E501
            collection_formats['folderTypes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/FoldersNavigation/GetFoldersForCurrentUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageResultDtoOfPathAwareFolderDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
