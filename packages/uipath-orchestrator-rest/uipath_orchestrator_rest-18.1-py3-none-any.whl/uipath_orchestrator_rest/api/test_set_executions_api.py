# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uipath_orchestrator_rest.api_client import ApiClient


class TestSetExecutionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def test_set_executions_get(self, **kwargs):  # noqa: E501
        """Returns a list of Test Set Executions cross-folder when no current folder is sent by header.  It will return Test Set Executions from folder where current user has TestSetExecutionsView.  If there is none, will return forbidden.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 Returns a list of Test Set Executions filtered with queryOptions  403 If the caller doesn't have permissions to view Test Set Executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_set_executions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] mandatory_permissions: If in a cross-folder scenario, these represent the additional permissions              required in the folders the data is retrieved from; all permissions in this set must be met
        :param list[str] at_least_one_permissions: If in a cross-folder scenario, these represent the additional permissions              required in the folders the data is retrieved from; at least one permission in this set must be met
        :param str expand: Indicates the related entities to be represented inline. The maximum depth is 2.
        :param str filter: Restricts the set of items returned. The maximum number of expressions is 100.
        :param str select: Limits the properties returned in the result.
        :param str orderby: Specifies the order in which items are returned. The maximum number of expressions is 5.
        :param int top: Limits the number of items returned from a collection. The maximum value is 1000.
        :param int skip: Excludes the specified number of items of the queried collection from the result.
        :param bool count: Indicates whether the total count of items within a collection are returned in the result.
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: ODataValueOfIEnumerableOfTestSetExecutionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_set_executions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_set_executions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_set_executions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of Test Set Executions cross-folder when no current folder is sent by header.  It will return Test Set Executions from folder where current user has TestSetExecutionsView.  If there is none, will return forbidden.  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 Returns a list of Test Set Executions filtered with queryOptions  403 If the caller doesn't have permissions to view Test Set Executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_set_executions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] mandatory_permissions: If in a cross-folder scenario, these represent the additional permissions              required in the folders the data is retrieved from; all permissions in this set must be met
        :param list[str] at_least_one_permissions: If in a cross-folder scenario, these represent the additional permissions              required in the folders the data is retrieved from; at least one permission in this set must be met
        :param str expand: Indicates the related entities to be represented inline. The maximum depth is 2.
        :param str filter: Restricts the set of items returned. The maximum number of expressions is 100.
        :param str select: Limits the properties returned in the result.
        :param str orderby: Specifies the order in which items are returned. The maximum number of expressions is 5.
        :param int top: Limits the number of items returned from a collection. The maximum value is 1000.
        :param int skip: Excludes the specified number of items of the queried collection from the result.
        :param bool count: Indicates whether the total count of items within a collection are returned in the result.
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: ODataValueOfIEnumerableOfTestSetExecutionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mandatory_permissions', 'at_least_one_permissions', 'expand', 'filter', 'select', 'orderby', 'top', 'skip', 'count', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_set_executions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mandatory_permissions' in params:
            query_params.append(('mandatoryPermissions', params['mandatory_permissions']))  # noqa: E501
            collection_formats['mandatoryPermissions'] = 'multi'  # noqa: E501
        if 'at_least_one_permissions' in params:
            query_params.append(('atLeastOnePermissions', params['at_least_one_permissions']))  # noqa: E501
            collection_formats['atLeastOnePermissions'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'count' in params:
            query_params.append(('$count', params['count']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/odata/TestSetExecutions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ODataValueOfIEnumerableOfTestSetExecutionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_set_executions_get_by_id(self, key, **kwargs):  # noqa: E501
        """Return a specific Test Set Execution identified by key  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 Return a specific Test Set Execution identified by key  403 If the caller doesn't have permissions to view Test Set Executions  404 It the test set execution is not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_set_executions_get_by_id(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key:  (required)
        :param str expand: Indicates the related entities to be represented inline. The maximum depth is 2.
        :param str select: Limits the properties returned in the result.
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: TestSetExecutionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_set_executions_get_by_id_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.test_set_executions_get_by_id_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def test_set_executions_get_by_id_with_http_info(self, key, **kwargs):  # noqa: E501
        """Return a specific Test Set Execution identified by key  # noqa: E501

        OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.  Required permissions: TestSetExecutions.View.  Responses:  200 Return a specific Test Set Execution identified by key  403 If the caller doesn't have permissions to view Test Set Executions  404 It the test set execution is not found  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_set_executions_get_by_id_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int key:  (required)
        :param str expand: Indicates the related entities to be represented inline. The maximum depth is 2.
        :param str select: Limits the properties returned in the result.
        :param int x_uipath_organization_unit_id: Folder/OrganizationUnit Id
        :return: TestSetExecutionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'expand', 'select', 'x_uipath_organization_unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_set_executions_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `test_set_executions_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_uipath_organization_unit_id' in params:
            header_params['X-UIPATH-OrganizationUnitId'] = params['x_uipath_organization_unit_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/odata/TestSetExecutions({key})', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestSetExecutionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
