# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class HostAvailabilityDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_connect': 'bool',
        'has_bad_ssl': 'bool',
        'connection_error': 'str'
    }

    attribute_map = {
        'can_connect': 'canConnect',
        'has_bad_ssl': 'hasBadSsl',
        'connection_error': 'connectionError'
    }

    def __init__(self, can_connect=None, has_bad_ssl=None, connection_error=None, _configuration=None):  # noqa: E501
        """HostAvailabilityDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._can_connect = None
        self._has_bad_ssl = None
        self._connection_error = None
        self.discriminator = None

        if can_connect is not None:
            self.can_connect = can_connect
        if has_bad_ssl is not None:
            self.has_bad_ssl = has_bad_ssl
        if connection_error is not None:
            self.connection_error = connection_error

    @property
    def can_connect(self):
        """Gets the can_connect of this HostAvailabilityDto.  # noqa: E501

        Target host is reachable and a succesful TCP connection could be made on the specified port  # noqa: E501

        :return: The can_connect of this HostAvailabilityDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_connect

    @can_connect.setter
    def can_connect(self, can_connect):
        """Sets the can_connect of this HostAvailabilityDto.

        Target host is reachable and a succesful TCP connection could be made on the specified port  # noqa: E501

        :param can_connect: The can_connect of this HostAvailabilityDto.  # noqa: E501
        :type: bool
        """

        self._can_connect = can_connect

    @property
    def has_bad_ssl(self):
        """Gets the has_bad_ssl of this HostAvailabilityDto.  # noqa: E501

        Any error occurred during SSL/TLS authentication.  Includes bad certificates (name mismatch, expired certificates), unsupported protocol versions or cyphersuites  # noqa: E501

        :return: The has_bad_ssl of this HostAvailabilityDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_bad_ssl

    @has_bad_ssl.setter
    def has_bad_ssl(self, has_bad_ssl):
        """Sets the has_bad_ssl of this HostAvailabilityDto.

        Any error occurred during SSL/TLS authentication.  Includes bad certificates (name mismatch, expired certificates), unsupported protocol versions or cyphersuites  # noqa: E501

        :param has_bad_ssl: The has_bad_ssl of this HostAvailabilityDto.  # noqa: E501
        :type: bool
        """

        self._has_bad_ssl = has_bad_ssl

    @property
    def connection_error(self):
        """Gets the connection_error of this HostAvailabilityDto.  # noqa: E501

        An error code that further describes the type of connection error.  Does not include TLS/SSL errors  # noqa: E501

        :return: The connection_error of this HostAvailabilityDto.  # noqa: E501
        :rtype: str
        """
        return self._connection_error

    @connection_error.setter
    def connection_error(self, connection_error):
        """Sets the connection_error of this HostAvailabilityDto.

        An error code that further describes the type of connection error.  Does not include TLS/SSL errors  # noqa: E501

        :param connection_error: The connection_error of this HostAvailabilityDto.  # noqa: E501
        :type: str
        """

        self._connection_error = connection_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostAvailabilityDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostAvailabilityDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostAvailabilityDto):
            return True

        return self.to_dict() != other.to_dict()
