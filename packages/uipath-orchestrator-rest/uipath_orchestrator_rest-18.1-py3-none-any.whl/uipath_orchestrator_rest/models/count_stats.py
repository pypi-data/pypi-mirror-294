# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class CountStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'count': 'int',
        'has_permissions': 'bool'
    }

    attribute_map = {
        'title': 'title',
        'count': 'count',
        'has_permissions': 'hasPermissions'
    }

    def __init__(self, title=None, count=None, has_permissions=None, _configuration=None):  # noqa: E501
        """CountStats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._count = None
        self._has_permissions = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if count is not None:
            self.count = count
        if has_permissions is not None:
            self.has_permissions = has_permissions

    @property
    def title(self):
        """Gets the title of this CountStats.  # noqa: E501


        :return: The title of this CountStats.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CountStats.


        :param title: The title of this CountStats.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def count(self):
        """Gets the count of this CountStats.  # noqa: E501


        :return: The count of this CountStats.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CountStats.


        :param count: The count of this CountStats.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def has_permissions(self):
        """Gets the has_permissions of this CountStats.  # noqa: E501

        Gives a more descriptive result when getting stats through the API (as opposed to -1 for the count)  used only when serializing the count stats  # noqa: E501

        :return: The has_permissions of this CountStats.  # noqa: E501
        :rtype: bool
        """
        return self._has_permissions

    @has_permissions.setter
    def has_permissions(self, has_permissions):
        """Sets the has_permissions of this CountStats.

        Gives a more descriptive result when getting stats through the API (as opposed to -1 for the count)  used only when serializing the count stats  # noqa: E501

        :param has_permissions: The has_permissions of this CountStats.  # noqa: E501
        :type: bool
        """

        self._has_permissions = has_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CountStats):
            return True

        return self.to_dict() != other.to_dict()
