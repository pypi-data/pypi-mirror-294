# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class BucketFoldersShareDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_ids': 'list[int]',
        'to_add_folder_ids': 'list[int]',
        'to_remove_folder_ids': 'list[int]'
    }

    attribute_map = {
        'bucket_ids': 'BucketIds',
        'to_add_folder_ids': 'ToAddFolderIds',
        'to_remove_folder_ids': 'ToRemoveFolderIds'
    }

    def __init__(self, bucket_ids=None, to_add_folder_ids=None, to_remove_folder_ids=None, _configuration=None):  # noqa: E501
        """BucketFoldersShareDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bucket_ids = None
        self._to_add_folder_ids = None
        self._to_remove_folder_ids = None
        self.discriminator = None

        if bucket_ids is not None:
            self.bucket_ids = bucket_ids
        if to_add_folder_ids is not None:
            self.to_add_folder_ids = to_add_folder_ids
        if to_remove_folder_ids is not None:
            self.to_remove_folder_ids = to_remove_folder_ids

    @property
    def bucket_ids(self):
        """Gets the bucket_ids of this BucketFoldersShareDto.  # noqa: E501


        :return: The bucket_ids of this BucketFoldersShareDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._bucket_ids

    @bucket_ids.setter
    def bucket_ids(self, bucket_ids):
        """Sets the bucket_ids of this BucketFoldersShareDto.


        :param bucket_ids: The bucket_ids of this BucketFoldersShareDto.  # noqa: E501
        :type: list[int]
        """

        self._bucket_ids = bucket_ids

    @property
    def to_add_folder_ids(self):
        """Gets the to_add_folder_ids of this BucketFoldersShareDto.  # noqa: E501


        :return: The to_add_folder_ids of this BucketFoldersShareDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._to_add_folder_ids

    @to_add_folder_ids.setter
    def to_add_folder_ids(self, to_add_folder_ids):
        """Sets the to_add_folder_ids of this BucketFoldersShareDto.


        :param to_add_folder_ids: The to_add_folder_ids of this BucketFoldersShareDto.  # noqa: E501
        :type: list[int]
        """

        self._to_add_folder_ids = to_add_folder_ids

    @property
    def to_remove_folder_ids(self):
        """Gets the to_remove_folder_ids of this BucketFoldersShareDto.  # noqa: E501


        :return: The to_remove_folder_ids of this BucketFoldersShareDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._to_remove_folder_ids

    @to_remove_folder_ids.setter
    def to_remove_folder_ids(self, to_remove_folder_ids):
        """Sets the to_remove_folder_ids of this BucketFoldersShareDto.


        :param to_remove_folder_ids: The to_remove_folder_ids of this BucketFoldersShareDto.  # noqa: E501
        :type: list[int]
        """

        self._to_remove_folder_ids = to_remove_folder_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BucketFoldersShareDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BucketFoldersShareDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BucketFoldersShareDto):
            return True

        return self.to_dict() != other.to_dict()
