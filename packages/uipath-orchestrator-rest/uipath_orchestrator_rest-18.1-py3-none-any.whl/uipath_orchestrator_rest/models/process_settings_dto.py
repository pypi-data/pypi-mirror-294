# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class ProcessSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_recording_enabled': 'bool',
        'duration': 'int',
        'frequency': 'int',
        'quality': 'int',
        'auto_start_process': 'bool',
        'always_running': 'bool'
    }

    attribute_map = {
        'error_recording_enabled': 'ErrorRecordingEnabled',
        'duration': 'Duration',
        'frequency': 'Frequency',
        'quality': 'Quality',
        'auto_start_process': 'AutoStartProcess',
        'always_running': 'AlwaysRunning'
    }

    def __init__(self, error_recording_enabled=None, duration=None, frequency=None, quality=None, auto_start_process=None, always_running=None, _configuration=None):  # noqa: E501
        """ProcessSettingsDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error_recording_enabled = None
        self._duration = None
        self._frequency = None
        self._quality = None
        self._auto_start_process = None
        self._always_running = None
        self.discriminator = None

        if error_recording_enabled is not None:
            self.error_recording_enabled = error_recording_enabled
        if duration is not None:
            self.duration = duration
        if frequency is not None:
            self.frequency = frequency
        if quality is not None:
            self.quality = quality
        if auto_start_process is not None:
            self.auto_start_process = auto_start_process
        if always_running is not None:
            self.always_running = always_running

    @property
    def error_recording_enabled(self):
        """Gets the error_recording_enabled of this ProcessSettingsDto.  # noqa: E501


        :return: The error_recording_enabled of this ProcessSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._error_recording_enabled

    @error_recording_enabled.setter
    def error_recording_enabled(self, error_recording_enabled):
        """Sets the error_recording_enabled of this ProcessSettingsDto.


        :param error_recording_enabled: The error_recording_enabled of this ProcessSettingsDto.  # noqa: E501
        :type: bool
        """

        self._error_recording_enabled = error_recording_enabled

    @property
    def duration(self):
        """Gets the duration of this ProcessSettingsDto.  # noqa: E501


        :return: The duration of this ProcessSettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ProcessSettingsDto.


        :param duration: The duration of this ProcessSettingsDto.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def frequency(self):
        """Gets the frequency of this ProcessSettingsDto.  # noqa: E501


        :return: The frequency of this ProcessSettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ProcessSettingsDto.


        :param frequency: The frequency of this ProcessSettingsDto.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def quality(self):
        """Gets the quality of this ProcessSettingsDto.  # noqa: E501


        :return: The quality of this ProcessSettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this ProcessSettingsDto.


        :param quality: The quality of this ProcessSettingsDto.  # noqa: E501
        :type: int
        """

        self._quality = quality

    @property
    def auto_start_process(self):
        """Gets the auto_start_process of this ProcessSettingsDto.  # noqa: E501


        :return: The auto_start_process of this ProcessSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_start_process

    @auto_start_process.setter
    def auto_start_process(self, auto_start_process):
        """Sets the auto_start_process of this ProcessSettingsDto.


        :param auto_start_process: The auto_start_process of this ProcessSettingsDto.  # noqa: E501
        :type: bool
        """

        self._auto_start_process = auto_start_process

    @property
    def always_running(self):
        """Gets the always_running of this ProcessSettingsDto.  # noqa: E501


        :return: The always_running of this ProcessSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._always_running

    @always_running.setter
    def always_running(self, always_running):
        """Sets the always_running of this ProcessSettingsDto.


        :param always_running: The always_running of this ProcessSettingsDto.  # noqa: E501
        :type: bool
        """

        self._always_running = always_running

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessSettingsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProcessSettingsDto):
            return True

        return self.to_dict() != other.to_dict()
