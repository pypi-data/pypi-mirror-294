# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class QueueRetentionSettingDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'queue_definition_id': 'int',
        'action': 'str',
        'period': 'int',
        'bucket_id': 'int'
    }

    attribute_map = {
        'queue_definition_id': 'QueueDefinitionId',
        'action': 'Action',
        'period': 'Period',
        'bucket_id': 'BucketId'
    }

    def __init__(self, queue_definition_id=None, action=None, period=None, bucket_id=None, _configuration=None):  # noqa: E501
        """QueueRetentionSettingDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._queue_definition_id = None
        self._action = None
        self._period = None
        self._bucket_id = None
        self.discriminator = None

        if queue_definition_id is not None:
            self.queue_definition_id = queue_definition_id
        if action is not None:
            self.action = action
        if period is not None:
            self.period = period
        if bucket_id is not None:
            self.bucket_id = bucket_id

    @property
    def queue_definition_id(self):
        """Gets the queue_definition_id of this QueueRetentionSettingDto.  # noqa: E501


        :return: The queue_definition_id of this QueueRetentionSettingDto.  # noqa: E501
        :rtype: int
        """
        return self._queue_definition_id

    @queue_definition_id.setter
    def queue_definition_id(self, queue_definition_id):
        """Sets the queue_definition_id of this QueueRetentionSettingDto.


        :param queue_definition_id: The queue_definition_id of this QueueRetentionSettingDto.  # noqa: E501
        :type: int
        """

        self._queue_definition_id = queue_definition_id

    @property
    def action(self):
        """Gets the action of this QueueRetentionSettingDto.  # noqa: E501

        Action cannot be None for Cloud.  # noqa: E501

        :return: The action of this QueueRetentionSettingDto.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this QueueRetentionSettingDto.

        Action cannot be None for Cloud.  # noqa: E501

        :param action: The action of this QueueRetentionSettingDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Delete", "Archive", "None"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def period(self):
        """Gets the period of this QueueRetentionSettingDto.  # noqa: E501


        :return: The period of this QueueRetentionSettingDto.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this QueueRetentionSettingDto.


        :param period: The period of this QueueRetentionSettingDto.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def bucket_id(self):
        """Gets the bucket_id of this QueueRetentionSettingDto.  # noqa: E501


        :return: The bucket_id of this QueueRetentionSettingDto.  # noqa: E501
        :rtype: int
        """
        return self._bucket_id

    @bucket_id.setter
    def bucket_id(self, bucket_id):
        """Sets the bucket_id of this QueueRetentionSettingDto.


        :param bucket_id: The bucket_id of this QueueRetentionSettingDto.  # noqa: E501
        :type: int
        """

        self._bucket_id = bucket_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueRetentionSettingDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueRetentionSettingDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueRetentionSettingDto):
            return True

        return self.to_dict() != other.to_dict()
