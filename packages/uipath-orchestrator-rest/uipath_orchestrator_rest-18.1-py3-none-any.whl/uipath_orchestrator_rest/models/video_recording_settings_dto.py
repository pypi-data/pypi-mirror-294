# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class VideoRecordingSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'video_recording_type': 'str',
        'queue_item_video_recording_type': 'str',
        'max_duration_seconds': 'int'
    }

    attribute_map = {
        'video_recording_type': 'VideoRecordingType',
        'queue_item_video_recording_type': 'QueueItemVideoRecordingType',
        'max_duration_seconds': 'MaxDurationSeconds'
    }

    def __init__(self, video_recording_type='None', queue_item_video_recording_type='None', max_duration_seconds=None, _configuration=None):  # noqa: E501
        """VideoRecordingSettingsDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._video_recording_type = None
        self._queue_item_video_recording_type = None
        self._max_duration_seconds = None
        self.discriminator = None

        if video_recording_type is not None:
            self.video_recording_type = video_recording_type
        if queue_item_video_recording_type is not None:
            self.queue_item_video_recording_type = queue_item_video_recording_type
        if max_duration_seconds is not None:
            self.max_duration_seconds = max_duration_seconds

    @property
    def video_recording_type(self):
        """Gets the video_recording_type of this VideoRecordingSettingsDto.  # noqa: E501


        :return: The video_recording_type of this VideoRecordingSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._video_recording_type

    @video_recording_type.setter
    def video_recording_type(self, video_recording_type):
        """Sets the video_recording_type of this VideoRecordingSettingsDto.


        :param video_recording_type: The video_recording_type of this VideoRecordingSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Failed", "All"]  # noqa: E501
        if (self._configuration.client_side_validation and
                video_recording_type not in allowed_values):
            raise ValueError(
                "Invalid value for `video_recording_type` ({0}), must be one of {1}"  # noqa: E501
                .format(video_recording_type, allowed_values)
            )

        self._video_recording_type = video_recording_type

    @property
    def queue_item_video_recording_type(self):
        """Gets the queue_item_video_recording_type of this VideoRecordingSettingsDto.  # noqa: E501


        :return: The queue_item_video_recording_type of this VideoRecordingSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._queue_item_video_recording_type

    @queue_item_video_recording_type.setter
    def queue_item_video_recording_type(self, queue_item_video_recording_type):
        """Sets the queue_item_video_recording_type of this VideoRecordingSettingsDto.


        :param queue_item_video_recording_type: The queue_item_video_recording_type of this VideoRecordingSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Failed", "All"]  # noqa: E501
        if (self._configuration.client_side_validation and
                queue_item_video_recording_type not in allowed_values):
            raise ValueError(
                "Invalid value for `queue_item_video_recording_type` ({0}), must be one of {1}"  # noqa: E501
                .format(queue_item_video_recording_type, allowed_values)
            )

        self._queue_item_video_recording_type = queue_item_video_recording_type

    @property
    def max_duration_seconds(self):
        """Gets the max_duration_seconds of this VideoRecordingSettingsDto.  # noqa: E501


        :return: The max_duration_seconds of this VideoRecordingSettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._max_duration_seconds

    @max_duration_seconds.setter
    def max_duration_seconds(self, max_duration_seconds):
        """Sets the max_duration_seconds of this VideoRecordingSettingsDto.


        :param max_duration_seconds: The max_duration_seconds of this VideoRecordingSettingsDto.  # noqa: E501
        :type: int
        """

        self._max_duration_seconds = max_duration_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoRecordingSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoRecordingSettingsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VideoRecordingSettingsDto):
            return True

        return self.to_dict() != other.to_dict()
