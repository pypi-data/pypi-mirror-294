# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class QueueProcessingStatusDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'items_to_process': 'int',
        'items_in_progress': 'int',
        'queue_definition_id': 'int',
        'queue_definition_key': 'str',
        'queue_definition_name': 'str',
        'queue_definition_description': 'str',
        'queue_definition_accept_automatically_retry': 'bool',
        'queue_definition_max_number_of_retries': 'int',
        'queue_definition_enforce_unique_reference': 'bool',
        'processing_mean_time': 'float',
        'successful_transactions_no': 'int',
        'application_exceptions_no': 'int',
        'business_exceptions_no': 'int',
        'successful_transactions_processing_time': 'float',
        'application_exceptions_processing_time': 'float',
        'business_exceptions_processing_time': 'float',
        'total_number_of_transactions': 'int',
        'last_processed': 'datetime',
        'release_name': 'str',
        'release_id': 'int',
        'is_process_in_current_folder': 'bool',
        'specific_data_json_schema_exists': 'bool',
        'output_data_json_schema_exists': 'bool',
        'analytics_data_json_schema_exists': 'bool',
        'process_schedule_id': 'int',
        'queue_folders_count': 'int',
        'tags': 'list[TagDto]',
        'id': 'int'
    }

    attribute_map = {
        'items_to_process': 'ItemsToProcess',
        'items_in_progress': 'ItemsInProgress',
        'queue_definition_id': 'QueueDefinitionId',
        'queue_definition_key': 'QueueDefinitionKey',
        'queue_definition_name': 'QueueDefinitionName',
        'queue_definition_description': 'QueueDefinitionDescription',
        'queue_definition_accept_automatically_retry': 'QueueDefinitionAcceptAutomaticallyRetry',
        'queue_definition_max_number_of_retries': 'QueueDefinitionMaxNumberOfRetries',
        'queue_definition_enforce_unique_reference': 'QueueDefinitionEnforceUniqueReference',
        'processing_mean_time': 'ProcessingMeanTime',
        'successful_transactions_no': 'SuccessfulTransactionsNo',
        'application_exceptions_no': 'ApplicationExceptionsNo',
        'business_exceptions_no': 'BusinessExceptionsNo',
        'successful_transactions_processing_time': 'SuccessfulTransactionsProcessingTime',
        'application_exceptions_processing_time': 'ApplicationExceptionsProcessingTime',
        'business_exceptions_processing_time': 'BusinessExceptionsProcessingTime',
        'total_number_of_transactions': 'TotalNumberOfTransactions',
        'last_processed': 'LastProcessed',
        'release_name': 'ReleaseName',
        'release_id': 'ReleaseId',
        'is_process_in_current_folder': 'IsProcessInCurrentFolder',
        'specific_data_json_schema_exists': 'SpecificDataJsonSchemaExists',
        'output_data_json_schema_exists': 'OutputDataJsonSchemaExists',
        'analytics_data_json_schema_exists': 'AnalyticsDataJsonSchemaExists',
        'process_schedule_id': 'ProcessScheduleId',
        'queue_folders_count': 'QueueFoldersCount',
        'tags': 'Tags',
        'id': 'Id'
    }

    def __init__(self, items_to_process=None, items_in_progress=None, queue_definition_id=None, queue_definition_key=None, queue_definition_name=None, queue_definition_description=None, queue_definition_accept_automatically_retry=None, queue_definition_max_number_of_retries=None, queue_definition_enforce_unique_reference=None, processing_mean_time=None, successful_transactions_no=None, application_exceptions_no=None, business_exceptions_no=None, successful_transactions_processing_time=None, application_exceptions_processing_time=None, business_exceptions_processing_time=None, total_number_of_transactions=None, last_processed=None, release_name=None, release_id=None, is_process_in_current_folder=None, specific_data_json_schema_exists=None, output_data_json_schema_exists=None, analytics_data_json_schema_exists=None, process_schedule_id=None, queue_folders_count=None, tags=None, id=None, _configuration=None):  # noqa: E501
        """QueueProcessingStatusDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._items_to_process = None
        self._items_in_progress = None
        self._queue_definition_id = None
        self._queue_definition_key = None
        self._queue_definition_name = None
        self._queue_definition_description = None
        self._queue_definition_accept_automatically_retry = None
        self._queue_definition_max_number_of_retries = None
        self._queue_definition_enforce_unique_reference = None
        self._processing_mean_time = None
        self._successful_transactions_no = None
        self._application_exceptions_no = None
        self._business_exceptions_no = None
        self._successful_transactions_processing_time = None
        self._application_exceptions_processing_time = None
        self._business_exceptions_processing_time = None
        self._total_number_of_transactions = None
        self._last_processed = None
        self._release_name = None
        self._release_id = None
        self._is_process_in_current_folder = None
        self._specific_data_json_schema_exists = None
        self._output_data_json_schema_exists = None
        self._analytics_data_json_schema_exists = None
        self._process_schedule_id = None
        self._queue_folders_count = None
        self._tags = None
        self._id = None
        self.discriminator = None

        if items_to_process is not None:
            self.items_to_process = items_to_process
        if items_in_progress is not None:
            self.items_in_progress = items_in_progress
        if queue_definition_id is not None:
            self.queue_definition_id = queue_definition_id
        if queue_definition_key is not None:
            self.queue_definition_key = queue_definition_key
        if queue_definition_name is not None:
            self.queue_definition_name = queue_definition_name
        if queue_definition_description is not None:
            self.queue_definition_description = queue_definition_description
        if queue_definition_accept_automatically_retry is not None:
            self.queue_definition_accept_automatically_retry = queue_definition_accept_automatically_retry
        if queue_definition_max_number_of_retries is not None:
            self.queue_definition_max_number_of_retries = queue_definition_max_number_of_retries
        if queue_definition_enforce_unique_reference is not None:
            self.queue_definition_enforce_unique_reference = queue_definition_enforce_unique_reference
        if processing_mean_time is not None:
            self.processing_mean_time = processing_mean_time
        if successful_transactions_no is not None:
            self.successful_transactions_no = successful_transactions_no
        if application_exceptions_no is not None:
            self.application_exceptions_no = application_exceptions_no
        if business_exceptions_no is not None:
            self.business_exceptions_no = business_exceptions_no
        if successful_transactions_processing_time is not None:
            self.successful_transactions_processing_time = successful_transactions_processing_time
        if application_exceptions_processing_time is not None:
            self.application_exceptions_processing_time = application_exceptions_processing_time
        if business_exceptions_processing_time is not None:
            self.business_exceptions_processing_time = business_exceptions_processing_time
        if total_number_of_transactions is not None:
            self.total_number_of_transactions = total_number_of_transactions
        if last_processed is not None:
            self.last_processed = last_processed
        if release_name is not None:
            self.release_name = release_name
        if release_id is not None:
            self.release_id = release_id
        if is_process_in_current_folder is not None:
            self.is_process_in_current_folder = is_process_in_current_folder
        if specific_data_json_schema_exists is not None:
            self.specific_data_json_schema_exists = specific_data_json_schema_exists
        if output_data_json_schema_exists is not None:
            self.output_data_json_schema_exists = output_data_json_schema_exists
        if analytics_data_json_schema_exists is not None:
            self.analytics_data_json_schema_exists = analytics_data_json_schema_exists
        if process_schedule_id is not None:
            self.process_schedule_id = process_schedule_id
        if queue_folders_count is not None:
            self.queue_folders_count = queue_folders_count
        if tags is not None:
            self.tags = tags
        if id is not None:
            self.id = id

    @property
    def items_to_process(self):
        """Gets the items_to_process of this QueueProcessingStatusDto.  # noqa: E501

        The total number of items in the queue with the status New.  # noqa: E501

        :return: The items_to_process of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._items_to_process

    @items_to_process.setter
    def items_to_process(self, items_to_process):
        """Sets the items_to_process of this QueueProcessingStatusDto.

        The total number of items in the queue with the status New.  # noqa: E501

        :param items_to_process: The items_to_process of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._items_to_process = items_to_process

    @property
    def items_in_progress(self):
        """Gets the items_in_progress of this QueueProcessingStatusDto.  # noqa: E501

        The total number of items in the queue with the status InProgress.  # noqa: E501

        :return: The items_in_progress of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._items_in_progress

    @items_in_progress.setter
    def items_in_progress(self, items_in_progress):
        """Sets the items_in_progress of this QueueProcessingStatusDto.

        The total number of items in the queue with the status InProgress.  # noqa: E501

        :param items_in_progress: The items_in_progress of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._items_in_progress = items_in_progress

    @property
    def queue_definition_id(self):
        """Gets the queue_definition_id of this QueueProcessingStatusDto.  # noqa: E501

        The Id of the queue for which the report is done.  # noqa: E501

        :return: The queue_definition_id of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._queue_definition_id

    @queue_definition_id.setter
    def queue_definition_id(self, queue_definition_id):
        """Sets the queue_definition_id of this QueueProcessingStatusDto.

        The Id of the queue for which the report is done.  # noqa: E501

        :param queue_definition_id: The queue_definition_id of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._queue_definition_id = queue_definition_id

    @property
    def queue_definition_key(self):
        """Gets the queue_definition_key of this QueueProcessingStatusDto.  # noqa: E501

        The Key of the queue for which the report is done.  # noqa: E501

        :return: The queue_definition_key of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._queue_definition_key

    @queue_definition_key.setter
    def queue_definition_key(self, queue_definition_key):
        """Sets the queue_definition_key of this QueueProcessingStatusDto.

        The Key of the queue for which the report is done.  # noqa: E501

        :param queue_definition_key: The queue_definition_key of this QueueProcessingStatusDto.  # noqa: E501
        :type: str
        """

        self._queue_definition_key = queue_definition_key

    @property
    def queue_definition_name(self):
        """Gets the queue_definition_name of this QueueProcessingStatusDto.  # noqa: E501

        The name of the queue for which the report is done.  # noqa: E501

        :return: The queue_definition_name of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._queue_definition_name

    @queue_definition_name.setter
    def queue_definition_name(self, queue_definition_name):
        """Sets the queue_definition_name of this QueueProcessingStatusDto.

        The name of the queue for which the report is done.  # noqa: E501

        :param queue_definition_name: The queue_definition_name of this QueueProcessingStatusDto.  # noqa: E501
        :type: str
        """

        self._queue_definition_name = queue_definition_name

    @property
    def queue_definition_description(self):
        """Gets the queue_definition_description of this QueueProcessingStatusDto.  # noqa: E501

        The description of the queue for which the report is done.  # noqa: E501

        :return: The queue_definition_description of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._queue_definition_description

    @queue_definition_description.setter
    def queue_definition_description(self, queue_definition_description):
        """Sets the queue_definition_description of this QueueProcessingStatusDto.

        The description of the queue for which the report is done.  # noqa: E501

        :param queue_definition_description: The queue_definition_description of this QueueProcessingStatusDto.  # noqa: E501
        :type: str
        """

        self._queue_definition_description = queue_definition_description

    @property
    def queue_definition_accept_automatically_retry(self):
        """Gets the queue_definition_accept_automatically_retry of this QueueProcessingStatusDto.  # noqa: E501

        States whether the queue accepts automatic item retry or not.  # noqa: E501

        :return: The queue_definition_accept_automatically_retry of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._queue_definition_accept_automatically_retry

    @queue_definition_accept_automatically_retry.setter
    def queue_definition_accept_automatically_retry(self, queue_definition_accept_automatically_retry):
        """Sets the queue_definition_accept_automatically_retry of this QueueProcessingStatusDto.

        States whether the queue accepts automatic item retry or not.  # noqa: E501

        :param queue_definition_accept_automatically_retry: The queue_definition_accept_automatically_retry of this QueueProcessingStatusDto.  # noqa: E501
        :type: bool
        """

        self._queue_definition_accept_automatically_retry = queue_definition_accept_automatically_retry

    @property
    def queue_definition_max_number_of_retries(self):
        """Gets the queue_definition_max_number_of_retries of this QueueProcessingStatusDto.  # noqa: E501

        The maximum number of retries allowed for any item of the queue.  # noqa: E501

        :return: The queue_definition_max_number_of_retries of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._queue_definition_max_number_of_retries

    @queue_definition_max_number_of_retries.setter
    def queue_definition_max_number_of_retries(self, queue_definition_max_number_of_retries):
        """Sets the queue_definition_max_number_of_retries of this QueueProcessingStatusDto.

        The maximum number of retries allowed for any item of the queue.  # noqa: E501

        :param queue_definition_max_number_of_retries: The queue_definition_max_number_of_retries of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._queue_definition_max_number_of_retries = queue_definition_max_number_of_retries

    @property
    def queue_definition_enforce_unique_reference(self):
        """Gets the queue_definition_enforce_unique_reference of this QueueProcessingStatusDto.  # noqa: E501

        States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.  # noqa: E501

        :return: The queue_definition_enforce_unique_reference of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._queue_definition_enforce_unique_reference

    @queue_definition_enforce_unique_reference.setter
    def queue_definition_enforce_unique_reference(self, queue_definition_enforce_unique_reference):
        """Sets the queue_definition_enforce_unique_reference of this QueueProcessingStatusDto.

        States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.  # noqa: E501

        :param queue_definition_enforce_unique_reference: The queue_definition_enforce_unique_reference of this QueueProcessingStatusDto.  # noqa: E501
        :type: bool
        """

        self._queue_definition_enforce_unique_reference = queue_definition_enforce_unique_reference

    @property
    def processing_mean_time(self):
        """Gets the processing_mean_time of this QueueProcessingStatusDto.  # noqa: E501

        The average time spent processing a successful item.  # noqa: E501

        :return: The processing_mean_time of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: float
        """
        return self._processing_mean_time

    @processing_mean_time.setter
    def processing_mean_time(self, processing_mean_time):
        """Sets the processing_mean_time of this QueueProcessingStatusDto.

        The average time spent processing a successful item.  # noqa: E501

        :param processing_mean_time: The processing_mean_time of this QueueProcessingStatusDto.  # noqa: E501
        :type: float
        """

        self._processing_mean_time = processing_mean_time

    @property
    def successful_transactions_no(self):
        """Gets the successful_transactions_no of this QueueProcessingStatusDto.  # noqa: E501

        The total number of successfully processed items.  # noqa: E501

        :return: The successful_transactions_no of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._successful_transactions_no

    @successful_transactions_no.setter
    def successful_transactions_no(self, successful_transactions_no):
        """Sets the successful_transactions_no of this QueueProcessingStatusDto.

        The total number of successfully processed items.  # noqa: E501

        :param successful_transactions_no: The successful_transactions_no of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._successful_transactions_no = successful_transactions_no

    @property
    def application_exceptions_no(self):
        """Gets the application_exceptions_no of this QueueProcessingStatusDto.  # noqa: E501

        The total number of application exceptions thrown while processing queue items.  # noqa: E501

        :return: The application_exceptions_no of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._application_exceptions_no

    @application_exceptions_no.setter
    def application_exceptions_no(self, application_exceptions_no):
        """Sets the application_exceptions_no of this QueueProcessingStatusDto.

        The total number of application exceptions thrown while processing queue items.  # noqa: E501

        :param application_exceptions_no: The application_exceptions_no of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._application_exceptions_no = application_exceptions_no

    @property
    def business_exceptions_no(self):
        """Gets the business_exceptions_no of this QueueProcessingStatusDto.  # noqa: E501

        The total number of business exceptions thrown while processing queue items.  # noqa: E501

        :return: The business_exceptions_no of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._business_exceptions_no

    @business_exceptions_no.setter
    def business_exceptions_no(self, business_exceptions_no):
        """Sets the business_exceptions_no of this QueueProcessingStatusDto.

        The total number of business exceptions thrown while processing queue items.  # noqa: E501

        :param business_exceptions_no: The business_exceptions_no of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._business_exceptions_no = business_exceptions_no

    @property
    def successful_transactions_processing_time(self):
        """Gets the successful_transactions_processing_time of this QueueProcessingStatusDto.  # noqa: E501

        The total number of seconds spent processing successful queue items.  # noqa: E501

        :return: The successful_transactions_processing_time of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: float
        """
        return self._successful_transactions_processing_time

    @successful_transactions_processing_time.setter
    def successful_transactions_processing_time(self, successful_transactions_processing_time):
        """Sets the successful_transactions_processing_time of this QueueProcessingStatusDto.

        The total number of seconds spent processing successful queue items.  # noqa: E501

        :param successful_transactions_processing_time: The successful_transactions_processing_time of this QueueProcessingStatusDto.  # noqa: E501
        :type: float
        """

        self._successful_transactions_processing_time = successful_transactions_processing_time

    @property
    def application_exceptions_processing_time(self):
        """Gets the application_exceptions_processing_time of this QueueProcessingStatusDto.  # noqa: E501

        The total number of seconds spent processing queue items that failed with application exception.  # noqa: E501

        :return: The application_exceptions_processing_time of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: float
        """
        return self._application_exceptions_processing_time

    @application_exceptions_processing_time.setter
    def application_exceptions_processing_time(self, application_exceptions_processing_time):
        """Sets the application_exceptions_processing_time of this QueueProcessingStatusDto.

        The total number of seconds spent processing queue items that failed with application exception.  # noqa: E501

        :param application_exceptions_processing_time: The application_exceptions_processing_time of this QueueProcessingStatusDto.  # noqa: E501
        :type: float
        """

        self._application_exceptions_processing_time = application_exceptions_processing_time

    @property
    def business_exceptions_processing_time(self):
        """Gets the business_exceptions_processing_time of this QueueProcessingStatusDto.  # noqa: E501

        The total number of seconds spent processing queue items that failed with business exception.  # noqa: E501

        :return: The business_exceptions_processing_time of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: float
        """
        return self._business_exceptions_processing_time

    @business_exceptions_processing_time.setter
    def business_exceptions_processing_time(self, business_exceptions_processing_time):
        """Sets the business_exceptions_processing_time of this QueueProcessingStatusDto.

        The total number of seconds spent processing queue items that failed with business exception.  # noqa: E501

        :param business_exceptions_processing_time: The business_exceptions_processing_time of this QueueProcessingStatusDto.  # noqa: E501
        :type: float
        """

        self._business_exceptions_processing_time = business_exceptions_processing_time

    @property
    def total_number_of_transactions(self):
        """Gets the total_number_of_transactions of this QueueProcessingStatusDto.  # noqa: E501

        The total number of item processing transactions, both failed and successful.  # noqa: E501

        :return: The total_number_of_transactions of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._total_number_of_transactions

    @total_number_of_transactions.setter
    def total_number_of_transactions(self, total_number_of_transactions):
        """Sets the total_number_of_transactions of this QueueProcessingStatusDto.

        The total number of item processing transactions, both failed and successful.  # noqa: E501

        :param total_number_of_transactions: The total_number_of_transactions of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._total_number_of_transactions = total_number_of_transactions

    @property
    def last_processed(self):
        """Gets the last_processed of this QueueProcessingStatusDto.  # noqa: E501

        The date and time of the last item processing.  # noqa: E501

        :return: The last_processed of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_processed

    @last_processed.setter
    def last_processed(self, last_processed):
        """Sets the last_processed of this QueueProcessingStatusDto.

        The date and time of the last item processing.  # noqa: E501

        :param last_processed: The last_processed of this QueueProcessingStatusDto.  # noqa: E501
        :type: datetime
        """

        self._last_processed = last_processed

    @property
    def release_name(self):
        """Gets the release_name of this QueueProcessingStatusDto.  # noqa: E501

        The name of the process associated with the queue.  # noqa: E501

        :return: The release_name of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._release_name

    @release_name.setter
    def release_name(self, release_name):
        """Sets the release_name of this QueueProcessingStatusDto.

        The name of the process associated with the queue.  # noqa: E501

        :param release_name: The release_name of this QueueProcessingStatusDto.  # noqa: E501
        :type: str
        """

        self._release_name = release_name

    @property
    def release_id(self):
        """Gets the release_id of this QueueProcessingStatusDto.  # noqa: E501

        The ProcessId Queue is associated with.  # noqa: E501

        :return: The release_id of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this QueueProcessingStatusDto.

        The ProcessId Queue is associated with.  # noqa: E501

        :param release_id: The release_id of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._release_id = release_id

    @property
    def is_process_in_current_folder(self):
        """Gets the is_process_in_current_folder of this QueueProcessingStatusDto.  # noqa: E501

        Flag to determine if the release is in the current folder  # noqa: E501

        :return: The is_process_in_current_folder of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_process_in_current_folder

    @is_process_in_current_folder.setter
    def is_process_in_current_folder(self, is_process_in_current_folder):
        """Sets the is_process_in_current_folder of this QueueProcessingStatusDto.

        Flag to determine if the release is in the current folder  # noqa: E501

        :param is_process_in_current_folder: The is_process_in_current_folder of this QueueProcessingStatusDto.  # noqa: E501
        :type: bool
        """

        self._is_process_in_current_folder = is_process_in_current_folder

    @property
    def specific_data_json_schema_exists(self):
        """Gets the specific_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501

        Optional JSON schema enforced onto the specific data field is set.  # noqa: E501

        :return: The specific_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._specific_data_json_schema_exists

    @specific_data_json_schema_exists.setter
    def specific_data_json_schema_exists(self, specific_data_json_schema_exists):
        """Sets the specific_data_json_schema_exists of this QueueProcessingStatusDto.

        Optional JSON schema enforced onto the specific data field is set.  # noqa: E501

        :param specific_data_json_schema_exists: The specific_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501
        :type: bool
        """

        self._specific_data_json_schema_exists = specific_data_json_schema_exists

    @property
    def output_data_json_schema_exists(self):
        """Gets the output_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501

        Optional JSON schema enforced onto the output data field is set.  # noqa: E501

        :return: The output_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._output_data_json_schema_exists

    @output_data_json_schema_exists.setter
    def output_data_json_schema_exists(self, output_data_json_schema_exists):
        """Sets the output_data_json_schema_exists of this QueueProcessingStatusDto.

        Optional JSON schema enforced onto the output data field is set.  # noqa: E501

        :param output_data_json_schema_exists: The output_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501
        :type: bool
        """

        self._output_data_json_schema_exists = output_data_json_schema_exists

    @property
    def analytics_data_json_schema_exists(self):
        """Gets the analytics_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501

        Optional JSON schema enforced onto the analytics data field is set.  # noqa: E501

        :return: The analytics_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._analytics_data_json_schema_exists

    @analytics_data_json_schema_exists.setter
    def analytics_data_json_schema_exists(self, analytics_data_json_schema_exists):
        """Sets the analytics_data_json_schema_exists of this QueueProcessingStatusDto.

        Optional JSON schema enforced onto the analytics data field is set.  # noqa: E501

        :param analytics_data_json_schema_exists: The analytics_data_json_schema_exists of this QueueProcessingStatusDto.  # noqa: E501
        :type: bool
        """

        self._analytics_data_json_schema_exists = analytics_data_json_schema_exists

    @property
    def process_schedule_id(self):
        """Gets the process_schedule_id of this QueueProcessingStatusDto.  # noqa: E501

        The Id of the process schedule associated with the queue.  # noqa: E501

        :return: The process_schedule_id of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._process_schedule_id

    @process_schedule_id.setter
    def process_schedule_id(self, process_schedule_id):
        """Sets the process_schedule_id of this QueueProcessingStatusDto.

        The Id of the process schedule associated with the queue.  # noqa: E501

        :param process_schedule_id: The process_schedule_id of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._process_schedule_id = process_schedule_id

    @property
    def queue_folders_count(self):
        """Gets the queue_folders_count of this QueueProcessingStatusDto.  # noqa: E501

        The number of folders where the queue definition is shared.  # noqa: E501

        :return: The queue_folders_count of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._queue_folders_count

    @queue_folders_count.setter
    def queue_folders_count(self, queue_folders_count):
        """Sets the queue_folders_count of this QueueProcessingStatusDto.

        The number of folders where the queue definition is shared.  # noqa: E501

        :param queue_folders_count: The queue_folders_count of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._queue_folders_count = queue_folders_count

    @property
    def tags(self):
        """Gets the tags of this QueueProcessingStatusDto.  # noqa: E501


        :return: The tags of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this QueueProcessingStatusDto.


        :param tags: The tags of this QueueProcessingStatusDto.  # noqa: E501
        :type: list[TagDto]
        """

        self._tags = tags

    @property
    def id(self):
        """Gets the id of this QueueProcessingStatusDto.  # noqa: E501


        :return: The id of this QueueProcessingStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueueProcessingStatusDto.


        :param id: The id of this QueueProcessingStatusDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueProcessingStatusDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueProcessingStatusDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueProcessingStatusDto):
            return True

        return self.to_dict() != other.to_dict()
