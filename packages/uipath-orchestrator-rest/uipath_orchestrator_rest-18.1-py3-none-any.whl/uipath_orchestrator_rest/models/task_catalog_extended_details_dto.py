# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TaskCatalogExtendedDetailsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'associated_tasks_count': 'int',
        'is_encrypted': 'bool',
        'total_folder_count': 'int',
        'key': 'str'
    }

    attribute_map = {
        'associated_tasks_count': 'AssociatedTasksCount',
        'is_encrypted': 'IsEncrypted',
        'total_folder_count': 'TotalFolderCount',
        'key': 'Key'
    }

    def __init__(self, associated_tasks_count=None, is_encrypted=None, total_folder_count=None, key=None, _configuration=None):  # noqa: E501
        """TaskCatalogExtendedDetailsDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._associated_tasks_count = None
        self._is_encrypted = None
        self._total_folder_count = None
        self._key = None
        self.discriminator = None

        if associated_tasks_count is not None:
            self.associated_tasks_count = associated_tasks_count
        if is_encrypted is not None:
            self.is_encrypted = is_encrypted
        if total_folder_count is not None:
            self.total_folder_count = total_folder_count
        if key is not None:
            self.key = key

    @property
    def associated_tasks_count(self):
        """Gets the associated_tasks_count of this TaskCatalogExtendedDetailsDto.  # noqa: E501


        :return: The associated_tasks_count of this TaskCatalogExtendedDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._associated_tasks_count

    @associated_tasks_count.setter
    def associated_tasks_count(self, associated_tasks_count):
        """Sets the associated_tasks_count of this TaskCatalogExtendedDetailsDto.


        :param associated_tasks_count: The associated_tasks_count of this TaskCatalogExtendedDetailsDto.  # noqa: E501
        :type: int
        """

        self._associated_tasks_count = associated_tasks_count

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this TaskCatalogExtendedDetailsDto.  # noqa: E501


        :return: The is_encrypted of this TaskCatalogExtendedDetailsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this TaskCatalogExtendedDetailsDto.


        :param is_encrypted: The is_encrypted of this TaskCatalogExtendedDetailsDto.  # noqa: E501
        :type: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def total_folder_count(self):
        """Gets the total_folder_count of this TaskCatalogExtendedDetailsDto.  # noqa: E501


        :return: The total_folder_count of this TaskCatalogExtendedDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._total_folder_count

    @total_folder_count.setter
    def total_folder_count(self, total_folder_count):
        """Sets the total_folder_count of this TaskCatalogExtendedDetailsDto.


        :param total_folder_count: The total_folder_count of this TaskCatalogExtendedDetailsDto.  # noqa: E501
        :type: int
        """

        self._total_folder_count = total_folder_count

    @property
    def key(self):
        """Gets the key of this TaskCatalogExtendedDetailsDto.  # noqa: E501


        :return: The key of this TaskCatalogExtendedDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TaskCatalogExtendedDetailsDto.


        :param key: The key of this TaskCatalogExtendedDetailsDto.  # noqa: E501
        :type: str
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskCatalogExtendedDetailsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskCatalogExtendedDetailsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskCatalogExtendedDetailsDto):
            return True

        return self.to_dict() != other.to_dict()
