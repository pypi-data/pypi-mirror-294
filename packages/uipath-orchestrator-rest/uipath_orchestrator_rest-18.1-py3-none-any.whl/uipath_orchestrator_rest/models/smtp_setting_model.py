# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class SmtpSettingModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'port': 'int',
        'user_name': 'str',
        'password': 'str',
        'domain': 'str',
        'enable_ssl': 'bool',
        'use_default_credentials': 'bool',
        'default_from_address': 'str',
        'default_from_display_name': 'str'
    }

    attribute_map = {
        'host': 'Host',
        'port': 'Port',
        'user_name': 'UserName',
        'password': 'Password',
        'domain': 'Domain',
        'enable_ssl': 'EnableSsl',
        'use_default_credentials': 'UseDefaultCredentials',
        'default_from_address': 'DefaultFromAddress',
        'default_from_display_name': 'DefaultFromDisplayName'
    }

    def __init__(self, host=None, port=None, user_name=None, password=None, domain=None, enable_ssl=None, use_default_credentials=None, default_from_address=None, default_from_display_name=None, _configuration=None):  # noqa: E501
        """SmtpSettingModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._host = None
        self._port = None
        self._user_name = None
        self._password = None
        self._domain = None
        self._enable_ssl = None
        self._use_default_credentials = None
        self._default_from_address = None
        self._default_from_display_name = None
        self.discriminator = None

        self.host = host
        self.port = port
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if domain is not None:
            self.domain = domain
        if enable_ssl is not None:
            self.enable_ssl = enable_ssl
        if use_default_credentials is not None:
            self.use_default_credentials = use_default_credentials
        if default_from_address is not None:
            self.default_from_address = default_from_address
        if default_from_display_name is not None:
            self.default_from_display_name = default_from_display_name

    @property
    def host(self):
        """Gets the host of this SmtpSettingModel.  # noqa: E501


        :return: The host of this SmtpSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SmtpSettingModel.


        :param host: The host of this SmtpSettingModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                host is not None and len(host) < 1):
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this SmtpSettingModel.  # noqa: E501


        :return: The port of this SmtpSettingModel.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SmtpSettingModel.


        :param port: The port of this SmtpSettingModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def user_name(self):
        """Gets the user_name of this SmtpSettingModel.  # noqa: E501


        :return: The user_name of this SmtpSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SmtpSettingModel.


        :param user_name: The user_name of this SmtpSettingModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this SmtpSettingModel.  # noqa: E501


        :return: The password of this SmtpSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SmtpSettingModel.


        :param password: The password of this SmtpSettingModel.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def domain(self):
        """Gets the domain of this SmtpSettingModel.  # noqa: E501


        :return: The domain of this SmtpSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SmtpSettingModel.


        :param domain: The domain of this SmtpSettingModel.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def enable_ssl(self):
        """Gets the enable_ssl of this SmtpSettingModel.  # noqa: E501


        :return: The enable_ssl of this SmtpSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ssl

    @enable_ssl.setter
    def enable_ssl(self, enable_ssl):
        """Sets the enable_ssl of this SmtpSettingModel.


        :param enable_ssl: The enable_ssl of this SmtpSettingModel.  # noqa: E501
        :type: bool
        """

        self._enable_ssl = enable_ssl

    @property
    def use_default_credentials(self):
        """Gets the use_default_credentials of this SmtpSettingModel.  # noqa: E501


        :return: The use_default_credentials of this SmtpSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_default_credentials

    @use_default_credentials.setter
    def use_default_credentials(self, use_default_credentials):
        """Sets the use_default_credentials of this SmtpSettingModel.


        :param use_default_credentials: The use_default_credentials of this SmtpSettingModel.  # noqa: E501
        :type: bool
        """

        self._use_default_credentials = use_default_credentials

    @property
    def default_from_address(self):
        """Gets the default_from_address of this SmtpSettingModel.  # noqa: E501


        :return: The default_from_address of this SmtpSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._default_from_address

    @default_from_address.setter
    def default_from_address(self, default_from_address):
        """Sets the default_from_address of this SmtpSettingModel.


        :param default_from_address: The default_from_address of this SmtpSettingModel.  # noqa: E501
        :type: str
        """

        self._default_from_address = default_from_address

    @property
    def default_from_display_name(self):
        """Gets the default_from_display_name of this SmtpSettingModel.  # noqa: E501


        :return: The default_from_display_name of this SmtpSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._default_from_display_name

    @default_from_display_name.setter
    def default_from_display_name(self, default_from_display_name):
        """Sets the default_from_display_name of this SmtpSettingModel.


        :param default_from_display_name: The default_from_display_name of this SmtpSettingModel.  # noqa: E501
        :type: str
        """

        self._default_from_display_name = default_from_display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmtpSettingModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmtpSettingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmtpSettingModel):
            return True

        return self.to_dict() != other.to_dict()
