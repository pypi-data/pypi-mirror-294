# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class ExtendedMachineDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_key': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'scope': 'str',
        'non_production_slots': 'int',
        'unattended_slots': 'int',
        'headless_slots': 'int',
        'test_automation_slots': 'int',
        'automation_cloud_slots': 'int',
        'automation_cloud_test_automation_slots': 'int',
        'key': 'str',
        'endpoint_detection_status': 'str',
        'robot_versions': 'list[MachinesRobotVersionDto]',
        'robot_users': 'list[RobotUserDto]',
        'automation_type': 'str',
        'target_framework': 'str',
        'update_policy': 'UpdatePolicyDto',
        'client_secret': 'str',
        'tags': 'list[TagDto]',
        'maintenance_window': 'MaintenanceWindowDto',
        'vpn_settings': 'MachineVpnSettingsDto',
        'id': 'int',
        'update_info': 'UpdateInfoDto'
    }

    attribute_map = {
        'license_key': 'LicenseKey',
        'name': 'Name',
        'description': 'Description',
        'type': 'Type',
        'scope': 'Scope',
        'non_production_slots': 'NonProductionSlots',
        'unattended_slots': 'UnattendedSlots',
        'headless_slots': 'HeadlessSlots',
        'test_automation_slots': 'TestAutomationSlots',
        'automation_cloud_slots': 'AutomationCloudSlots',
        'automation_cloud_test_automation_slots': 'AutomationCloudTestAutomationSlots',
        'key': 'Key',
        'endpoint_detection_status': 'EndpointDetectionStatus',
        'robot_versions': 'RobotVersions',
        'robot_users': 'RobotUsers',
        'automation_type': 'AutomationType',
        'target_framework': 'TargetFramework',
        'update_policy': 'UpdatePolicy',
        'client_secret': 'ClientSecret',
        'tags': 'Tags',
        'maintenance_window': 'MaintenanceWindow',
        'vpn_settings': 'VpnSettings',
        'id': 'Id',
        'update_info': 'UpdateInfo'
    }

    def __init__(self, license_key=None, name=None, description=None, type=None, scope=None, non_production_slots=None, unattended_slots=None, headless_slots=None, test_automation_slots=None, automation_cloud_slots=None, automation_cloud_test_automation_slots=None, key=None, endpoint_detection_status=None, robot_versions=None, robot_users=None, automation_type=None, target_framework=None, update_policy=None, client_secret=None, tags=None, maintenance_window=None, vpn_settings=None, id=None, update_info=None, _configuration=None):  # noqa: E501
        """ExtendedMachineDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._license_key = None
        self._name = None
        self._description = None
        self._type = None
        self._scope = None
        self._non_production_slots = None
        self._unattended_slots = None
        self._headless_slots = None
        self._test_automation_slots = None
        self._automation_cloud_slots = None
        self._automation_cloud_test_automation_slots = None
        self._key = None
        self._endpoint_detection_status = None
        self._robot_versions = None
        self._robot_users = None
        self._automation_type = None
        self._target_framework = None
        self._update_policy = None
        self._client_secret = None
        self._tags = None
        self._maintenance_window = None
        self._vpn_settings = None
        self._id = None
        self._update_info = None
        self.discriminator = None

        if license_key is not None:
            self.license_key = license_key
        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if scope is not None:
            self.scope = scope
        if non_production_slots is not None:
            self.non_production_slots = non_production_slots
        if unattended_slots is not None:
            self.unattended_slots = unattended_slots
        if headless_slots is not None:
            self.headless_slots = headless_slots
        if test_automation_slots is not None:
            self.test_automation_slots = test_automation_slots
        if automation_cloud_slots is not None:
            self.automation_cloud_slots = automation_cloud_slots
        if automation_cloud_test_automation_slots is not None:
            self.automation_cloud_test_automation_slots = automation_cloud_test_automation_slots
        if key is not None:
            self.key = key
        if endpoint_detection_status is not None:
            self.endpoint_detection_status = endpoint_detection_status
        if robot_versions is not None:
            self.robot_versions = robot_versions
        if robot_users is not None:
            self.robot_users = robot_users
        if automation_type is not None:
            self.automation_type = automation_type
        if target_framework is not None:
            self.target_framework = target_framework
        if update_policy is not None:
            self.update_policy = update_policy
        if client_secret is not None:
            self.client_secret = client_secret
        if tags is not None:
            self.tags = tags
        if maintenance_window is not None:
            self.maintenance_window = maintenance_window
        if vpn_settings is not None:
            self.vpn_settings = vpn_settings
        if id is not None:
            self.id = id
        if update_info is not None:
            self.update_info = update_info

    @property
    def license_key(self):
        """Gets the license_key of this ExtendedMachineDto.  # noqa: E501

        The key is automatically generated from the server for the Robot machine.  <para />For the robot to work, the same key must exist on both the robot and Orchestrator.  <para />All robots on a machine must have the same license key in order to register correctly.  # noqa: E501

        :return: The license_key of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """Sets the license_key of this ExtendedMachineDto.

        The key is automatically generated from the server for the Robot machine.  <para />For the robot to work, the same key must exist on both the robot and Orchestrator.  <para />All robots on a machine must have the same license key in order to register correctly.  # noqa: E501

        :param license_key: The license_key of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                license_key is not None and len(license_key) > 255):
            raise ValueError("Invalid value for `license_key`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                license_key is not None and len(license_key) < 0):
            raise ValueError("Invalid value for `license_key`, length must be greater than or equal to `0`")  # noqa: E501

        self._license_key = license_key

    @property
    def name(self):
        """Gets the name of this ExtendedMachineDto.  # noqa: E501

        The name of the Machine a Robot is hosted on.  # noqa: E501

        :return: The name of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtendedMachineDto.

        The name of the Machine a Robot is hosted on.  # noqa: E501

        :param name: The name of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 450):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `450`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExtendedMachineDto.  # noqa: E501


        :return: The description of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExtendedMachineDto.


        :param description: The description of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 500):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def type(self):
        """Gets the type of this ExtendedMachineDto.  # noqa: E501

        The type of the Machine (Standard / Template).  # noqa: E501

        :return: The type of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExtendedMachineDto.

        The type of the Machine (Standard / Template).  # noqa: E501

        :param type: The type of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Standard", "Template"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def scope(self):
        """Gets the scope of this ExtendedMachineDto.  # noqa: E501

        The scope of the Machine (Default / Shared / PW / Cloud / Serverless).  # noqa: E501

        :return: The scope of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ExtendedMachineDto.

        The scope of the Machine (Default / Shared / PW / Cloud / Serverless).  # noqa: E501

        :param scope: The scope of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Shared", "PersonalWorkspace", "Cloud", "Serverless"]  # noqa: E501
        if (self._configuration.client_side_validation and
                scope not in allowed_values):
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def non_production_slots(self):
        """Gets the non_production_slots of this ExtendedMachineDto.  # noqa: E501

        Number of NonProduction slots to be reserved at runtime  # noqa: E501

        :return: The non_production_slots of this ExtendedMachineDto.  # noqa: E501
        :rtype: int
        """
        return self._non_production_slots

    @non_production_slots.setter
    def non_production_slots(self, non_production_slots):
        """Sets the non_production_slots of this ExtendedMachineDto.

        Number of NonProduction slots to be reserved at runtime  # noqa: E501

        :param non_production_slots: The non_production_slots of this ExtendedMachineDto.  # noqa: E501
        :type: int
        """

        self._non_production_slots = non_production_slots

    @property
    def unattended_slots(self):
        """Gets the unattended_slots of this ExtendedMachineDto.  # noqa: E501

        Number of Unattended slots to be reserved at runtime  # noqa: E501

        :return: The unattended_slots of this ExtendedMachineDto.  # noqa: E501
        :rtype: int
        """
        return self._unattended_slots

    @unattended_slots.setter
    def unattended_slots(self, unattended_slots):
        """Sets the unattended_slots of this ExtendedMachineDto.

        Number of Unattended slots to be reserved at runtime  # noqa: E501

        :param unattended_slots: The unattended_slots of this ExtendedMachineDto.  # noqa: E501
        :type: int
        """

        self._unattended_slots = unattended_slots

    @property
    def headless_slots(self):
        """Gets the headless_slots of this ExtendedMachineDto.  # noqa: E501

        Number of Headless slots to be reserved at runtime  # noqa: E501

        :return: The headless_slots of this ExtendedMachineDto.  # noqa: E501
        :rtype: int
        """
        return self._headless_slots

    @headless_slots.setter
    def headless_slots(self, headless_slots):
        """Sets the headless_slots of this ExtendedMachineDto.

        Number of Headless slots to be reserved at runtime  # noqa: E501

        :param headless_slots: The headless_slots of this ExtendedMachineDto.  # noqa: E501
        :type: int
        """

        self._headless_slots = headless_slots

    @property
    def test_automation_slots(self):
        """Gets the test_automation_slots of this ExtendedMachineDto.  # noqa: E501

        Number of TestAutomation slots to be reserved at runtime  # noqa: E501

        :return: The test_automation_slots of this ExtendedMachineDto.  # noqa: E501
        :rtype: int
        """
        return self._test_automation_slots

    @test_automation_slots.setter
    def test_automation_slots(self, test_automation_slots):
        """Sets the test_automation_slots of this ExtendedMachineDto.

        Number of TestAutomation slots to be reserved at runtime  # noqa: E501

        :param test_automation_slots: The test_automation_slots of this ExtendedMachineDto.  # noqa: E501
        :type: int
        """

        self._test_automation_slots = test_automation_slots

    @property
    def automation_cloud_slots(self):
        """Gets the automation_cloud_slots of this ExtendedMachineDto.  # noqa: E501

        Number of AutomationCloud slots to be reserved at runtime  # noqa: E501

        :return: The automation_cloud_slots of this ExtendedMachineDto.  # noqa: E501
        :rtype: int
        """
        return self._automation_cloud_slots

    @automation_cloud_slots.setter
    def automation_cloud_slots(self, automation_cloud_slots):
        """Sets the automation_cloud_slots of this ExtendedMachineDto.

        Number of AutomationCloud slots to be reserved at runtime  # noqa: E501

        :param automation_cloud_slots: The automation_cloud_slots of this ExtendedMachineDto.  # noqa: E501
        :type: int
        """

        self._automation_cloud_slots = automation_cloud_slots

    @property
    def automation_cloud_test_automation_slots(self):
        """Gets the automation_cloud_test_automation_slots of this ExtendedMachineDto.  # noqa: E501

        Number of AutomationCloudTestAutomation slots to be reserved at runtime  # noqa: E501

        :return: The automation_cloud_test_automation_slots of this ExtendedMachineDto.  # noqa: E501
        :rtype: int
        """
        return self._automation_cloud_test_automation_slots

    @automation_cloud_test_automation_slots.setter
    def automation_cloud_test_automation_slots(self, automation_cloud_test_automation_slots):
        """Sets the automation_cloud_test_automation_slots of this ExtendedMachineDto.

        Number of AutomationCloudTestAutomation slots to be reserved at runtime  # noqa: E501

        :param automation_cloud_test_automation_slots: The automation_cloud_test_automation_slots of this ExtendedMachineDto.  # noqa: E501
        :type: int
        """

        self._automation_cloud_test_automation_slots = automation_cloud_test_automation_slots

    @property
    def key(self):
        """Gets the key of this ExtendedMachineDto.  # noqa: E501

        An immutable unique identifier that is preserved during tenant migration  # noqa: E501

        :return: The key of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ExtendedMachineDto.

        An immutable unique identifier that is preserved during tenant migration  # noqa: E501

        :param key: The key of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def endpoint_detection_status(self):
        """Gets the endpoint_detection_status of this ExtendedMachineDto.  # noqa: E501

        The EDR protection status of the connected hosts.  # noqa: E501

        :return: The endpoint_detection_status of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_detection_status

    @endpoint_detection_status.setter
    def endpoint_detection_status(self, endpoint_detection_status):
        """Sets the endpoint_detection_status of this ExtendedMachineDto.

        The EDR protection status of the connected hosts.  # noqa: E501

        :param endpoint_detection_status: The endpoint_detection_status of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotAvailable", "Mixed", "Enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                endpoint_detection_status not in allowed_values):
            raise ValueError(
                "Invalid value for `endpoint_detection_status` ({0}), must be one of {1}"  # noqa: E501
                .format(endpoint_detection_status, allowed_values)
            )

        self._endpoint_detection_status = endpoint_detection_status

    @property
    def robot_versions(self):
        """Gets the robot_versions of this ExtendedMachineDto.  # noqa: E501

        The versions of the Robots hosted on the Machine.  # noqa: E501

        :return: The robot_versions of this ExtendedMachineDto.  # noqa: E501
        :rtype: list[MachinesRobotVersionDto]
        """
        return self._robot_versions

    @robot_versions.setter
    def robot_versions(self, robot_versions):
        """Sets the robot_versions of this ExtendedMachineDto.

        The versions of the Robots hosted on the Machine.  # noqa: E501

        :param robot_versions: The robot_versions of this ExtendedMachineDto.  # noqa: E501
        :type: list[MachinesRobotVersionDto]
        """

        self._robot_versions = robot_versions

    @property
    def robot_users(self):
        """Gets the robot_users of this ExtendedMachineDto.  # noqa: E501

        Robots assigned to template machine.  # noqa: E501

        :return: The robot_users of this ExtendedMachineDto.  # noqa: E501
        :rtype: list[RobotUserDto]
        """
        return self._robot_users

    @robot_users.setter
    def robot_users(self, robot_users):
        """Sets the robot_users of this ExtendedMachineDto.

        Robots assigned to template machine.  # noqa: E501

        :param robot_users: The robot_users of this ExtendedMachineDto.  # noqa: E501
        :type: list[RobotUserDto]
        """

        self._robot_users = robot_users

    @property
    def automation_type(self):
        """Gets the automation_type of this ExtendedMachineDto.  # noqa: E501

        The automation type the machine supports.  # noqa: E501

        :return: The automation_type of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._automation_type

    @automation_type.setter
    def automation_type(self, automation_type):
        """Sets the automation_type of this ExtendedMachineDto.

        The automation type the machine supports.  # noqa: E501

        :param automation_type: The automation_type of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Any", "Foreground", "Background"]  # noqa: E501
        if (self._configuration.client_side_validation and
                automation_type not in allowed_values):
            raise ValueError(
                "Invalid value for `automation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(automation_type, allowed_values)
            )

        self._automation_type = automation_type

    @property
    def target_framework(self):
        """Gets the target_framework of this ExtendedMachineDto.  # noqa: E501

        The target frameworks the machine supports.  # noqa: E501

        :return: The target_framework of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._target_framework

    @target_framework.setter
    def target_framework(self, target_framework):
        """Sets the target_framework of this ExtendedMachineDto.

        The target frameworks the machine supports.  # noqa: E501

        :param target_framework: The target_framework of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Any", "Windows", "Portable"]  # noqa: E501
        if (self._configuration.client_side_validation and
                target_framework not in allowed_values):
            raise ValueError(
                "Invalid value for `target_framework` ({0}), must be one of {1}"  # noqa: E501
                .format(target_framework, allowed_values)
            )

        self._target_framework = target_framework

    @property
    def update_policy(self):
        """Gets the update_policy of this ExtendedMachineDto.  # noqa: E501


        :return: The update_policy of this ExtendedMachineDto.  # noqa: E501
        :rtype: UpdatePolicyDto
        """
        return self._update_policy

    @update_policy.setter
    def update_policy(self, update_policy):
        """Sets the update_policy of this ExtendedMachineDto.


        :param update_policy: The update_policy of this ExtendedMachineDto.  # noqa: E501
        :type: UpdatePolicyDto
        """

        self._update_policy = update_policy

    @property
    def client_secret(self):
        """Gets the client_secret of this ExtendedMachineDto.  # noqa: E501

        Client secret generated by Identity Server  Use in combination with LicenseKey (ClientId) to connect robot  # noqa: E501

        :return: The client_secret of this ExtendedMachineDto.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ExtendedMachineDto.

        Client secret generated by Identity Server  Use in combination with LicenseKey (ClientId) to connect robot  # noqa: E501

        :param client_secret: The client_secret of this ExtendedMachineDto.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def tags(self):
        """Gets the tags of this ExtendedMachineDto.  # noqa: E501


        :return: The tags of this ExtendedMachineDto.  # noqa: E501
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ExtendedMachineDto.


        :param tags: The tags of this ExtendedMachineDto.  # noqa: E501
        :type: list[TagDto]
        """

        self._tags = tags

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this ExtendedMachineDto.  # noqa: E501


        :return: The maintenance_window of this ExtendedMachineDto.  # noqa: E501
        :rtype: MaintenanceWindowDto
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this ExtendedMachineDto.


        :param maintenance_window: The maintenance_window of this ExtendedMachineDto.  # noqa: E501
        :type: MaintenanceWindowDto
        """

        self._maintenance_window = maintenance_window

    @property
    def vpn_settings(self):
        """Gets the vpn_settings of this ExtendedMachineDto.  # noqa: E501


        :return: The vpn_settings of this ExtendedMachineDto.  # noqa: E501
        :rtype: MachineVpnSettingsDto
        """
        return self._vpn_settings

    @vpn_settings.setter
    def vpn_settings(self, vpn_settings):
        """Sets the vpn_settings of this ExtendedMachineDto.


        :param vpn_settings: The vpn_settings of this ExtendedMachineDto.  # noqa: E501
        :type: MachineVpnSettingsDto
        """

        self._vpn_settings = vpn_settings

    @property
    def id(self):
        """Gets the id of this ExtendedMachineDto.  # noqa: E501


        :return: The id of this ExtendedMachineDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedMachineDto.


        :param id: The id of this ExtendedMachineDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def update_info(self):
        """Gets the update_info of this ExtendedMachineDto.  # noqa: E501


        :return: The update_info of this ExtendedMachineDto.  # noqa: E501
        :rtype: UpdateInfoDto
        """
        return self._update_info

    @update_info.setter
    def update_info(self, update_info):
        """Sets the update_info of this ExtendedMachineDto.


        :param update_info: The update_info of this ExtendedMachineDto.  # noqa: E501
        :type: UpdateInfoDto
        """

        self._update_info = update_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedMachineDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedMachineDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExtendedMachineDto):
            return True

        return self.to_dict() != other.to_dict()
