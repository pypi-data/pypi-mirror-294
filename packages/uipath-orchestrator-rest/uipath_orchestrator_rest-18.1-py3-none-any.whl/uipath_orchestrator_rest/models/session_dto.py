# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class SessionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'robot': 'RobotWithLicenseDto',
        'host_machine_name': 'str',
        'machine_id': 'int',
        'machine_name': 'str',
        'state': 'str',
        'job': 'JobDto',
        'reporting_time': 'datetime',
        'info': 'str',
        'is_unresponsive': 'bool',
        'license_error_code': 'str',
        'organization_unit_id': 'int',
        'folder_name': 'str',
        'robot_session_type': 'str',
        'version': 'str',
        'source': 'str',
        'debug_mode_expiration_date': 'datetime',
        'update_info': 'UpdateInfoDto',
        'installation_id': 'str',
        'platform': 'str',
        'endpoint_detection': 'str',
        'id': 'int'
    }

    attribute_map = {
        'robot': 'Robot',
        'host_machine_name': 'HostMachineName',
        'machine_id': 'MachineId',
        'machine_name': 'MachineName',
        'state': 'State',
        'job': 'Job',
        'reporting_time': 'ReportingTime',
        'info': 'Info',
        'is_unresponsive': 'IsUnresponsive',
        'license_error_code': 'LicenseErrorCode',
        'organization_unit_id': 'OrganizationUnitId',
        'folder_name': 'FolderName',
        'robot_session_type': 'RobotSessionType',
        'version': 'Version',
        'source': 'Source',
        'debug_mode_expiration_date': 'DebugModeExpirationDate',
        'update_info': 'UpdateInfo',
        'installation_id': 'InstallationId',
        'platform': 'Platform',
        'endpoint_detection': 'EndpointDetection',
        'id': 'Id'
    }

    def __init__(self, robot=None, host_machine_name=None, machine_id=None, machine_name=None, state=None, job=None, reporting_time=None, info=None, is_unresponsive=None, license_error_code=None, organization_unit_id=None, folder_name=None, robot_session_type=None, version=None, source=None, debug_mode_expiration_date=None, update_info=None, installation_id=None, platform=None, endpoint_detection=None, id=None, _configuration=None):  # noqa: E501
        """SessionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._robot = None
        self._host_machine_name = None
        self._machine_id = None
        self._machine_name = None
        self._state = None
        self._job = None
        self._reporting_time = None
        self._info = None
        self._is_unresponsive = None
        self._license_error_code = None
        self._organization_unit_id = None
        self._folder_name = None
        self._robot_session_type = None
        self._version = None
        self._source = None
        self._debug_mode_expiration_date = None
        self._update_info = None
        self._installation_id = None
        self._platform = None
        self._endpoint_detection = None
        self._id = None
        self.discriminator = None

        if robot is not None:
            self.robot = robot
        if host_machine_name is not None:
            self.host_machine_name = host_machine_name
        if machine_id is not None:
            self.machine_id = machine_id
        if machine_name is not None:
            self.machine_name = machine_name
        if state is not None:
            self.state = state
        if job is not None:
            self.job = job
        if reporting_time is not None:
            self.reporting_time = reporting_time
        if info is not None:
            self.info = info
        if is_unresponsive is not None:
            self.is_unresponsive = is_unresponsive
        if license_error_code is not None:
            self.license_error_code = license_error_code
        if organization_unit_id is not None:
            self.organization_unit_id = organization_unit_id
        if folder_name is not None:
            self.folder_name = folder_name
        if robot_session_type is not None:
            self.robot_session_type = robot_session_type
        if version is not None:
            self.version = version
        if source is not None:
            self.source = source
        if debug_mode_expiration_date is not None:
            self.debug_mode_expiration_date = debug_mode_expiration_date
        if update_info is not None:
            self.update_info = update_info
        if installation_id is not None:
            self.installation_id = installation_id
        if platform is not None:
            self.platform = platform
        if endpoint_detection is not None:
            self.endpoint_detection = endpoint_detection
        if id is not None:
            self.id = id

    @property
    def robot(self):
        """Gets the robot of this SessionDto.  # noqa: E501


        :return: The robot of this SessionDto.  # noqa: E501
        :rtype: RobotWithLicenseDto
        """
        return self._robot

    @robot.setter
    def robot(self, robot):
        """Sets the robot of this SessionDto.


        :param robot: The robot of this SessionDto.  # noqa: E501
        :type: RobotWithLicenseDto
        """

        self._robot = robot

    @property
    def host_machine_name(self):
        """Gets the host_machine_name of this SessionDto.  # noqa: E501

        The name of the machine a Robot is hosted on.  # noqa: E501

        :return: The host_machine_name of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._host_machine_name

    @host_machine_name.setter
    def host_machine_name(self, host_machine_name):
        """Sets the host_machine_name of this SessionDto.

        The name of the machine a Robot is hosted on.  # noqa: E501

        :param host_machine_name: The host_machine_name of this SessionDto.  # noqa: E501
        :type: str
        """

        self._host_machine_name = host_machine_name

    @property
    def machine_id(self):
        """Gets the machine_id of this SessionDto.  # noqa: E501

        The Id of the Machine.  # noqa: E501

        :return: The machine_id of this SessionDto.  # noqa: E501
        :rtype: int
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this SessionDto.

        The Id of the Machine.  # noqa: E501

        :param machine_id: The machine_id of this SessionDto.  # noqa: E501
        :type: int
        """

        self._machine_id = machine_id

    @property
    def machine_name(self):
        """Gets the machine_name of this SessionDto.  # noqa: E501

        The Machine's name.  # noqa: E501

        :return: The machine_name of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this SessionDto.

        The Machine's name.  # noqa: E501

        :param machine_name: The machine_name of this SessionDto.  # noqa: E501
        :type: str
        """

        self._machine_name = machine_name

    @property
    def state(self):
        """Gets the state of this SessionDto.  # noqa: E501

        The value of the last reported status.  # noqa: E501

        :return: The state of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SessionDto.

        The value of the last reported status.  # noqa: E501

        :param state: The state of this SessionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Available", "Busy", "Disconnected", "Unknown"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def job(self):
        """Gets the job of this SessionDto.  # noqa: E501


        :return: The job of this SessionDto.  # noqa: E501
        :rtype: JobDto
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this SessionDto.


        :param job: The job of this SessionDto.  # noqa: E501
        :type: JobDto
        """

        self._job = job

    @property
    def reporting_time(self):
        """Gets the reporting_time of this SessionDto.  # noqa: E501

        The date and time when the last heartbeat came.  # noqa: E501

        :return: The reporting_time of this SessionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._reporting_time

    @reporting_time.setter
    def reporting_time(self, reporting_time):
        """Sets the reporting_time of this SessionDto.

        The date and time when the last heartbeat came.  # noqa: E501

        :param reporting_time: The reporting_time of this SessionDto.  # noqa: E501
        :type: datetime
        """

        self._reporting_time = reporting_time

    @property
    def info(self):
        """Gets the info of this SessionDto.  # noqa: E501

        May store additional information about the robot state.  # noqa: E501

        :return: The info of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SessionDto.

        May store additional information about the robot state.  # noqa: E501

        :param info: The info of this SessionDto.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def is_unresponsive(self):
        """Gets the is_unresponsive of this SessionDto.  # noqa: E501

        If the robot did not report status for longer than 120 seconds.  # noqa: E501

        :return: The is_unresponsive of this SessionDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_unresponsive

    @is_unresponsive.setter
    def is_unresponsive(self, is_unresponsive):
        """Sets the is_unresponsive of this SessionDto.

        If the robot did not report status for longer than 120 seconds.  # noqa: E501

        :param is_unresponsive: The is_unresponsive of this SessionDto.  # noqa: E501
        :type: bool
        """

        self._is_unresponsive = is_unresponsive

    @property
    def license_error_code(self):
        """Gets the license_error_code of this SessionDto.  # noqa: E501

        DEPRECATED. Last licensing error status.  # noqa: E501

        :return: The license_error_code of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._license_error_code

    @license_error_code.setter
    def license_error_code(self, license_error_code):
        """Sets the license_error_code of this SessionDto.

        DEPRECATED. Last licensing error status.  # noqa: E501

        :param license_error_code: The license_error_code of this SessionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoLicense", "LicenseExpired", "LicenseUnregistered", "NoAvailableLicenses", "NotEnoughAvailableSlots", "NotEnoughRuntimeLicenses", "LicenseIsAlreadyInUse", "InvalidRequest", "SlotsExceedLicenseLimit", "RuntimeDisabled", "ExternalNotSupported", "UsageExceedsLicenseLimit", "LicenseNotCompatible"]  # noqa: E501
        if (self._configuration.client_side_validation and
                license_error_code not in allowed_values):
            raise ValueError(
                "Invalid value for `license_error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(license_error_code, allowed_values)
            )

        self._license_error_code = license_error_code

    @property
    def organization_unit_id(self):
        """Gets the organization_unit_id of this SessionDto.  # noqa: E501

        The folder Id.  # noqa: E501

        :return: The organization_unit_id of this SessionDto.  # noqa: E501
        :rtype: int
        """
        return self._organization_unit_id

    @organization_unit_id.setter
    def organization_unit_id(self, organization_unit_id):
        """Sets the organization_unit_id of this SessionDto.

        The folder Id.  # noqa: E501

        :param organization_unit_id: The organization_unit_id of this SessionDto.  # noqa: E501
        :type: int
        """

        self._organization_unit_id = organization_unit_id

    @property
    def folder_name(self):
        """Gets the folder_name of this SessionDto.  # noqa: E501

        The folder display name.  # noqa: E501

        :return: The folder_name of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this SessionDto.

        The folder display name.  # noqa: E501

        :param folder_name: The folder_name of this SessionDto.  # noqa: E501
        :type: str
        """

        self._folder_name = folder_name

    @property
    def robot_session_type(self):
        """Gets the robot_session_type of this SessionDto.  # noqa: E501

        The robot session type.  # noqa: E501

        :return: The robot_session_type of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._robot_session_type

    @robot_session_type.setter
    def robot_session_type(self, robot_session_type):
        """Sets the robot_session_type of this SessionDto.

        The robot session type.  # noqa: E501

        :param robot_session_type: The robot_session_type of this SessionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["LongLived", "Ephemeral"]  # noqa: E501
        if (self._configuration.client_side_validation and
                robot_session_type not in allowed_values):
            raise ValueError(
                "Invalid value for `robot_session_type` ({0}), must be one of {1}"  # noqa: E501
                .format(robot_session_type, allowed_values)
            )

        self._robot_session_type = robot_session_type

    @property
    def version(self):
        """Gets the version of this SessionDto.  # noqa: E501


        :return: The version of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SessionDto.


        :param version: The version of this SessionDto.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def source(self):
        """Gets the source of this SessionDto.  # noqa: E501


        :return: The source of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SessionDto.


        :param source: The source of this SessionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Assistant", "StudioWeb", "StudioDesktop"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def debug_mode_expiration_date(self):
        """Gets the debug_mode_expiration_date of this SessionDto.  # noqa: E501


        :return: The debug_mode_expiration_date of this SessionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._debug_mode_expiration_date

    @debug_mode_expiration_date.setter
    def debug_mode_expiration_date(self, debug_mode_expiration_date):
        """Sets the debug_mode_expiration_date of this SessionDto.


        :param debug_mode_expiration_date: The debug_mode_expiration_date of this SessionDto.  # noqa: E501
        :type: datetime
        """

        self._debug_mode_expiration_date = debug_mode_expiration_date

    @property
    def update_info(self):
        """Gets the update_info of this SessionDto.  # noqa: E501


        :return: The update_info of this SessionDto.  # noqa: E501
        :rtype: UpdateInfoDto
        """
        return self._update_info

    @update_info.setter
    def update_info(self, update_info):
        """Sets the update_info of this SessionDto.


        :param update_info: The update_info of this SessionDto.  # noqa: E501
        :type: UpdateInfoDto
        """

        self._update_info = update_info

    @property
    def installation_id(self):
        """Gets the installation_id of this SessionDto.  # noqa: E501


        :return: The installation_id of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._installation_id

    @installation_id.setter
    def installation_id(self, installation_id):
        """Sets the installation_id of this SessionDto.


        :param installation_id: The installation_id of this SessionDto.  # noqa: E501
        :type: str
        """

        self._installation_id = installation_id

    @property
    def platform(self):
        """Gets the platform of this SessionDto.  # noqa: E501


        :return: The platform of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this SessionDto.


        :param platform: The platform of this SessionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Windows", "Linux", "OSX"]  # noqa: E501
        if (self._configuration.client_side_validation and
                platform not in allowed_values):
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def endpoint_detection(self):
        """Gets the endpoint_detection of this SessionDto.  # noqa: E501


        :return: The endpoint_detection of this SessionDto.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_detection

    @endpoint_detection.setter
    def endpoint_detection(self, endpoint_detection):
        """Sets the endpoint_detection of this SessionDto.


        :param endpoint_detection: The endpoint_detection of this SessionDto.  # noqa: E501
        :type: str
        """

        self._endpoint_detection = endpoint_detection

    @property
    def id(self):
        """Gets the id of this SessionDto.  # noqa: E501


        :return: The id of this SessionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionDto.


        :param id: The id of this SessionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SessionDto):
            return True

        return self.to_dict() != other.to_dict()
