# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class HostLicenseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenants_count': 'int',
        'id': 'int',
        'expire_date': 'int',
        'grace_period_end_date': 'int',
        'grace_period': 'int',
        'version_control': 'str',
        'allowed': 'dict(str, int)',
        'used': 'dict(str, int)',
        'attended_concurrent': 'bool',
        'development_concurrent': 'bool',
        'studio_x_concurrent': 'bool',
        'studio_pro_concurrent': 'bool',
        'licensed_features': 'list[str]',
        'is_registered': 'bool',
        'is_community': 'bool',
        'is_pro_or_enterprise': 'bool',
        'subscription_code': 'str',
        'subscription_plan': 'str',
        'is_expired': 'bool',
        'creation_time': 'datetime',
        'code': 'str',
        'user_licensing_enabled': 'bool'
    }

    attribute_map = {
        'tenants_count': 'TenantsCount',
        'id': 'Id',
        'expire_date': 'ExpireDate',
        'grace_period_end_date': 'GracePeriodEndDate',
        'grace_period': 'GracePeriod',
        'version_control': 'VersionControl',
        'allowed': 'Allowed',
        'used': 'Used',
        'attended_concurrent': 'AttendedConcurrent',
        'development_concurrent': 'DevelopmentConcurrent',
        'studio_x_concurrent': 'StudioXConcurrent',
        'studio_pro_concurrent': 'StudioProConcurrent',
        'licensed_features': 'LicensedFeatures',
        'is_registered': 'IsRegistered',
        'is_community': 'IsCommunity',
        'is_pro_or_enterprise': 'IsProOrEnterprise',
        'subscription_code': 'SubscriptionCode',
        'subscription_plan': 'SubscriptionPlan',
        'is_expired': 'IsExpired',
        'creation_time': 'CreationTime',
        'code': 'Code',
        'user_licensing_enabled': 'UserLicensingEnabled'
    }

    def __init__(self, tenants_count=None, id=None, expire_date=None, grace_period_end_date=None, grace_period=None, version_control=None, allowed=None, used=None, attended_concurrent=None, development_concurrent=None, studio_x_concurrent=None, studio_pro_concurrent=None, licensed_features=None, is_registered=None, is_community=None, is_pro_or_enterprise=None, subscription_code=None, subscription_plan=None, is_expired=None, creation_time=None, code=None, user_licensing_enabled=None, _configuration=None):  # noqa: E501
        """HostLicenseDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tenants_count = None
        self._id = None
        self._expire_date = None
        self._grace_period_end_date = None
        self._grace_period = None
        self._version_control = None
        self._allowed = None
        self._used = None
        self._attended_concurrent = None
        self._development_concurrent = None
        self._studio_x_concurrent = None
        self._studio_pro_concurrent = None
        self._licensed_features = None
        self._is_registered = None
        self._is_community = None
        self._is_pro_or_enterprise = None
        self._subscription_code = None
        self._subscription_plan = None
        self._is_expired = None
        self._creation_time = None
        self._code = None
        self._user_licensing_enabled = None
        self.discriminator = None

        if tenants_count is not None:
            self.tenants_count = tenants_count
        if id is not None:
            self.id = id
        if expire_date is not None:
            self.expire_date = expire_date
        if grace_period_end_date is not None:
            self.grace_period_end_date = grace_period_end_date
        if grace_period is not None:
            self.grace_period = grace_period
        if version_control is not None:
            self.version_control = version_control
        if allowed is not None:
            self.allowed = allowed
        if used is not None:
            self.used = used
        if attended_concurrent is not None:
            self.attended_concurrent = attended_concurrent
        if development_concurrent is not None:
            self.development_concurrent = development_concurrent
        if studio_x_concurrent is not None:
            self.studio_x_concurrent = studio_x_concurrent
        if studio_pro_concurrent is not None:
            self.studio_pro_concurrent = studio_pro_concurrent
        if licensed_features is not None:
            self.licensed_features = licensed_features
        if is_registered is not None:
            self.is_registered = is_registered
        if is_community is not None:
            self.is_community = is_community
        if is_pro_or_enterprise is not None:
            self.is_pro_or_enterprise = is_pro_or_enterprise
        if subscription_code is not None:
            self.subscription_code = subscription_code
        if subscription_plan is not None:
            self.subscription_plan = subscription_plan
        if is_expired is not None:
            self.is_expired = is_expired
        if creation_time is not None:
            self.creation_time = creation_time
        if code is not None:
            self.code = code
        if user_licensing_enabled is not None:
            self.user_licensing_enabled = user_licensing_enabled

    @property
    def tenants_count(self):
        """Gets the tenants_count of this HostLicenseDto.  # noqa: E501

        The number of tenants licensed from this license file  # noqa: E501

        :return: The tenants_count of this HostLicenseDto.  # noqa: E501
        :rtype: int
        """
        return self._tenants_count

    @tenants_count.setter
    def tenants_count(self, tenants_count):
        """Sets the tenants_count of this HostLicenseDto.

        The number of tenants licensed from this license file  # noqa: E501

        :param tenants_count: The tenants_count of this HostLicenseDto.  # noqa: E501
        :type: int
        """

        self._tenants_count = tenants_count

    @property
    def id(self):
        """Gets the id of this HostLicenseDto.  # noqa: E501

        License Id  # noqa: E501

        :return: The id of this HostLicenseDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostLicenseDto.

        License Id  # noqa: E501

        :param id: The id of this HostLicenseDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def expire_date(self):
        """Gets the expire_date of this HostLicenseDto.  # noqa: E501

        License expiration date in Epoch format  # noqa: E501

        :return: The expire_date of this HostLicenseDto.  # noqa: E501
        :rtype: int
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this HostLicenseDto.

        License expiration date in Epoch format  # noqa: E501

        :param expire_date: The expire_date of this HostLicenseDto.  # noqa: E501
        :type: int
        """

        self._expire_date = expire_date

    @property
    def grace_period_end_date(self):
        """Gets the grace_period_end_date of this HostLicenseDto.  # noqa: E501

        License grace period end date in Epoch format  # noqa: E501

        :return: The grace_period_end_date of this HostLicenseDto.  # noqa: E501
        :rtype: int
        """
        return self._grace_period_end_date

    @grace_period_end_date.setter
    def grace_period_end_date(self, grace_period_end_date):
        """Sets the grace_period_end_date of this HostLicenseDto.

        License grace period end date in Epoch format  # noqa: E501

        :param grace_period_end_date: The grace_period_end_date of this HostLicenseDto.  # noqa: E501
        :type: int
        """

        self._grace_period_end_date = grace_period_end_date

    @property
    def grace_period(self):
        """Gets the grace_period of this HostLicenseDto.  # noqa: E501

        Number of grace period days  # noqa: E501

        :return: The grace_period of this HostLicenseDto.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this HostLicenseDto.

        Number of grace period days  # noqa: E501

        :param grace_period: The grace_period of this HostLicenseDto.  # noqa: E501
        :type: int
        """

        self._grace_period = grace_period

    @property
    def version_control(self):
        """Gets the version_control of this HostLicenseDto.  # noqa: E501

        The product version which can use this license  # noqa: E501

        :return: The version_control of this HostLicenseDto.  # noqa: E501
        :rtype: str
        """
        return self._version_control

    @version_control.setter
    def version_control(self, version_control):
        """Sets the version_control of this HostLicenseDto.

        The product version which can use this license  # noqa: E501

        :param version_control: The version_control of this HostLicenseDto.  # noqa: E501
        :type: str
        """

        self._version_control = version_control

    @property
    def allowed(self):
        """Gets the allowed of this HostLicenseDto.  # noqa: E501

        Contains the number of allowed licenses for each type  # noqa: E501

        :return: The allowed of this HostLicenseDto.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this HostLicenseDto.

        Contains the number of allowed licenses for each type  # noqa: E501

        :param allowed: The allowed of this HostLicenseDto.  # noqa: E501
        :type: dict(str, int)
        """

        self._allowed = allowed

    @property
    def used(self):
        """Gets the used of this HostLicenseDto.  # noqa: E501

        Contains the number of used licenses for each type  # noqa: E501

        :return: The used of this HostLicenseDto.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this HostLicenseDto.

        Contains the number of used licenses for each type  # noqa: E501

        :param used: The used of this HostLicenseDto.  # noqa: E501
        :type: dict(str, int)
        """

        self._used = used

    @property
    def attended_concurrent(self):
        """Gets the attended_concurrent of this HostLicenseDto.  # noqa: E501

        States whether the license is Attended Concurrent  # noqa: E501

        :return: The attended_concurrent of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._attended_concurrent

    @attended_concurrent.setter
    def attended_concurrent(self, attended_concurrent):
        """Sets the attended_concurrent of this HostLicenseDto.

        States whether the license is Attended Concurrent  # noqa: E501

        :param attended_concurrent: The attended_concurrent of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._attended_concurrent = attended_concurrent

    @property
    def development_concurrent(self):
        """Gets the development_concurrent of this HostLicenseDto.  # noqa: E501

        States whether the license is Development Concurrent  # noqa: E501

        :return: The development_concurrent of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._development_concurrent

    @development_concurrent.setter
    def development_concurrent(self, development_concurrent):
        """Sets the development_concurrent of this HostLicenseDto.

        States whether the license is Development Concurrent  # noqa: E501

        :param development_concurrent: The development_concurrent of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._development_concurrent = development_concurrent

    @property
    def studio_x_concurrent(self):
        """Gets the studio_x_concurrent of this HostLicenseDto.  # noqa: E501

        States whether the license is Studio Business Concurrent  # noqa: E501

        :return: The studio_x_concurrent of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._studio_x_concurrent

    @studio_x_concurrent.setter
    def studio_x_concurrent(self, studio_x_concurrent):
        """Sets the studio_x_concurrent of this HostLicenseDto.

        States whether the license is Studio Business Concurrent  # noqa: E501

        :param studio_x_concurrent: The studio_x_concurrent of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._studio_x_concurrent = studio_x_concurrent

    @property
    def studio_pro_concurrent(self):
        """Gets the studio_pro_concurrent of this HostLicenseDto.  # noqa: E501

        States whether the license is Studio Pro Concurrent  # noqa: E501

        :return: The studio_pro_concurrent of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._studio_pro_concurrent

    @studio_pro_concurrent.setter
    def studio_pro_concurrent(self, studio_pro_concurrent):
        """Sets the studio_pro_concurrent of this HostLicenseDto.

        States whether the license is Studio Pro Concurrent  # noqa: E501

        :param studio_pro_concurrent: The studio_pro_concurrent of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._studio_pro_concurrent = studio_pro_concurrent

    @property
    def licensed_features(self):
        """Gets the licensed_features of this HostLicenseDto.  # noqa: E501

        What features are licensed (valid for individually-licensed features, like Analytics)  # noqa: E501

        :return: The licensed_features of this HostLicenseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._licensed_features

    @licensed_features.setter
    def licensed_features(self, licensed_features):
        """Sets the licensed_features of this HostLicenseDto.

        What features are licensed (valid for individually-licensed features, like Analytics)  # noqa: E501

        :param licensed_features: The licensed_features of this HostLicenseDto.  # noqa: E501
        :type: list[str]
        """

        self._licensed_features = licensed_features

    @property
    def is_registered(self):
        """Gets the is_registered of this HostLicenseDto.  # noqa: E501

        True if the current tenant is registered with a license. False otherwise.  # noqa: E501

        :return: The is_registered of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_registered

    @is_registered.setter
    def is_registered(self, is_registered):
        """Sets the is_registered of this HostLicenseDto.

        True if the current tenant is registered with a license. False otherwise.  # noqa: E501

        :param is_registered: The is_registered of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._is_registered = is_registered

    @property
    def is_community(self):
        """Gets the is_community of this HostLicenseDto.  # noqa: E501

        True if the current tenant is registered with a community license.  # noqa: E501

        :return: The is_community of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_community

    @is_community.setter
    def is_community(self, is_community):
        """Sets the is_community of this HostLicenseDto.

        True if the current tenant is registered with a community license.  # noqa: E501

        :param is_community: The is_community of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._is_community = is_community

    @property
    def is_pro_or_enterprise(self):
        """Gets the is_pro_or_enterprise of this HostLicenseDto.  # noqa: E501

        True if the current tenant is registered with a pro license.  # noqa: E501

        :return: The is_pro_or_enterprise of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_pro_or_enterprise

    @is_pro_or_enterprise.setter
    def is_pro_or_enterprise(self, is_pro_or_enterprise):
        """Sets the is_pro_or_enterprise of this HostLicenseDto.

        True if the current tenant is registered with a pro license.  # noqa: E501

        :param is_pro_or_enterprise: The is_pro_or_enterprise of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._is_pro_or_enterprise = is_pro_or_enterprise

    @property
    def subscription_code(self):
        """Gets the subscription_code of this HostLicenseDto.  # noqa: E501

        The license subscription code  # noqa: E501

        :return: The subscription_code of this HostLicenseDto.  # noqa: E501
        :rtype: str
        """
        return self._subscription_code

    @subscription_code.setter
    def subscription_code(self, subscription_code):
        """Sets the subscription_code of this HostLicenseDto.

        The license subscription code  # noqa: E501

        :param subscription_code: The subscription_code of this HostLicenseDto.  # noqa: E501
        :type: str
        """

        self._subscription_code = subscription_code

    @property
    def subscription_plan(self):
        """Gets the subscription_plan of this HostLicenseDto.  # noqa: E501

        The license subscription plan  # noqa: E501

        :return: The subscription_plan of this HostLicenseDto.  # noqa: E501
        :rtype: str
        """
        return self._subscription_plan

    @subscription_plan.setter
    def subscription_plan(self, subscription_plan):
        """Sets the subscription_plan of this HostLicenseDto.

        The license subscription plan  # noqa: E501

        :param subscription_plan: The subscription_plan of this HostLicenseDto.  # noqa: E501
        :type: str
        """

        self._subscription_plan = subscription_plan

    @property
    def is_expired(self):
        """Gets the is_expired of this HostLicenseDto.  # noqa: E501

        States whether the license is still valid or not.  # noqa: E501

        :return: The is_expired of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_expired

    @is_expired.setter
    def is_expired(self, is_expired):
        """Sets the is_expired of this HostLicenseDto.

        States whether the license is still valid or not.  # noqa: E501

        :param is_expired: The is_expired of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._is_expired = is_expired

    @property
    def creation_time(self):
        """Gets the creation_time of this HostLicenseDto.  # noqa: E501

        The date when the license was uploaded.  # noqa: E501

        :return: The creation_time of this HostLicenseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this HostLicenseDto.

        The date when the license was uploaded.  # noqa: E501

        :param creation_time: The creation_time of this HostLicenseDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def code(self):
        """Gets the code of this HostLicenseDto.  # noqa: E501

        The license code.  # noqa: E501

        :return: The code of this HostLicenseDto.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this HostLicenseDto.

        The license code.  # noqa: E501

        :param code: The code of this HostLicenseDto.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def user_licensing_enabled(self):
        """Gets the user_licensing_enabled of this HostLicenseDto.  # noqa: E501

        Whether user licensing is enabled or not.  # noqa: E501

        :return: The user_licensing_enabled of this HostLicenseDto.  # noqa: E501
        :rtype: bool
        """
        return self._user_licensing_enabled

    @user_licensing_enabled.setter
    def user_licensing_enabled(self, user_licensing_enabled):
        """Sets the user_licensing_enabled of this HostLicenseDto.

        Whether user licensing is enabled or not.  # noqa: E501

        :param user_licensing_enabled: The user_licensing_enabled of this HostLicenseDto.  # noqa: E501
        :type: bool
        """

        self._user_licensing_enabled = user_licensing_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostLicenseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostLicenseDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostLicenseDto):
            return True

        return self.to_dict() != other.to_dict()
