# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TaskDefintionVersionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_definition_name': 'str',
        'task_defintion_current_version': 'int',
        'task_defintion_creation_date': 'datetime',
        'task_defintion_updation_time': 'datetime',
        'task_defintion_versions': 'list[TaskDefintionAssociatedVersionsDto]'
    }

    attribute_map = {
        'task_definition_name': 'TaskDefinitionName',
        'task_defintion_current_version': 'TaskDefintionCurrentVersion',
        'task_defintion_creation_date': 'TaskDefintionCreationDate',
        'task_defintion_updation_time': 'TaskDefintionUpdationTime',
        'task_defintion_versions': 'TaskDefintionVersions'
    }

    def __init__(self, task_definition_name=None, task_defintion_current_version=None, task_defintion_creation_date=None, task_defintion_updation_time=None, task_defintion_versions=None, _configuration=None):  # noqa: E501
        """TaskDefintionVersionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._task_definition_name = None
        self._task_defintion_current_version = None
        self._task_defintion_creation_date = None
        self._task_defintion_updation_time = None
        self._task_defintion_versions = None
        self.discriminator = None

        if task_definition_name is not None:
            self.task_definition_name = task_definition_name
        if task_defintion_current_version is not None:
            self.task_defintion_current_version = task_defintion_current_version
        if task_defintion_creation_date is not None:
            self.task_defintion_creation_date = task_defintion_creation_date
        if task_defintion_updation_time is not None:
            self.task_defintion_updation_time = task_defintion_updation_time
        if task_defintion_versions is not None:
            self.task_defintion_versions = task_defintion_versions

    @property
    def task_definition_name(self):
        """Gets the task_definition_name of this TaskDefintionVersionDto.  # noqa: E501


        :return: The task_definition_name of this TaskDefintionVersionDto.  # noqa: E501
        :rtype: str
        """
        return self._task_definition_name

    @task_definition_name.setter
    def task_definition_name(self, task_definition_name):
        """Sets the task_definition_name of this TaskDefintionVersionDto.


        :param task_definition_name: The task_definition_name of this TaskDefintionVersionDto.  # noqa: E501
        :type: str
        """

        self._task_definition_name = task_definition_name

    @property
    def task_defintion_current_version(self):
        """Gets the task_defintion_current_version of this TaskDefintionVersionDto.  # noqa: E501


        :return: The task_defintion_current_version of this TaskDefintionVersionDto.  # noqa: E501
        :rtype: int
        """
        return self._task_defintion_current_version

    @task_defintion_current_version.setter
    def task_defintion_current_version(self, task_defintion_current_version):
        """Sets the task_defintion_current_version of this TaskDefintionVersionDto.


        :param task_defintion_current_version: The task_defintion_current_version of this TaskDefintionVersionDto.  # noqa: E501
        :type: int
        """

        self._task_defintion_current_version = task_defintion_current_version

    @property
    def task_defintion_creation_date(self):
        """Gets the task_defintion_creation_date of this TaskDefintionVersionDto.  # noqa: E501


        :return: The task_defintion_creation_date of this TaskDefintionVersionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._task_defintion_creation_date

    @task_defintion_creation_date.setter
    def task_defintion_creation_date(self, task_defintion_creation_date):
        """Sets the task_defintion_creation_date of this TaskDefintionVersionDto.


        :param task_defintion_creation_date: The task_defintion_creation_date of this TaskDefintionVersionDto.  # noqa: E501
        :type: datetime
        """

        self._task_defintion_creation_date = task_defintion_creation_date

    @property
    def task_defintion_updation_time(self):
        """Gets the task_defintion_updation_time of this TaskDefintionVersionDto.  # noqa: E501


        :return: The task_defintion_updation_time of this TaskDefintionVersionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._task_defintion_updation_time

    @task_defintion_updation_time.setter
    def task_defintion_updation_time(self, task_defintion_updation_time):
        """Sets the task_defintion_updation_time of this TaskDefintionVersionDto.


        :param task_defintion_updation_time: The task_defintion_updation_time of this TaskDefintionVersionDto.  # noqa: E501
        :type: datetime
        """

        self._task_defintion_updation_time = task_defintion_updation_time

    @property
    def task_defintion_versions(self):
        """Gets the task_defintion_versions of this TaskDefintionVersionDto.  # noqa: E501


        :return: The task_defintion_versions of this TaskDefintionVersionDto.  # noqa: E501
        :rtype: list[TaskDefintionAssociatedVersionsDto]
        """
        return self._task_defintion_versions

    @task_defintion_versions.setter
    def task_defintion_versions(self, task_defintion_versions):
        """Sets the task_defintion_versions of this TaskDefintionVersionDto.


        :param task_defintion_versions: The task_defintion_versions of this TaskDefintionVersionDto.  # noqa: E501
        :type: list[TaskDefintionAssociatedVersionsDto]
        """

        self._task_defintion_versions = task_defintion_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDefintionVersionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDefintionVersionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskDefintionVersionDto):
            return True

        return self.to_dict() != other.to_dict()
