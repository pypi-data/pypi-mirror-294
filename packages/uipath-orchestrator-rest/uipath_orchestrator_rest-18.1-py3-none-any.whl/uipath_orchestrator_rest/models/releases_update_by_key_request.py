# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class ReleasesUpdateByKeyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'release_key': 'str',
        'process_version': 'str',
        'entry_point_path': 'str',
        'input_args': 'str'
    }

    attribute_map = {
        'release_key': 'releaseKey',
        'process_version': 'processVersion',
        'entry_point_path': 'entryPointPath',
        'input_args': 'inputArgs'
    }

    def __init__(self, release_key=None, process_version=None, entry_point_path=None, input_args=None, _configuration=None):  # noqa: E501
        """ReleasesUpdateByKeyRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._release_key = None
        self._process_version = None
        self._entry_point_path = None
        self._input_args = None
        self.discriminator = None

        self.release_key = release_key
        if process_version is not None:
            self.process_version = process_version
        if entry_point_path is not None:
            self.entry_point_path = entry_point_path
        if input_args is not None:
            self.input_args = input_args

    @property
    def release_key(self):
        """Gets the release_key of this ReleasesUpdateByKeyRequest.  # noqa: E501


        :return: The release_key of this ReleasesUpdateByKeyRequest.  # noqa: E501
        :rtype: str
        """
        return self._release_key

    @release_key.setter
    def release_key(self, release_key):
        """Sets the release_key of this ReleasesUpdateByKeyRequest.


        :param release_key: The release_key of this ReleasesUpdateByKeyRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and release_key is None:
            raise ValueError("Invalid value for `release_key`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                release_key is not None and len(release_key) < 1):
            raise ValueError("Invalid value for `release_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._release_key = release_key

    @property
    def process_version(self):
        """Gets the process_version of this ReleasesUpdateByKeyRequest.  # noqa: E501


        :return: The process_version of this ReleasesUpdateByKeyRequest.  # noqa: E501
        :rtype: str
        """
        return self._process_version

    @process_version.setter
    def process_version(self, process_version):
        """Sets the process_version of this ReleasesUpdateByKeyRequest.


        :param process_version: The process_version of this ReleasesUpdateByKeyRequest.  # noqa: E501
        :type: str
        """

        self._process_version = process_version

    @property
    def entry_point_path(self):
        """Gets the entry_point_path of this ReleasesUpdateByKeyRequest.  # noqa: E501


        :return: The entry_point_path of this ReleasesUpdateByKeyRequest.  # noqa: E501
        :rtype: str
        """
        return self._entry_point_path

    @entry_point_path.setter
    def entry_point_path(self, entry_point_path):
        """Sets the entry_point_path of this ReleasesUpdateByKeyRequest.


        :param entry_point_path: The entry_point_path of this ReleasesUpdateByKeyRequest.  # noqa: E501
        :type: str
        """

        self._entry_point_path = entry_point_path

    @property
    def input_args(self):
        """Gets the input_args of this ReleasesUpdateByKeyRequest.  # noqa: E501


        :return: The input_args of this ReleasesUpdateByKeyRequest.  # noqa: E501
        :rtype: str
        """
        return self._input_args

    @input_args.setter
    def input_args(self, input_args):
        """Sets the input_args of this ReleasesUpdateByKeyRequest.


        :param input_args: The input_args of this ReleasesUpdateByKeyRequest.  # noqa: E501
        :type: str
        """

        self._input_args = input_args

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleasesUpdateByKeyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleasesUpdateByKeyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReleasesUpdateByKeyRequest):
            return True

        return self.to_dict() != other.to_dict()
