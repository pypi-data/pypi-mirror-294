# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class AttendedRobotDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'execution_settings': 'dict(str, object)',
        'robot_id': 'int',
        'robot_type': 'str'
    }

    attribute_map = {
        'user_name': 'UserName',
        'execution_settings': 'ExecutionSettings',
        'robot_id': 'RobotId',
        'robot_type': 'RobotType'
    }

    def __init__(self, user_name=None, execution_settings=None, robot_id=None, robot_type=None, _configuration=None):  # noqa: E501
        """AttendedRobotDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_name = None
        self._execution_settings = None
        self._robot_id = None
        self._robot_type = None
        self.discriminator = None

        if user_name is not None:
            self.user_name = user_name
        if execution_settings is not None:
            self.execution_settings = execution_settings
        if robot_id is not None:
            self.robot_id = robot_id
        if robot_type is not None:
            self.robot_type = robot_type

    @property
    def user_name(self):
        """Gets the user_name of this AttendedRobotDto.  # noqa: E501

        The UserName used to authenticate on the Host Machine.  # noqa: E501

        :return: The user_name of this AttendedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AttendedRobotDto.

        The UserName used to authenticate on the Host Machine.  # noqa: E501

        :param user_name: The user_name of this AttendedRobotDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_name is not None and len(user_name) > 100):
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_name is not None and len(user_name) < 0):
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._user_name = user_name

    @property
    def execution_settings(self):
        """Gets the execution_settings of this AttendedRobotDto.  # noqa: E501

        An object containing execution settings for the Robot.  # noqa: E501

        :return: The execution_settings of this AttendedRobotDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._execution_settings

    @execution_settings.setter
    def execution_settings(self, execution_settings):
        """Sets the execution_settings of this AttendedRobotDto.

        An object containing execution settings for the Robot.  # noqa: E501

        :param execution_settings: The execution_settings of this AttendedRobotDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._execution_settings = execution_settings

    @property
    def robot_id(self):
        """Gets the robot_id of this AttendedRobotDto.  # noqa: E501

        The actual Id of the provisioned Robot.  # noqa: E501

        :return: The robot_id of this AttendedRobotDto.  # noqa: E501
        :rtype: int
        """
        return self._robot_id

    @robot_id.setter
    def robot_id(self, robot_id):
        """Sets the robot_id of this AttendedRobotDto.

        The actual Id of the provisioned Robot.  # noqa: E501

        :param robot_id: The robot_id of this AttendedRobotDto.  # noqa: E501
        :type: int
        """

        self._robot_id = robot_id

    @property
    def robot_type(self):
        """Gets the robot_type of this AttendedRobotDto.  # noqa: E501

        The actual Type of the provisioned Robot.  # noqa: E501

        :return: The robot_type of this AttendedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._robot_type

    @robot_type.setter
    def robot_type(self, robot_type):
        """Sets the robot_type of this AttendedRobotDto.

        The actual Type of the provisioned Robot.  # noqa: E501

        :param robot_type: The robot_type of this AttendedRobotDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NonProduction", "Attended", "Unattended", "Development", "Studio", "RpaDeveloper", "StudioX", "CitizenDeveloper", "Headless", "StudioPro", "RpaDeveloperPro", "TestAutomation", "AutomationCloud", "Serverless", "AutomationKit", "ServerlessTestAutomation", "AutomationCloudTestAutomation", "AttendedStudioWeb"]  # noqa: E501
        if (self._configuration.client_side_validation and
                robot_type not in allowed_values):
            raise ValueError(
                "Invalid value for `robot_type` ({0}), must be one of {1}"  # noqa: E501
                .format(robot_type, allowed_values)
            )

        self._robot_type = robot_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttendedRobotDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttendedRobotDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttendedRobotDto):
            return True

        return self.to_dict() != other.to_dict()
