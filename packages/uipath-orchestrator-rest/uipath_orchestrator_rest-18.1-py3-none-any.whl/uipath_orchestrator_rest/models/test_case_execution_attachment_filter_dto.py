# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TestCaseExecutionAttachmentFilterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_case_execution_id': 'int',
        'job_key': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'test_case_execution_id': 'testCaseExecutionId',
        'job_key': 'jobKey',
        'tags': 'tags'
    }

    def __init__(self, test_case_execution_id=None, job_key=None, tags=None, _configuration=None):  # noqa: E501
        """TestCaseExecutionAttachmentFilterDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._test_case_execution_id = None
        self._job_key = None
        self._tags = None
        self.discriminator = None

        if test_case_execution_id is not None:
            self.test_case_execution_id = test_case_execution_id
        if job_key is not None:
            self.job_key = job_key
        if tags is not None:
            self.tags = tags

    @property
    def test_case_execution_id(self):
        """Gets the test_case_execution_id of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501


        :return: The test_case_execution_id of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501
        :rtype: int
        """
        return self._test_case_execution_id

    @test_case_execution_id.setter
    def test_case_execution_id(self, test_case_execution_id):
        """Sets the test_case_execution_id of this TestCaseExecutionAttachmentFilterDto.


        :param test_case_execution_id: The test_case_execution_id of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501
        :type: int
        """

        self._test_case_execution_id = test_case_execution_id

    @property
    def job_key(self):
        """Gets the job_key of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501


        :return: The job_key of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._job_key

    @job_key.setter
    def job_key(self, job_key):
        """Sets the job_key of this TestCaseExecutionAttachmentFilterDto.


        :param job_key: The job_key of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501
        :type: str
        """

        self._job_key = job_key

    @property
    def tags(self):
        """Gets the tags of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501


        :return: The tags of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TestCaseExecutionAttachmentFilterDto.


        :param tags: The tags of this TestCaseExecutionAttachmentFilterDto.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCaseExecutionAttachmentFilterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCaseExecutionAttachmentFilterDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestCaseExecutionAttachmentFilterDto):
            return True

        return self.to_dict() != other.to_dict()
