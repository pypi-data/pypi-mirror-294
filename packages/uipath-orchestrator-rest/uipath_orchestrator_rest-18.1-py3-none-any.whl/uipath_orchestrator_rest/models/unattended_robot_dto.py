# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class UnattendedRobotDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'password': 'str',
        'credential_store_id': 'int',
        'credential_type': 'str',
        'credential_external_name': 'str',
        'execution_settings': 'dict(str, object)',
        'limit_concurrent_execution': 'bool',
        'robot_id': 'int',
        'machine_mappings_count': 'int'
    }

    attribute_map = {
        'user_name': 'UserName',
        'password': 'Password',
        'credential_store_id': 'CredentialStoreId',
        'credential_type': 'CredentialType',
        'credential_external_name': 'CredentialExternalName',
        'execution_settings': 'ExecutionSettings',
        'limit_concurrent_execution': 'LimitConcurrentExecution',
        'robot_id': 'RobotId',
        'machine_mappings_count': 'MachineMappingsCount'
    }

    def __init__(self, user_name=None, password=None, credential_store_id=None, credential_type=None, credential_external_name=None, execution_settings=None, limit_concurrent_execution=None, robot_id=None, machine_mappings_count=None, _configuration=None):  # noqa: E501
        """UnattendedRobotDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_name = None
        self._password = None
        self._credential_store_id = None
        self._credential_type = None
        self._credential_external_name = None
        self._execution_settings = None
        self._limit_concurrent_execution = None
        self._robot_id = None
        self._machine_mappings_count = None
        self.discriminator = None

        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if credential_store_id is not None:
            self.credential_store_id = credential_store_id
        if credential_type is not None:
            self.credential_type = credential_type
        if credential_external_name is not None:
            self.credential_external_name = credential_external_name
        if execution_settings is not None:
            self.execution_settings = execution_settings
        if limit_concurrent_execution is not None:
            self.limit_concurrent_execution = limit_concurrent_execution
        if robot_id is not None:
            self.robot_id = robot_id
        if machine_mappings_count is not None:
            self.machine_mappings_count = machine_mappings_count

    @property
    def user_name(self):
        """Gets the user_name of this UnattendedRobotDto.  # noqa: E501

        The UserName used to authenticate on the Host Machine.  # noqa: E501

        :return: The user_name of this UnattendedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UnattendedRobotDto.

        The UserName used to authenticate on the Host Machine.  # noqa: E501

        :param user_name: The user_name of this UnattendedRobotDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_name is not None and len(user_name) > 100):
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_name is not None and len(user_name) < 0):
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this UnattendedRobotDto.  # noqa: E501

        The Password used to authenticate on the Host Machine.  # noqa: E501

        :return: The password of this UnattendedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UnattendedRobotDto.

        The Password used to authenticate on the Host Machine.  # noqa: E501

        :param password: The password of this UnattendedRobotDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 100):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 0):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `0`")  # noqa: E501

        self._password = password

    @property
    def credential_store_id(self):
        """Gets the credential_store_id of this UnattendedRobotDto.  # noqa: E501

        The Credential Store used to store the password.  # noqa: E501

        :return: The credential_store_id of this UnattendedRobotDto.  # noqa: E501
        :rtype: int
        """
        return self._credential_store_id

    @credential_store_id.setter
    def credential_store_id(self, credential_store_id):
        """Sets the credential_store_id of this UnattendedRobotDto.

        The Credential Store used to store the password.  # noqa: E501

        :param credential_store_id: The credential_store_id of this UnattendedRobotDto.  # noqa: E501
        :type: int
        """

        self._credential_store_id = credential_store_id

    @property
    def credential_type(self):
        """Gets the credential_type of this UnattendedRobotDto.  # noqa: E501

        The robot credentials type (Default/ SmartCard)  # noqa: E501

        :return: The credential_type of this UnattendedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this UnattendedRobotDto.

        The robot credentials type (Default/ SmartCard)  # noqa: E501

        :param credential_type: The credential_type of this UnattendedRobotDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "SmartCard", "NCipher", "SafeNet", "NoCredential"]  # noqa: E501
        if (self._configuration.client_side_validation and
                credential_type not in allowed_values):
            raise ValueError(
                "Invalid value for `credential_type` ({0}), must be one of {1}"  # noqa: E501
                .format(credential_type, allowed_values)
            )

        self._credential_type = credential_type

    @property
    def credential_external_name(self):
        """Gets the credential_external_name of this UnattendedRobotDto.  # noqa: E501

        Contains the value of the key in the external store used to store the password.  # noqa: E501

        :return: The credential_external_name of this UnattendedRobotDto.  # noqa: E501
        :rtype: str
        """
        return self._credential_external_name

    @credential_external_name.setter
    def credential_external_name(self, credential_external_name):
        """Sets the credential_external_name of this UnattendedRobotDto.

        Contains the value of the key in the external store used to store the password.  # noqa: E501

        :param credential_external_name: The credential_external_name of this UnattendedRobotDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                credential_external_name is not None and len(credential_external_name) > 450):
            raise ValueError("Invalid value for `credential_external_name`, length must be less than or equal to `450`")  # noqa: E501
        if (self._configuration.client_side_validation and
                credential_external_name is not None and len(credential_external_name) < 0):
            raise ValueError("Invalid value for `credential_external_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._credential_external_name = credential_external_name

    @property
    def execution_settings(self):
        """Gets the execution_settings of this UnattendedRobotDto.  # noqa: E501

        An object containing execution settings for the Robot.  # noqa: E501

        :return: The execution_settings of this UnattendedRobotDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._execution_settings

    @execution_settings.setter
    def execution_settings(self, execution_settings):
        """Sets the execution_settings of this UnattendedRobotDto.

        An object containing execution settings for the Robot.  # noqa: E501

        :param execution_settings: The execution_settings of this UnattendedRobotDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._execution_settings = execution_settings

    @property
    def limit_concurrent_execution(self):
        """Gets the limit_concurrent_execution of this UnattendedRobotDto.  # noqa: E501

        Specifies if the robot can be used concurrently on multiple machines  # noqa: E501

        :return: The limit_concurrent_execution of this UnattendedRobotDto.  # noqa: E501
        :rtype: bool
        """
        return self._limit_concurrent_execution

    @limit_concurrent_execution.setter
    def limit_concurrent_execution(self, limit_concurrent_execution):
        """Sets the limit_concurrent_execution of this UnattendedRobotDto.

        Specifies if the robot can be used concurrently on multiple machines  # noqa: E501

        :param limit_concurrent_execution: The limit_concurrent_execution of this UnattendedRobotDto.  # noqa: E501
        :type: bool
        """

        self._limit_concurrent_execution = limit_concurrent_execution

    @property
    def robot_id(self):
        """Gets the robot_id of this UnattendedRobotDto.  # noqa: E501

        The actual Id of the provisioned Robot.  # noqa: E501

        :return: The robot_id of this UnattendedRobotDto.  # noqa: E501
        :rtype: int
        """
        return self._robot_id

    @robot_id.setter
    def robot_id(self, robot_id):
        """Sets the robot_id of this UnattendedRobotDto.

        The actual Id of the provisioned Robot.  # noqa: E501

        :param robot_id: The robot_id of this UnattendedRobotDto.  # noqa: E501
        :type: int
        """

        self._robot_id = robot_id

    @property
    def machine_mappings_count(self):
        """Gets the machine_mappings_count of this UnattendedRobotDto.  # noqa: E501

        Number of assigned machine mappings.  # noqa: E501

        :return: The machine_mappings_count of this UnattendedRobotDto.  # noqa: E501
        :rtype: int
        """
        return self._machine_mappings_count

    @machine_mappings_count.setter
    def machine_mappings_count(self, machine_mappings_count):
        """Sets the machine_mappings_count of this UnattendedRobotDto.

        Number of assigned machine mappings.  # noqa: E501

        :param machine_mappings_count: The machine_mappings_count of this UnattendedRobotDto.  # noqa: E501
        :type: int
        """

        self._machine_mappings_count = machine_mappings_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnattendedRobotDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnattendedRobotDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UnattendedRobotDto):
            return True

        return self.to_dict() != other.to_dict()
