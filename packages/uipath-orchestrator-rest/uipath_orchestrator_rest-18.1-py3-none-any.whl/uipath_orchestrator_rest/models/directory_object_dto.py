# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class DirectoryObjectDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'source': 'str',
        'domain': 'str',
        'identifier': 'str',
        'identity_name': 'str',
        'display_name': 'str'
    }

    attribute_map = {
        'type': 'type',
        'source': 'source',
        'domain': 'domain',
        'identifier': 'identifier',
        'identity_name': 'identityName',
        'display_name': 'displayName'
    }

    def __init__(self, type=None, source=None, domain=None, identifier=None, identity_name=None, display_name=None, _configuration=None):  # noqa: E501
        """DirectoryObjectDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._source = None
        self._domain = None
        self._identifier = None
        self._identity_name = None
        self._display_name = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if source is not None:
            self.source = source
        if domain is not None:
            self.domain = domain
        if identifier is not None:
            self.identifier = identifier
        if identity_name is not None:
            self.identity_name = identity_name
        if display_name is not None:
            self.display_name = display_name

    @property
    def type(self):
        """Gets the type of this DirectoryObjectDto.  # noqa: E501


        :return: The type of this DirectoryObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DirectoryObjectDto.


        :param type: The type of this DirectoryObjectDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["User", "Group", "Machine", "Robot", "ExternalApplication"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def source(self):
        """Gets the source of this DirectoryObjectDto.  # noqa: E501


        :return: The source of this DirectoryObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DirectoryObjectDto.


        :param source: The source of this DirectoryObjectDto.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def domain(self):
        """Gets the domain of this DirectoryObjectDto.  # noqa: E501


        :return: The domain of this DirectoryObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DirectoryObjectDto.


        :param domain: The domain of this DirectoryObjectDto.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def identifier(self):
        """Gets the identifier of this DirectoryObjectDto.  # noqa: E501


        :return: The identifier of this DirectoryObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this DirectoryObjectDto.


        :param identifier: The identifier of this DirectoryObjectDto.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def identity_name(self):
        """Gets the identity_name of this DirectoryObjectDto.  # noqa: E501


        :return: The identity_name of this DirectoryObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._identity_name

    @identity_name.setter
    def identity_name(self, identity_name):
        """Sets the identity_name of this DirectoryObjectDto.


        :param identity_name: The identity_name of this DirectoryObjectDto.  # noqa: E501
        :type: str
        """

        self._identity_name = identity_name

    @property
    def display_name(self):
        """Gets the display_name of this DirectoryObjectDto.  # noqa: E501


        :return: The display_name of this DirectoryObjectDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DirectoryObjectDto.


        :param display_name: The display_name of this DirectoryObjectDto.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryObjectDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryObjectDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DirectoryObjectDto):
            return True

        return self.to_dict() != other.to_dict()
