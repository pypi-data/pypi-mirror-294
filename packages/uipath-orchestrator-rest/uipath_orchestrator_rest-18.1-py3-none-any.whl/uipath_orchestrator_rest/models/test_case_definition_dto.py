# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TestCaseDefinitionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'package_identifier': 'str',
        'unique_id': 'str',
        'app_version': 'str',
        'created_version': 'str',
        'latest_version': 'str',
        'latest_prerelease_version': 'str',
        'feed_id': 'str',
        'last_modification_time': 'datetime',
        'last_modifier_user_id': 'int',
        'creation_time': 'datetime',
        'creator_user_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'package_identifier': 'PackageIdentifier',
        'unique_id': 'UniqueId',
        'app_version': 'AppVersion',
        'created_version': 'CreatedVersion',
        'latest_version': 'LatestVersion',
        'latest_prerelease_version': 'LatestPrereleaseVersion',
        'feed_id': 'FeedId',
        'last_modification_time': 'LastModificationTime',
        'last_modifier_user_id': 'LastModifierUserId',
        'creation_time': 'CreationTime',
        'creator_user_id': 'CreatorUserId',
        'id': 'Id'
    }

    def __init__(self, name=None, package_identifier=None, unique_id=None, app_version=None, created_version=None, latest_version=None, latest_prerelease_version=None, feed_id=None, last_modification_time=None, last_modifier_user_id=None, creation_time=None, creator_user_id=None, id=None, _configuration=None):  # noqa: E501
        """TestCaseDefinitionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._package_identifier = None
        self._unique_id = None
        self._app_version = None
        self._created_version = None
        self._latest_version = None
        self._latest_prerelease_version = None
        self._feed_id = None
        self._last_modification_time = None
        self._last_modifier_user_id = None
        self._creation_time = None
        self._creator_user_id = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if package_identifier is not None:
            self.package_identifier = package_identifier
        if unique_id is not None:
            self.unique_id = unique_id
        if app_version is not None:
            self.app_version = app_version
        if created_version is not None:
            self.created_version = created_version
        if latest_version is not None:
            self.latest_version = latest_version
        if latest_prerelease_version is not None:
            self.latest_prerelease_version = latest_prerelease_version
        if feed_id is not None:
            self.feed_id = feed_id
        if last_modification_time is not None:
            self.last_modification_time = last_modification_time
        if last_modifier_user_id is not None:
            self.last_modifier_user_id = last_modifier_user_id
        if creation_time is not None:
            self.creation_time = creation_time
        if creator_user_id is not None:
            self.creator_user_id = creator_user_id
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this TestCaseDefinitionDto.  # noqa: E501


        :return: The name of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestCaseDefinitionDto.


        :param name: The name of this TestCaseDefinitionDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def package_identifier(self):
        """Gets the package_identifier of this TestCaseDefinitionDto.  # noqa: E501


        :return: The package_identifier of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._package_identifier

    @package_identifier.setter
    def package_identifier(self, package_identifier):
        """Sets the package_identifier of this TestCaseDefinitionDto.


        :param package_identifier: The package_identifier of this TestCaseDefinitionDto.  # noqa: E501
        :type: str
        """

        self._package_identifier = package_identifier

    @property
    def unique_id(self):
        """Gets the unique_id of this TestCaseDefinitionDto.  # noqa: E501


        :return: The unique_id of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this TestCaseDefinitionDto.


        :param unique_id: The unique_id of this TestCaseDefinitionDto.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def app_version(self):
        """Gets the app_version of this TestCaseDefinitionDto.  # noqa: E501


        :return: The app_version of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this TestCaseDefinitionDto.


        :param app_version: The app_version of this TestCaseDefinitionDto.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def created_version(self):
        """Gets the created_version of this TestCaseDefinitionDto.  # noqa: E501


        :return: The created_version of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._created_version

    @created_version.setter
    def created_version(self, created_version):
        """Sets the created_version of this TestCaseDefinitionDto.


        :param created_version: The created_version of this TestCaseDefinitionDto.  # noqa: E501
        :type: str
        """

        self._created_version = created_version

    @property
    def latest_version(self):
        """Gets the latest_version of this TestCaseDefinitionDto.  # noqa: E501


        :return: The latest_version of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this TestCaseDefinitionDto.


        :param latest_version: The latest_version of this TestCaseDefinitionDto.  # noqa: E501
        :type: str
        """

        self._latest_version = latest_version

    @property
    def latest_prerelease_version(self):
        """Gets the latest_prerelease_version of this TestCaseDefinitionDto.  # noqa: E501


        :return: The latest_prerelease_version of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._latest_prerelease_version

    @latest_prerelease_version.setter
    def latest_prerelease_version(self, latest_prerelease_version):
        """Sets the latest_prerelease_version of this TestCaseDefinitionDto.


        :param latest_prerelease_version: The latest_prerelease_version of this TestCaseDefinitionDto.  # noqa: E501
        :type: str
        """

        self._latest_prerelease_version = latest_prerelease_version

    @property
    def feed_id(self):
        """Gets the feed_id of this TestCaseDefinitionDto.  # noqa: E501


        :return: The feed_id of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id):
        """Sets the feed_id of this TestCaseDefinitionDto.


        :param feed_id: The feed_id of this TestCaseDefinitionDto.  # noqa: E501
        :type: str
        """

        self._feed_id = feed_id

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this TestCaseDefinitionDto.  # noqa: E501


        :return: The last_modification_time of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this TestCaseDefinitionDto.


        :param last_modification_time: The last_modification_time of this TestCaseDefinitionDto.  # noqa: E501
        :type: datetime
        """

        self._last_modification_time = last_modification_time

    @property
    def last_modifier_user_id(self):
        """Gets the last_modifier_user_id of this TestCaseDefinitionDto.  # noqa: E501


        :return: The last_modifier_user_id of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modifier_user_id

    @last_modifier_user_id.setter
    def last_modifier_user_id(self, last_modifier_user_id):
        """Sets the last_modifier_user_id of this TestCaseDefinitionDto.


        :param last_modifier_user_id: The last_modifier_user_id of this TestCaseDefinitionDto.  # noqa: E501
        :type: int
        """

        self._last_modifier_user_id = last_modifier_user_id

    @property
    def creation_time(self):
        """Gets the creation_time of this TestCaseDefinitionDto.  # noqa: E501


        :return: The creation_time of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TestCaseDefinitionDto.


        :param creation_time: The creation_time of this TestCaseDefinitionDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this TestCaseDefinitionDto.  # noqa: E501


        :return: The creator_user_id of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this TestCaseDefinitionDto.


        :param creator_user_id: The creator_user_id of this TestCaseDefinitionDto.  # noqa: E501
        :type: int
        """

        self._creator_user_id = creator_user_id

    @property
    def id(self):
        """Gets the id of this TestCaseDefinitionDto.  # noqa: E501


        :return: The id of this TestCaseDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestCaseDefinitionDto.


        :param id: The id of this TestCaseDefinitionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCaseDefinitionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCaseDefinitionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestCaseDefinitionDto):
            return True

        return self.to_dict() != other.to_dict()
