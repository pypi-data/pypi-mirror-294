# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TaskCatalogRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'encrypted': 'bool',
        'tags': 'list[TagDto]',
        'retention_action': 'str',
        'retention_period': 'int',
        'retention_bucket_id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'description': 'Description',
        'encrypted': 'Encrypted',
        'tags': 'Tags',
        'retention_action': 'RetentionAction',
        'retention_period': 'RetentionPeriod',
        'retention_bucket_id': 'RetentionBucketId'
    }

    def __init__(self, name=None, description=None, encrypted=None, tags=None, retention_action=None, retention_period=None, retention_bucket_id=None, _configuration=None):  # noqa: E501
        """TaskCatalogRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._encrypted = None
        self._tags = None
        self._retention_action = None
        self._retention_period = None
        self._retention_bucket_id = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if encrypted is not None:
            self.encrypted = encrypted
        if tags is not None:
            self.tags = tags
        if retention_action is not None:
            self.retention_action = retention_action
        if retention_period is not None:
            self.retention_period = retention_period
        if retention_bucket_id is not None:
            self.retention_bucket_id = retention_bucket_id

    @property
    def name(self):
        """Gets the name of this TaskCatalogRequest.  # noqa: E501

        Name of the Task Catalog.  # noqa: E501

        :return: The name of this TaskCatalogRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskCatalogRequest.

        Name of the Task Catalog.  # noqa: E501

        :param name: The name of this TaskCatalogRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TaskCatalogRequest.  # noqa: E501

        Description of this task catalog.  # noqa: E501

        :return: The description of this TaskCatalogRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskCatalogRequest.

        Description of this task catalog.  # noqa: E501

        :param description: The description of this TaskCatalogRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 512):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")  # noqa: E501

        self._description = description

    @property
    def encrypted(self):
        """Gets the encrypted of this TaskCatalogRequest.  # noqa: E501


        :return: The encrypted of this TaskCatalogRequest.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this TaskCatalogRequest.


        :param encrypted: The encrypted of this TaskCatalogRequest.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def tags(self):
        """Gets the tags of this TaskCatalogRequest.  # noqa: E501


        :return: The tags of this TaskCatalogRequest.  # noqa: E501
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TaskCatalogRequest.


        :param tags: The tags of this TaskCatalogRequest.  # noqa: E501
        :type: list[TagDto]
        """

        self._tags = tags

    @property
    def retention_action(self):
        """Gets the retention_action of this TaskCatalogRequest.  # noqa: E501

        Action to take at retention limit  # noqa: E501

        :return: The retention_action of this TaskCatalogRequest.  # noqa: E501
        :rtype: str
        """
        return self._retention_action

    @retention_action.setter
    def retention_action(self, retention_action):
        """Sets the retention_action of this TaskCatalogRequest.

        Action to take at retention limit  # noqa: E501

        :param retention_action: The retention_action of this TaskCatalogRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Delete", "Archive", "None"]  # noqa: E501
        if (self._configuration.client_side_validation and
                retention_action not in allowed_values):
            raise ValueError(
                "Invalid value for `retention_action` ({0}), must be one of {1}"  # noqa: E501
                .format(retention_action, allowed_values)
            )

        self._retention_action = retention_action

    @property
    def retention_period(self):
        """Gets the retention_period of this TaskCatalogRequest.  # noqa: E501

        Retention period  # noqa: E501

        :return: The retention_period of this TaskCatalogRequest.  # noqa: E501
        :rtype: int
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this TaskCatalogRequest.

        Retention period  # noqa: E501

        :param retention_period: The retention_period of this TaskCatalogRequest.  # noqa: E501
        :type: int
        """

        self._retention_period = retention_period

    @property
    def retention_bucket_id(self):
        """Gets the retention_bucket_id of this TaskCatalogRequest.  # noqa: E501

        Retention bucket Id  # noqa: E501

        :return: The retention_bucket_id of this TaskCatalogRequest.  # noqa: E501
        :rtype: int
        """
        return self._retention_bucket_id

    @retention_bucket_id.setter
    def retention_bucket_id(self, retention_bucket_id):
        """Sets the retention_bucket_id of this TaskCatalogRequest.

        Retention bucket Id  # noqa: E501

        :param retention_bucket_id: The retention_bucket_id of this TaskCatalogRequest.  # noqa: E501
        :type: int
        """

        self._retention_bucket_id = retention_bucket_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskCatalogRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskCatalogRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskCatalogRequest):
            return True

        return self.to_dict() != other.to_dict()
