# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class ProcessScheduleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'enabled': 'bool',
        'name': 'str',
        'release_id': 'int',
        'release_key': 'str',
        'release_name': 'str',
        'package_name': 'str',
        'environment_name': 'str',
        'environment_id': 'str',
        'job_priority': 'str',
        'specific_priority_value': 'int',
        'runtime_type': 'str',
        'start_process_cron': 'str',
        'start_process_cron_details': 'str',
        'start_process_cron_summary': 'str',
        'start_process_next_occurrence': 'datetime',
        'start_strategy': 'int',
        'executor_robots': 'list[RobotExecutorDto]',
        'stop_process_expression': 'str',
        'stop_strategy': 'str',
        'kill_process_expression': 'str',
        'external_job_key': 'str',
        'external_job_key_scheduler': 'str',
        'time_zone_id': 'str',
        'time_zone_iana': 'str',
        'use_calendar': 'bool',
        'calendar_id': 'int',
        'calendar_name': 'str',
        'calendar_key': 'str',
        'stop_process_date': 'datetime',
        'input_arguments': 'str',
        'queue_definition_id': 'int',
        'queue_definition_name': 'str',
        'activate_on_job_complete': 'bool',
        'items_activation_threshold': 'int',
        'items_per_job_activation_target': 'int',
        'max_jobs_for_activation': 'int',
        'resume_on_same_context': 'bool',
        'description': 'str',
        'machine_robots': 'list[MachineRobotSessionDto]',
        'tags': 'list[TagDto]',
        'alert_pending_expression': 'str',
        'alert_running_expression': 'str',
        'run_as_me': 'bool',
        'consecutive_job_failures_threshold': 'int',
        'job_failures_grace_period_in_hours': 'int',
        'is_connected': 'bool',
        'id': 'int'
    }

    attribute_map = {
        'key': 'Key',
        'enabled': 'Enabled',
        'name': 'Name',
        'release_id': 'ReleaseId',
        'release_key': 'ReleaseKey',
        'release_name': 'ReleaseName',
        'package_name': 'PackageName',
        'environment_name': 'EnvironmentName',
        'environment_id': 'EnvironmentId',
        'job_priority': 'JobPriority',
        'specific_priority_value': 'SpecificPriorityValue',
        'runtime_type': 'RuntimeType',
        'start_process_cron': 'StartProcessCron',
        'start_process_cron_details': 'StartProcessCronDetails',
        'start_process_cron_summary': 'StartProcessCronSummary',
        'start_process_next_occurrence': 'StartProcessNextOccurrence',
        'start_strategy': 'StartStrategy',
        'executor_robots': 'ExecutorRobots',
        'stop_process_expression': 'StopProcessExpression',
        'stop_strategy': 'StopStrategy',
        'kill_process_expression': 'KillProcessExpression',
        'external_job_key': 'ExternalJobKey',
        'external_job_key_scheduler': 'ExternalJobKeyScheduler',
        'time_zone_id': 'TimeZoneId',
        'time_zone_iana': 'TimeZoneIana',
        'use_calendar': 'UseCalendar',
        'calendar_id': 'CalendarId',
        'calendar_name': 'CalendarName',
        'calendar_key': 'CalendarKey',
        'stop_process_date': 'StopProcessDate',
        'input_arguments': 'InputArguments',
        'queue_definition_id': 'QueueDefinitionId',
        'queue_definition_name': 'QueueDefinitionName',
        'activate_on_job_complete': 'ActivateOnJobComplete',
        'items_activation_threshold': 'ItemsActivationThreshold',
        'items_per_job_activation_target': 'ItemsPerJobActivationTarget',
        'max_jobs_for_activation': 'MaxJobsForActivation',
        'resume_on_same_context': 'ResumeOnSameContext',
        'description': 'Description',
        'machine_robots': 'MachineRobots',
        'tags': 'Tags',
        'alert_pending_expression': 'AlertPendingExpression',
        'alert_running_expression': 'AlertRunningExpression',
        'run_as_me': 'RunAsMe',
        'consecutive_job_failures_threshold': 'ConsecutiveJobFailuresThreshold',
        'job_failures_grace_period_in_hours': 'JobFailuresGracePeriodInHours',
        'is_connected': 'IsConnected',
        'id': 'Id'
    }

    def __init__(self, key=None, enabled=None, name=None, release_id=None, release_key=None, release_name=None, package_name=None, environment_name=None, environment_id=None, job_priority=None, specific_priority_value=None, runtime_type=None, start_process_cron=None, start_process_cron_details=None, start_process_cron_summary=None, start_process_next_occurrence=None, start_strategy=None, executor_robots=None, stop_process_expression=None, stop_strategy=None, kill_process_expression=None, external_job_key=None, external_job_key_scheduler=None, time_zone_id=None, time_zone_iana=None, use_calendar=None, calendar_id=None, calendar_name=None, calendar_key=None, stop_process_date=None, input_arguments=None, queue_definition_id=None, queue_definition_name=None, activate_on_job_complete=None, items_activation_threshold=None, items_per_job_activation_target=None, max_jobs_for_activation=None, resume_on_same_context=None, description=None, machine_robots=None, tags=None, alert_pending_expression=None, alert_running_expression=None, run_as_me=None, consecutive_job_failures_threshold=None, job_failures_grace_period_in_hours=None, is_connected=None, id=None, _configuration=None):  # noqa: E501
        """ProcessScheduleDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._enabled = None
        self._name = None
        self._release_id = None
        self._release_key = None
        self._release_name = None
        self._package_name = None
        self._environment_name = None
        self._environment_id = None
        self._job_priority = None
        self._specific_priority_value = None
        self._runtime_type = None
        self._start_process_cron = None
        self._start_process_cron_details = None
        self._start_process_cron_summary = None
        self._start_process_next_occurrence = None
        self._start_strategy = None
        self._executor_robots = None
        self._stop_process_expression = None
        self._stop_strategy = None
        self._kill_process_expression = None
        self._external_job_key = None
        self._external_job_key_scheduler = None
        self._time_zone_id = None
        self._time_zone_iana = None
        self._use_calendar = None
        self._calendar_id = None
        self._calendar_name = None
        self._calendar_key = None
        self._stop_process_date = None
        self._input_arguments = None
        self._queue_definition_id = None
        self._queue_definition_name = None
        self._activate_on_job_complete = None
        self._items_activation_threshold = None
        self._items_per_job_activation_target = None
        self._max_jobs_for_activation = None
        self._resume_on_same_context = None
        self._description = None
        self._machine_robots = None
        self._tags = None
        self._alert_pending_expression = None
        self._alert_running_expression = None
        self._run_as_me = None
        self._consecutive_job_failures_threshold = None
        self._job_failures_grace_period_in_hours = None
        self._is_connected = None
        self._id = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if enabled is not None:
            self.enabled = enabled
        self.name = name
        if release_id is not None:
            self.release_id = release_id
        if release_key is not None:
            self.release_key = release_key
        if release_name is not None:
            self.release_name = release_name
        if package_name is not None:
            self.package_name = package_name
        if environment_name is not None:
            self.environment_name = environment_name
        if environment_id is not None:
            self.environment_id = environment_id
        if job_priority is not None:
            self.job_priority = job_priority
        if specific_priority_value is not None:
            self.specific_priority_value = specific_priority_value
        if runtime_type is not None:
            self.runtime_type = runtime_type
        if start_process_cron is not None:
            self.start_process_cron = start_process_cron
        if start_process_cron_details is not None:
            self.start_process_cron_details = start_process_cron_details
        if start_process_cron_summary is not None:
            self.start_process_cron_summary = start_process_cron_summary
        if start_process_next_occurrence is not None:
            self.start_process_next_occurrence = start_process_next_occurrence
        if start_strategy is not None:
            self.start_strategy = start_strategy
        if executor_robots is not None:
            self.executor_robots = executor_robots
        if stop_process_expression is not None:
            self.stop_process_expression = stop_process_expression
        if stop_strategy is not None:
            self.stop_strategy = stop_strategy
        if kill_process_expression is not None:
            self.kill_process_expression = kill_process_expression
        if external_job_key is not None:
            self.external_job_key = external_job_key
        if external_job_key_scheduler is not None:
            self.external_job_key_scheduler = external_job_key_scheduler
        self.time_zone_id = time_zone_id
        if time_zone_iana is not None:
            self.time_zone_iana = time_zone_iana
        if use_calendar is not None:
            self.use_calendar = use_calendar
        if calendar_id is not None:
            self.calendar_id = calendar_id
        if calendar_name is not None:
            self.calendar_name = calendar_name
        if calendar_key is not None:
            self.calendar_key = calendar_key
        if stop_process_date is not None:
            self.stop_process_date = stop_process_date
        if input_arguments is not None:
            self.input_arguments = input_arguments
        if queue_definition_id is not None:
            self.queue_definition_id = queue_definition_id
        if queue_definition_name is not None:
            self.queue_definition_name = queue_definition_name
        if activate_on_job_complete is not None:
            self.activate_on_job_complete = activate_on_job_complete
        if items_activation_threshold is not None:
            self.items_activation_threshold = items_activation_threshold
        if items_per_job_activation_target is not None:
            self.items_per_job_activation_target = items_per_job_activation_target
        if max_jobs_for_activation is not None:
            self.max_jobs_for_activation = max_jobs_for_activation
        if resume_on_same_context is not None:
            self.resume_on_same_context = resume_on_same_context
        if description is not None:
            self.description = description
        if machine_robots is not None:
            self.machine_robots = machine_robots
        if tags is not None:
            self.tags = tags
        if alert_pending_expression is not None:
            self.alert_pending_expression = alert_pending_expression
        if alert_running_expression is not None:
            self.alert_running_expression = alert_running_expression
        if run_as_me is not None:
            self.run_as_me = run_as_me
        if consecutive_job_failures_threshold is not None:
            self.consecutive_job_failures_threshold = consecutive_job_failures_threshold
        if job_failures_grace_period_in_hours is not None:
            self.job_failures_grace_period_in_hours = job_failures_grace_period_in_hours
        if is_connected is not None:
            self.is_connected = is_connected
        if id is not None:
            self.id = id

    @property
    def key(self):
        """Gets the key of this ProcessScheduleDto.  # noqa: E501

        The Key of the process schedule.  # noqa: E501

        :return: The key of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ProcessScheduleDto.

        The Key of the process schedule.  # noqa: E501

        :param key: The key of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def enabled(self):
        """Gets the enabled of this ProcessScheduleDto.  # noqa: E501

        Specifies if the schedule is active or not.  # noqa: E501

        :return: The enabled of this ProcessScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ProcessScheduleDto.

        Specifies if the schedule is active or not.  # noqa: E501

        :param enabled: The enabled of this ProcessScheduleDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this ProcessScheduleDto.  # noqa: E501

        The name of the schedule.  # noqa: E501

        :return: The name of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProcessScheduleDto.

        The name of the schedule.  # noqa: E501

        :param name: The name of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def release_id(self):
        """Gets the release_id of this ProcessScheduleDto.  # noqa: E501

        The Id of the process associated with the schedule.  # noqa: E501

        :return: The release_id of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this ProcessScheduleDto.

        The Id of the process associated with the schedule.  # noqa: E501

        :param release_id: The release_id of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """

        self._release_id = release_id

    @property
    def release_key(self):
        """Gets the release_key of this ProcessScheduleDto.  # noqa: E501

        The unique key of the process associated with the schedule.  # noqa: E501

        :return: The release_key of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._release_key

    @release_key.setter
    def release_key(self, release_key):
        """Sets the release_key of this ProcessScheduleDto.

        The unique key of the process associated with the schedule.  # noqa: E501

        :param release_key: The release_key of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._release_key = release_key

    @property
    def release_name(self):
        """Gets the release_name of this ProcessScheduleDto.  # noqa: E501

        The name of the process associated with the schedule.  # noqa: E501

        :return: The release_name of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._release_name

    @release_name.setter
    def release_name(self, release_name):
        """Sets the release_name of this ProcessScheduleDto.

        The name of the process associated with the schedule.  # noqa: E501

        :param release_name: The release_name of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._release_name = release_name

    @property
    def package_name(self):
        """Gets the package_name of this ProcessScheduleDto.  # noqa: E501

        The name of the package to be triggered with the schedule.  # noqa: E501

        :return: The package_name of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this ProcessScheduleDto.

        The name of the package to be triggered with the schedule.  # noqa: E501

        :param package_name: The package_name of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._package_name = package_name

    @property
    def environment_name(self):
        """Gets the environment_name of this ProcessScheduleDto.  # noqa: E501

        The name of the environment associated with the schedule.  # noqa: E501

        :return: The environment_name of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this ProcessScheduleDto.

        The name of the environment associated with the schedule.  # noqa: E501

        :param environment_name: The environment_name of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._environment_name = environment_name

    @property
    def environment_id(self):
        """Gets the environment_id of this ProcessScheduleDto.  # noqa: E501

        The Id of the environment associated with the schedule.  # noqa: E501

        :return: The environment_id of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this ProcessScheduleDto.

        The Id of the environment associated with the schedule.  # noqa: E501

        :param environment_id: The environment_id of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    @property
    def job_priority(self):
        """Gets the job_priority of this ProcessScheduleDto.  # noqa: E501

        The execution priority. If null, it will start jobs with the release's priority.  # noqa: E501

        :return: The job_priority of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._job_priority

    @job_priority.setter
    def job_priority(self, job_priority):
        """Sets the job_priority of this ProcessScheduleDto.

        The execution priority. If null, it will start jobs with the release's priority.  # noqa: E501

        :param job_priority: The job_priority of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Low", "Normal", "High"]  # noqa: E501
        if (self._configuration.client_side_validation and
                job_priority not in allowed_values):
            raise ValueError(
                "Invalid value for `job_priority` ({0}), must be one of {1}"  # noqa: E501
                .format(job_priority, allowed_values)
            )

        self._job_priority = job_priority

    @property
    def specific_priority_value(self):
        """Gets the specific_priority_value of this ProcessScheduleDto.  # noqa: E501

        Value for more granular control over execution priority.  # noqa: E501

        :return: The specific_priority_value of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._specific_priority_value

    @specific_priority_value.setter
    def specific_priority_value(self, specific_priority_value):
        """Sets the specific_priority_value of this ProcessScheduleDto.

        Value for more granular control over execution priority.  # noqa: E501

        :param specific_priority_value: The specific_priority_value of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                specific_priority_value is not None and specific_priority_value > 100):  # noqa: E501
            raise ValueError("Invalid value for `specific_priority_value`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                specific_priority_value is not None and specific_priority_value < 1):  # noqa: E501
            raise ValueError("Invalid value for `specific_priority_value`, must be a value greater than or equal to `1`")  # noqa: E501

        self._specific_priority_value = specific_priority_value

    @property
    def runtime_type(self):
        """Gets the runtime_type of this ProcessScheduleDto.  # noqa: E501

        The runtime type of the robot  # noqa: E501

        :return: The runtime_type of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """Sets the runtime_type of this ProcessScheduleDto.

        The runtime type of the robot  # noqa: E501

        :param runtime_type: The runtime_type of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NonProduction", "Attended", "Unattended", "Development", "Studio", "RpaDeveloper", "StudioX", "CitizenDeveloper", "Headless", "StudioPro", "RpaDeveloperPro", "TestAutomation", "AutomationCloud", "Serverless", "AutomationKit", "ServerlessTestAutomation", "AutomationCloudTestAutomation", "AttendedStudioWeb"]  # noqa: E501
        if (self._configuration.client_side_validation and
                runtime_type not in allowed_values):
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    @property
    def start_process_cron(self):
        """Gets the start_process_cron of this ProcessScheduleDto.  # noqa: E501

        The start cron expression of the schedule.  # noqa: E501

        :return: The start_process_cron of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._start_process_cron

    @start_process_cron.setter
    def start_process_cron(self, start_process_cron):
        """Sets the start_process_cron of this ProcessScheduleDto.

        The start cron expression of the schedule.  # noqa: E501

        :param start_process_cron: The start_process_cron of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._start_process_cron = start_process_cron

    @property
    def start_process_cron_details(self):
        """Gets the start_process_cron_details of this ProcessScheduleDto.  # noqa: E501

        Various details that can be associated to the time period expression of the schedule.  # noqa: E501

        :return: The start_process_cron_details of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._start_process_cron_details

    @start_process_cron_details.setter
    def start_process_cron_details(self, start_process_cron_details):
        """Sets the start_process_cron_details of this ProcessScheduleDto.

        Various details that can be associated to the time period expression of the schedule.  # noqa: E501

        :param start_process_cron_details: The start_process_cron_details of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._start_process_cron_details = start_process_cron_details

    @property
    def start_process_cron_summary(self):
        """Gets the start_process_cron_summary of this ProcessScheduleDto.  # noqa: E501

        Human readable form of cron expression of the schedule.  # noqa: E501

        :return: The start_process_cron_summary of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._start_process_cron_summary

    @start_process_cron_summary.setter
    def start_process_cron_summary(self, start_process_cron_summary):
        """Sets the start_process_cron_summary of this ProcessScheduleDto.

        Human readable form of cron expression of the schedule.  # noqa: E501

        :param start_process_cron_summary: The start_process_cron_summary of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._start_process_cron_summary = start_process_cron_summary

    @property
    def start_process_next_occurrence(self):
        """Gets the start_process_next_occurrence of this ProcessScheduleDto.  # noqa: E501

        The date and time when the associated process will be run next.  # noqa: E501

        :return: The start_process_next_occurrence of this ProcessScheduleDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_process_next_occurrence

    @start_process_next_occurrence.setter
    def start_process_next_occurrence(self, start_process_next_occurrence):
        """Sets the start_process_next_occurrence of this ProcessScheduleDto.

        The date and time when the associated process will be run next.  # noqa: E501

        :param start_process_next_occurrence: The start_process_next_occurrence of this ProcessScheduleDto.  # noqa: E501
        :type: datetime
        """

        self._start_process_next_occurrence = start_process_next_occurrence

    @property
    def start_strategy(self):
        """Gets the start_strategy of this ProcessScheduleDto.  # noqa: E501

        States which robots from the environment are being run by the schedule.  # noqa: E501

        :return: The start_strategy of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._start_strategy

    @start_strategy.setter
    def start_strategy(self, start_strategy):
        """Sets the start_strategy of this ProcessScheduleDto.

        States which robots from the environment are being run by the schedule.  # noqa: E501

        :param start_strategy: The start_strategy of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """

        self._start_strategy = start_strategy

    @property
    def executor_robots(self):
        """Gets the executor_robots of this ProcessScheduleDto.  # noqa: E501

        The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).  # noqa: E501

        :return: The executor_robots of this ProcessScheduleDto.  # noqa: E501
        :rtype: list[RobotExecutorDto]
        """
        return self._executor_robots

    @executor_robots.setter
    def executor_robots(self, executor_robots):
        """Sets the executor_robots of this ProcessScheduleDto.

        The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).  # noqa: E501

        :param executor_robots: The executor_robots of this ProcessScheduleDto.  # noqa: E501
        :type: list[RobotExecutorDto]
        """

        self._executor_robots = executor_robots

    @property
    def stop_process_expression(self):
        """Gets the stop_process_expression of this ProcessScheduleDto.  # noqa: E501

        Number of seconds after which a running process will be stopped.  # noqa: E501

        :return: The stop_process_expression of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._stop_process_expression

    @stop_process_expression.setter
    def stop_process_expression(self, stop_process_expression):
        """Sets the stop_process_expression of this ProcessScheduleDto.

        Number of seconds after which a running process will be stopped.  # noqa: E501

        :param stop_process_expression: The stop_process_expression of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._stop_process_expression = stop_process_expression

    @property
    def stop_strategy(self):
        """Gets the stop_strategy of this ProcessScheduleDto.  # noqa: E501

        The way a running process is stopped.  # noqa: E501

        :return: The stop_strategy of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._stop_strategy

    @stop_strategy.setter
    def stop_strategy(self, stop_strategy):
        """Sets the stop_strategy of this ProcessScheduleDto.

        The way a running process is stopped.  # noqa: E501

        :param stop_strategy: The stop_strategy of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["SoftStop", "Kill"]  # noqa: E501
        if (self._configuration.client_side_validation and
                stop_strategy not in allowed_values):
            raise ValueError(
                "Invalid value for `stop_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(stop_strategy, allowed_values)
            )

        self._stop_strategy = stop_strategy

    @property
    def kill_process_expression(self):
        """Gets the kill_process_expression of this ProcessScheduleDto.  # noqa: E501

        Grace period (in seconds) for soft stop. If a process doesn't stop after this amount, it will be killed  # noqa: E501

        :return: The kill_process_expression of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._kill_process_expression

    @kill_process_expression.setter
    def kill_process_expression(self, kill_process_expression):
        """Sets the kill_process_expression of this ProcessScheduleDto.

        Grace period (in seconds) for soft stop. If a process doesn't stop after this amount, it will be killed  # noqa: E501

        :param kill_process_expression: The kill_process_expression of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._kill_process_expression = kill_process_expression

    @property
    def external_job_key(self):
        """Gets the external_job_key of this ProcessScheduleDto.  # noqa: E501

        The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.  # noqa: E501

        :return: The external_job_key of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._external_job_key

    @external_job_key.setter
    def external_job_key(self, external_job_key):
        """Sets the external_job_key of this ProcessScheduleDto.

        The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.  # noqa: E501

        :param external_job_key: The external_job_key of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._external_job_key = external_job_key

    @property
    def external_job_key_scheduler(self):
        """Gets the external_job_key_scheduler of this ProcessScheduleDto.  # noqa: E501

        The unique identifier of the external background task schedule associated with the background tasks generated by this schedule. A key is generated for each batch of background tasks triggered by this schedule.  # noqa: E501

        :return: The external_job_key_scheduler of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._external_job_key_scheduler

    @external_job_key_scheduler.setter
    def external_job_key_scheduler(self, external_job_key_scheduler):
        """Sets the external_job_key_scheduler of this ProcessScheduleDto.

        The unique identifier of the external background task schedule associated with the background tasks generated by this schedule. A key is generated for each batch of background tasks triggered by this schedule.  # noqa: E501

        :param external_job_key_scheduler: The external_job_key_scheduler of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._external_job_key_scheduler = external_job_key_scheduler

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this ProcessScheduleDto.  # noqa: E501

        The timezone under which the schedule will run.  # noqa: E501

        :return: The time_zone_id of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this ProcessScheduleDto.

        The timezone under which the schedule will run.  # noqa: E501

        :param time_zone_id: The time_zone_id of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_zone_id is None:
            raise ValueError("Invalid value for `time_zone_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_zone_id is not None and len(time_zone_id) > 80):
            raise ValueError("Invalid value for `time_zone_id`, length must be less than or equal to `80`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_zone_id is not None and len(time_zone_id) < 1):
            raise ValueError("Invalid value for `time_zone_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._time_zone_id = time_zone_id

    @property
    def time_zone_iana(self):
        """Gets the time_zone_iana of this ProcessScheduleDto.  # noqa: E501

        The timezone under which the schedule will run in Iana Standard.  # noqa: E501

        :return: The time_zone_iana of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_iana

    @time_zone_iana.setter
    def time_zone_iana(self, time_zone_iana):
        """Sets the time_zone_iana of this ProcessScheduleDto.

        The timezone under which the schedule will run in Iana Standard.  # noqa: E501

        :param time_zone_iana: The time_zone_iana of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._time_zone_iana = time_zone_iana

    @property
    def use_calendar(self):
        """Gets the use_calendar of this ProcessScheduleDto.  # noqa: E501

        DEPRECATED. Specify whether the schedule uses any calendar.  # noqa: E501

        :return: The use_calendar of this ProcessScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_calendar

    @use_calendar.setter
    def use_calendar(self, use_calendar):
        """Sets the use_calendar of this ProcessScheduleDto.

        DEPRECATED. Specify whether the schedule uses any calendar.  # noqa: E501

        :param use_calendar: The use_calendar of this ProcessScheduleDto.  # noqa: E501
        :type: bool
        """

        self._use_calendar = use_calendar

    @property
    def calendar_id(self):
        """Gets the calendar_id of this ProcessScheduleDto.  # noqa: E501

        The id of the calendar that a process schedule uses.  # noqa: E501

        :return: The calendar_id of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this ProcessScheduleDto.

        The id of the calendar that a process schedule uses.  # noqa: E501

        :param calendar_id: The calendar_id of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """

        self._calendar_id = calendar_id

    @property
    def calendar_name(self):
        """Gets the calendar_name of this ProcessScheduleDto.  # noqa: E501

        The name of the calendar.  # noqa: E501

        :return: The calendar_name of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._calendar_name

    @calendar_name.setter
    def calendar_name(self, calendar_name):
        """Sets the calendar_name of this ProcessScheduleDto.

        The name of the calendar.  # noqa: E501

        :param calendar_name: The calendar_name of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._calendar_name = calendar_name

    @property
    def calendar_key(self):
        """Gets the calendar_key of this ProcessScheduleDto.  # noqa: E501


        :return: The calendar_key of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._calendar_key

    @calendar_key.setter
    def calendar_key(self, calendar_key):
        """Sets the calendar_key of this ProcessScheduleDto.


        :param calendar_key: The calendar_key of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._calendar_key = calendar_key

    @property
    def stop_process_date(self):
        """Gets the stop_process_date of this ProcessScheduleDto.  # noqa: E501


        :return: The stop_process_date of this ProcessScheduleDto.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_process_date

    @stop_process_date.setter
    def stop_process_date(self, stop_process_date):
        """Sets the stop_process_date of this ProcessScheduleDto.


        :param stop_process_date: The stop_process_date of this ProcessScheduleDto.  # noqa: E501
        :type: datetime
        """

        self._stop_process_date = stop_process_date

    @property
    def input_arguments(self):
        """Gets the input_arguments of this ProcessScheduleDto.  # noqa: E501

        Input parameters that will be passed to each job created by this schedule.  # noqa: E501

        :return: The input_arguments of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._input_arguments

    @input_arguments.setter
    def input_arguments(self, input_arguments):
        """Sets the input_arguments of this ProcessScheduleDto.

        Input parameters that will be passed to each job created by this schedule.  # noqa: E501

        :param input_arguments: The input_arguments of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                input_arguments is not None and len(input_arguments) > 10000):
            raise ValueError("Invalid value for `input_arguments`, length must be less than or equal to `10000`")  # noqa: E501

        self._input_arguments = input_arguments

    @property
    def queue_definition_id(self):
        """Gets the queue_definition_id of this ProcessScheduleDto.  # noqa: E501

        The Id of the queue that uses this schedule for activation (trigger jobs when new queue items are added)  # noqa: E501

        :return: The queue_definition_id of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._queue_definition_id

    @queue_definition_id.setter
    def queue_definition_id(self, queue_definition_id):
        """Sets the queue_definition_id of this ProcessScheduleDto.

        The Id of the queue that uses this schedule for activation (trigger jobs when new queue items are added)  # noqa: E501

        :param queue_definition_id: The queue_definition_id of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """

        self._queue_definition_id = queue_definition_id

    @property
    def queue_definition_name(self):
        """Gets the queue_definition_name of this ProcessScheduleDto.  # noqa: E501

        The Name of the queue that uses this schedule for activation (trigger jobs when new queue items are added)  # noqa: E501

        :return: The queue_definition_name of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._queue_definition_name

    @queue_definition_name.setter
    def queue_definition_name(self, queue_definition_name):
        """Sets the queue_definition_name of this ProcessScheduleDto.

        The Name of the queue that uses this schedule for activation (trigger jobs when new queue items are added)  # noqa: E501

        :param queue_definition_name: The queue_definition_name of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._queue_definition_name = queue_definition_name

    @property
    def activate_on_job_complete(self):
        """Gets the activate_on_job_complete of this ProcessScheduleDto.  # noqa: E501

        Flag for activating the queue trigger on each completed job.  # noqa: E501

        :return: The activate_on_job_complete of this ProcessScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._activate_on_job_complete

    @activate_on_job_complete.setter
    def activate_on_job_complete(self, activate_on_job_complete):
        """Sets the activate_on_job_complete of this ProcessScheduleDto.

        Flag for activating the queue trigger on each completed job.  # noqa: E501

        :param activate_on_job_complete: The activate_on_job_complete of this ProcessScheduleDto.  # noqa: E501
        :type: bool
        """

        self._activate_on_job_complete = activate_on_job_complete

    @property
    def items_activation_threshold(self):
        """Gets the items_activation_threshold of this ProcessScheduleDto.  # noqa: E501

        The minimum number of queue items that should trigger the process activation.  # noqa: E501

        :return: The items_activation_threshold of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._items_activation_threshold

    @items_activation_threshold.setter
    def items_activation_threshold(self, items_activation_threshold):
        """Sets the items_activation_threshold of this ProcessScheduleDto.

        The minimum number of queue items that should trigger the process activation.  # noqa: E501

        :param items_activation_threshold: The items_activation_threshold of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                items_activation_threshold is not None and items_activation_threshold > 10000):  # noqa: E501
            raise ValueError("Invalid value for `items_activation_threshold`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                items_activation_threshold is not None and items_activation_threshold < 1):  # noqa: E501
            raise ValueError("Invalid value for `items_activation_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._items_activation_threshold = items_activation_threshold

    @property
    def items_per_job_activation_target(self):
        """Gets the items_per_job_activation_target of this ProcessScheduleDto.  # noqa: E501

        The target ratio between the number of queue items and the Total number of jobs created by a process.  # noqa: E501

        :return: The items_per_job_activation_target of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._items_per_job_activation_target

    @items_per_job_activation_target.setter
    def items_per_job_activation_target(self, items_per_job_activation_target):
        """Sets the items_per_job_activation_target of this ProcessScheduleDto.

        The target ratio between the number of queue items and the Total number of jobs created by a process.  # noqa: E501

        :param items_per_job_activation_target: The items_per_job_activation_target of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                items_per_job_activation_target is not None and items_per_job_activation_target > 10000):  # noqa: E501
            raise ValueError("Invalid value for `items_per_job_activation_target`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                items_per_job_activation_target is not None and items_per_job_activation_target < 1):  # noqa: E501
            raise ValueError("Invalid value for `items_per_job_activation_target`, must be a value greater than or equal to `1`")  # noqa: E501

        self._items_per_job_activation_target = items_per_job_activation_target

    @property
    def max_jobs_for_activation(self):
        """Gets the max_jobs_for_activation of this ProcessScheduleDto.  # noqa: E501

        The maximum number of jobs that a process can create as result of a Queue driven activation.  # noqa: E501

        :return: The max_jobs_for_activation of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._max_jobs_for_activation

    @max_jobs_for_activation.setter
    def max_jobs_for_activation(self, max_jobs_for_activation):
        """Sets the max_jobs_for_activation of this ProcessScheduleDto.

        The maximum number of jobs that a process can create as result of a Queue driven activation.  # noqa: E501

        :param max_jobs_for_activation: The max_jobs_for_activation of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_jobs_for_activation is not None and max_jobs_for_activation > 10000):  # noqa: E501
            raise ValueError("Invalid value for `max_jobs_for_activation`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_jobs_for_activation is not None and max_jobs_for_activation < 1):  # noqa: E501
            raise ValueError("Invalid value for `max_jobs_for_activation`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_jobs_for_activation = max_jobs_for_activation

    @property
    def resume_on_same_context(self):
        """Gets the resume_on_same_context of this ProcessScheduleDto.  # noqa: E501

        Flag for honoring initial machine and robot choice upon resumption of created jobs, if jobs are suspended. <br />  If set, the jobs will resume on the same robot-machine pair on which they initially ran.  # noqa: E501

        :return: The resume_on_same_context of this ProcessScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._resume_on_same_context

    @resume_on_same_context.setter
    def resume_on_same_context(self, resume_on_same_context):
        """Sets the resume_on_same_context of this ProcessScheduleDto.

        Flag for honoring initial machine and robot choice upon resumption of created jobs, if jobs are suspended. <br />  If set, the jobs will resume on the same robot-machine pair on which they initially ran.  # noqa: E501

        :param resume_on_same_context: The resume_on_same_context of this ProcessScheduleDto.  # noqa: E501
        :type: bool
        """

        self._resume_on_same_context = resume_on_same_context

    @property
    def description(self):
        """Gets the description of this ProcessScheduleDto.  # noqa: E501

        Description of process schedule.  # noqa: E501

        :return: The description of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProcessScheduleDto.

        Description of process schedule.  # noqa: E501

        :param description: The description of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 512):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")  # noqa: E501

        self._description = description

    @property
    def machine_robots(self):
        """Gets the machine_robots of this ProcessScheduleDto.  # noqa: E501

        The machine robots.  # noqa: E501

        :return: The machine_robots of this ProcessScheduleDto.  # noqa: E501
        :rtype: list[MachineRobotSessionDto]
        """
        return self._machine_robots

    @machine_robots.setter
    def machine_robots(self, machine_robots):
        """Sets the machine_robots of this ProcessScheduleDto.

        The machine robots.  # noqa: E501

        :param machine_robots: The machine_robots of this ProcessScheduleDto.  # noqa: E501
        :type: list[MachineRobotSessionDto]
        """

        self._machine_robots = machine_robots

    @property
    def tags(self):
        """Gets the tags of this ProcessScheduleDto.  # noqa: E501


        :return: The tags of this ProcessScheduleDto.  # noqa: E501
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProcessScheduleDto.


        :param tags: The tags of this ProcessScheduleDto.  # noqa: E501
        :type: list[TagDto]
        """

        self._tags = tags

    @property
    def alert_pending_expression(self):
        """Gets the alert_pending_expression of this ProcessScheduleDto.  # noqa: E501


        :return: The alert_pending_expression of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._alert_pending_expression

    @alert_pending_expression.setter
    def alert_pending_expression(self, alert_pending_expression):
        """Sets the alert_pending_expression of this ProcessScheduleDto.


        :param alert_pending_expression: The alert_pending_expression of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._alert_pending_expression = alert_pending_expression

    @property
    def alert_running_expression(self):
        """Gets the alert_running_expression of this ProcessScheduleDto.  # noqa: E501


        :return: The alert_running_expression of this ProcessScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._alert_running_expression

    @alert_running_expression.setter
    def alert_running_expression(self, alert_running_expression):
        """Sets the alert_running_expression of this ProcessScheduleDto.


        :param alert_running_expression: The alert_running_expression of this ProcessScheduleDto.  # noqa: E501
        :type: str
        """

        self._alert_running_expression = alert_running_expression

    @property
    def run_as_me(self):
        """Gets the run_as_me of this ProcessScheduleDto.  # noqa: E501


        :return: The run_as_me of this ProcessScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._run_as_me

    @run_as_me.setter
    def run_as_me(self, run_as_me):
        """Sets the run_as_me of this ProcessScheduleDto.


        :param run_as_me: The run_as_me of this ProcessScheduleDto.  # noqa: E501
        :type: bool
        """

        self._run_as_me = run_as_me

    @property
    def consecutive_job_failures_threshold(self):
        """Gets the consecutive_job_failures_threshold of this ProcessScheduleDto.  # noqa: E501


        :return: The consecutive_job_failures_threshold of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._consecutive_job_failures_threshold

    @consecutive_job_failures_threshold.setter
    def consecutive_job_failures_threshold(self, consecutive_job_failures_threshold):
        """Sets the consecutive_job_failures_threshold of this ProcessScheduleDto.


        :param consecutive_job_failures_threshold: The consecutive_job_failures_threshold of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                consecutive_job_failures_threshold is not None and consecutive_job_failures_threshold > 100):  # noqa: E501
            raise ValueError("Invalid value for `consecutive_job_failures_threshold`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                consecutive_job_failures_threshold is not None and consecutive_job_failures_threshold < 0):  # noqa: E501
            raise ValueError("Invalid value for `consecutive_job_failures_threshold`, must be a value greater than or equal to `0`")  # noqa: E501

        self._consecutive_job_failures_threshold = consecutive_job_failures_threshold

    @property
    def job_failures_grace_period_in_hours(self):
        """Gets the job_failures_grace_period_in_hours of this ProcessScheduleDto.  # noqa: E501


        :return: The job_failures_grace_period_in_hours of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._job_failures_grace_period_in_hours

    @job_failures_grace_period_in_hours.setter
    def job_failures_grace_period_in_hours(self, job_failures_grace_period_in_hours):
        """Sets the job_failures_grace_period_in_hours of this ProcessScheduleDto.


        :param job_failures_grace_period_in_hours: The job_failures_grace_period_in_hours of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                job_failures_grace_period_in_hours is not None and job_failures_grace_period_in_hours > 720):  # noqa: E501
            raise ValueError("Invalid value for `job_failures_grace_period_in_hours`, must be a value less than or equal to `720`")  # noqa: E501
        if (self._configuration.client_side_validation and
                job_failures_grace_period_in_hours is not None and job_failures_grace_period_in_hours < 0):  # noqa: E501
            raise ValueError("Invalid value for `job_failures_grace_period_in_hours`, must be a value greater than or equal to `0`")  # noqa: E501

        self._job_failures_grace_period_in_hours = job_failures_grace_period_in_hours

    @property
    def is_connected(self):
        """Gets the is_connected of this ProcessScheduleDto.  # noqa: E501

        Whether this process trigger represents a connected trigger defined in package bindings  # noqa: E501

        :return: The is_connected of this ProcessScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_connected

    @is_connected.setter
    def is_connected(self, is_connected):
        """Sets the is_connected of this ProcessScheduleDto.

        Whether this process trigger represents a connected trigger defined in package bindings  # noqa: E501

        :param is_connected: The is_connected of this ProcessScheduleDto.  # noqa: E501
        :type: bool
        """

        self._is_connected = is_connected

    @property
    def id(self):
        """Gets the id of this ProcessScheduleDto.  # noqa: E501


        :return: The id of this ProcessScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProcessScheduleDto.


        :param id: The id of this ProcessScheduleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessScheduleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessScheduleDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProcessScheduleDto):
            return True

        return self.to_dict() != other.to_dict()
