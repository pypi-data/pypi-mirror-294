# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class QueueDefinitionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'name': 'str',
        'description': 'str',
        'max_number_of_retries': 'int',
        'accept_automatically_retry': 'bool',
        'enforce_unique_reference': 'bool',
        'encrypted': 'bool',
        'specific_data_json_schema': 'str',
        'output_data_json_schema': 'str',
        'analytics_data_json_schema': 'str',
        'creation_time': 'datetime',
        'process_schedule_id': 'int',
        'sla_in_minutes': 'int',
        'risk_sla_in_minutes': 'int',
        'release_id': 'int',
        'is_process_in_current_folder': 'bool',
        'folders_count': 'int',
        'organization_unit_id': 'int',
        'organization_unit_fully_qualified_name': 'str',
        'tags': 'list[TagDto]',
        'id': 'int'
    }

    attribute_map = {
        'key': 'Key',
        'name': 'Name',
        'description': 'Description',
        'max_number_of_retries': 'MaxNumberOfRetries',
        'accept_automatically_retry': 'AcceptAutomaticallyRetry',
        'enforce_unique_reference': 'EnforceUniqueReference',
        'encrypted': 'Encrypted',
        'specific_data_json_schema': 'SpecificDataJsonSchema',
        'output_data_json_schema': 'OutputDataJsonSchema',
        'analytics_data_json_schema': 'AnalyticsDataJsonSchema',
        'creation_time': 'CreationTime',
        'process_schedule_id': 'ProcessScheduleId',
        'sla_in_minutes': 'SlaInMinutes',
        'risk_sla_in_minutes': 'RiskSlaInMinutes',
        'release_id': 'ReleaseId',
        'is_process_in_current_folder': 'IsProcessInCurrentFolder',
        'folders_count': 'FoldersCount',
        'organization_unit_id': 'OrganizationUnitId',
        'organization_unit_fully_qualified_name': 'OrganizationUnitFullyQualifiedName',
        'tags': 'Tags',
        'id': 'Id'
    }

    def __init__(self, key=None, name=None, description=None, max_number_of_retries=None, accept_automatically_retry=None, enforce_unique_reference=None, encrypted=None, specific_data_json_schema=None, output_data_json_schema=None, analytics_data_json_schema=None, creation_time=None, process_schedule_id=None, sla_in_minutes=None, risk_sla_in_minutes=None, release_id=None, is_process_in_current_folder=None, folders_count=None, organization_unit_id=None, organization_unit_fully_qualified_name=None, tags=None, id=None, _configuration=None):  # noqa: E501
        """QueueDefinitionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._name = None
        self._description = None
        self._max_number_of_retries = None
        self._accept_automatically_retry = None
        self._enforce_unique_reference = None
        self._encrypted = None
        self._specific_data_json_schema = None
        self._output_data_json_schema = None
        self._analytics_data_json_schema = None
        self._creation_time = None
        self._process_schedule_id = None
        self._sla_in_minutes = None
        self._risk_sla_in_minutes = None
        self._release_id = None
        self._is_process_in_current_folder = None
        self._folders_count = None
        self._organization_unit_id = None
        self._organization_unit_fully_qualified_name = None
        self._tags = None
        self._id = None
        self.discriminator = None

        if key is not None:
            self.key = key
        self.name = name
        if description is not None:
            self.description = description
        if max_number_of_retries is not None:
            self.max_number_of_retries = max_number_of_retries
        if accept_automatically_retry is not None:
            self.accept_automatically_retry = accept_automatically_retry
        if enforce_unique_reference is not None:
            self.enforce_unique_reference = enforce_unique_reference
        if encrypted is not None:
            self.encrypted = encrypted
        if specific_data_json_schema is not None:
            self.specific_data_json_schema = specific_data_json_schema
        if output_data_json_schema is not None:
            self.output_data_json_schema = output_data_json_schema
        if analytics_data_json_schema is not None:
            self.analytics_data_json_schema = analytics_data_json_schema
        if creation_time is not None:
            self.creation_time = creation_time
        if process_schedule_id is not None:
            self.process_schedule_id = process_schedule_id
        if sla_in_minutes is not None:
            self.sla_in_minutes = sla_in_minutes
        if risk_sla_in_minutes is not None:
            self.risk_sla_in_minutes = risk_sla_in_minutes
        if release_id is not None:
            self.release_id = release_id
        if is_process_in_current_folder is not None:
            self.is_process_in_current_folder = is_process_in_current_folder
        if folders_count is not None:
            self.folders_count = folders_count
        if organization_unit_id is not None:
            self.organization_unit_id = organization_unit_id
        if organization_unit_fully_qualified_name is not None:
            self.organization_unit_fully_qualified_name = organization_unit_fully_qualified_name
        if tags is not None:
            self.tags = tags
        if id is not None:
            self.id = id

    @property
    def key(self):
        """Gets the key of this QueueDefinitionDto.  # noqa: E501

        A unique identifier associated to each queue.  # noqa: E501

        :return: The key of this QueueDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this QueueDefinitionDto.

        A unique identifier associated to each queue.  # noqa: E501

        :param key: The key of this QueueDefinitionDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this QueueDefinitionDto.  # noqa: E501

        A custom name for the queue.  # noqa: E501

        :return: The name of this QueueDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QueueDefinitionDto.

        A custom name for the queue.  # noqa: E501

        :param name: The name of this QueueDefinitionDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this QueueDefinitionDto.  # noqa: E501

        Used to add additional information about a queue in order to better identify it.  # noqa: E501

        :return: The description of this QueueDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this QueueDefinitionDto.

        Used to add additional information about a queue in order to better identify it.  # noqa: E501

        :param description: The description of this QueueDefinitionDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 250):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def max_number_of_retries(self):
        """Gets the max_number_of_retries of this QueueDefinitionDto.  # noqa: E501

        An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.  # noqa: E501

        :return: The max_number_of_retries of this QueueDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_retries

    @max_number_of_retries.setter
    def max_number_of_retries(self, max_number_of_retries):
        """Sets the max_number_of_retries of this QueueDefinitionDto.

        An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.  # noqa: E501

        :param max_number_of_retries: The max_number_of_retries of this QueueDefinitionDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_number_of_retries is not None and max_number_of_retries > 50):  # noqa: E501
            raise ValueError("Invalid value for `max_number_of_retries`, must be a value less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_number_of_retries is not None and max_number_of_retries < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_number_of_retries`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_number_of_retries = max_number_of_retries

    @property
    def accept_automatically_retry(self):
        """Gets the accept_automatically_retry of this QueueDefinitionDto.  # noqa: E501

        States whether a robot should retry to process an item if, after processing, it failed with application exception.  # noqa: E501

        :return: The accept_automatically_retry of this QueueDefinitionDto.  # noqa: E501
        :rtype: bool
        """
        return self._accept_automatically_retry

    @accept_automatically_retry.setter
    def accept_automatically_retry(self, accept_automatically_retry):
        """Sets the accept_automatically_retry of this QueueDefinitionDto.

        States whether a robot should retry to process an item if, after processing, it failed with application exception.  # noqa: E501

        :param accept_automatically_retry: The accept_automatically_retry of this QueueDefinitionDto.  # noqa: E501
        :type: bool
        """

        self._accept_automatically_retry = accept_automatically_retry

    @property
    def enforce_unique_reference(self):
        """Gets the enforce_unique_reference of this QueueDefinitionDto.  # noqa: E501

        States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.  # noqa: E501

        :return: The enforce_unique_reference of this QueueDefinitionDto.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_unique_reference

    @enforce_unique_reference.setter
    def enforce_unique_reference(self, enforce_unique_reference):
        """Sets the enforce_unique_reference of this QueueDefinitionDto.

        States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.  # noqa: E501

        :param enforce_unique_reference: The enforce_unique_reference of this QueueDefinitionDto.  # noqa: E501
        :type: bool
        """

        self._enforce_unique_reference = enforce_unique_reference

    @property
    def encrypted(self):
        """Gets the encrypted of this QueueDefinitionDto.  # noqa: E501

        States whether the Queue Item's data will be encrypted in the database.  # noqa: E501

        :return: The encrypted of this QueueDefinitionDto.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this QueueDefinitionDto.

        States whether the Queue Item's data will be encrypted in the database.  # noqa: E501

        :param encrypted: The encrypted of this QueueDefinitionDto.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def specific_data_json_schema(self):
        """Gets the specific_data_json_schema of this QueueDefinitionDto.  # noqa: E501

        JSON schema enforced onto the specific data field.  # noqa: E501

        :return: The specific_data_json_schema of this QueueDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._specific_data_json_schema

    @specific_data_json_schema.setter
    def specific_data_json_schema(self, specific_data_json_schema):
        """Sets the specific_data_json_schema of this QueueDefinitionDto.

        JSON schema enforced onto the specific data field.  # noqa: E501

        :param specific_data_json_schema: The specific_data_json_schema of this QueueDefinitionDto.  # noqa: E501
        :type: str
        """

        self._specific_data_json_schema = specific_data_json_schema

    @property
    def output_data_json_schema(self):
        """Gets the output_data_json_schema of this QueueDefinitionDto.  # noqa: E501

        JSON schema enforced onto the output data field.  # noqa: E501

        :return: The output_data_json_schema of this QueueDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._output_data_json_schema

    @output_data_json_schema.setter
    def output_data_json_schema(self, output_data_json_schema):
        """Sets the output_data_json_schema of this QueueDefinitionDto.

        JSON schema enforced onto the output data field.  # noqa: E501

        :param output_data_json_schema: The output_data_json_schema of this QueueDefinitionDto.  # noqa: E501
        :type: str
        """

        self._output_data_json_schema = output_data_json_schema

    @property
    def analytics_data_json_schema(self):
        """Gets the analytics_data_json_schema of this QueueDefinitionDto.  # noqa: E501

        JSON schema enforced onto the analytics data field.  # noqa: E501

        :return: The analytics_data_json_schema of this QueueDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._analytics_data_json_schema

    @analytics_data_json_schema.setter
    def analytics_data_json_schema(self, analytics_data_json_schema):
        """Sets the analytics_data_json_schema of this QueueDefinitionDto.

        JSON schema enforced onto the analytics data field.  # noqa: E501

        :param analytics_data_json_schema: The analytics_data_json_schema of this QueueDefinitionDto.  # noqa: E501
        :type: str
        """

        self._analytics_data_json_schema = analytics_data_json_schema

    @property
    def creation_time(self):
        """Gets the creation_time of this QueueDefinitionDto.  # noqa: E501

        The date and time when the queue was created.  # noqa: E501

        :return: The creation_time of this QueueDefinitionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this QueueDefinitionDto.

        The date and time when the queue was created.  # noqa: E501

        :param creation_time: The creation_time of this QueueDefinitionDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def process_schedule_id(self):
        """Gets the process_schedule_id of this QueueDefinitionDto.  # noqa: E501

        The Id of the process schedule associated with the queue.  # noqa: E501

        :return: The process_schedule_id of this QueueDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._process_schedule_id

    @process_schedule_id.setter
    def process_schedule_id(self, process_schedule_id):
        """Sets the process_schedule_id of this QueueDefinitionDto.

        The Id of the process schedule associated with the queue.  # noqa: E501

        :param process_schedule_id: The process_schedule_id of this QueueDefinitionDto.  # noqa: E501
        :type: int
        """

        self._process_schedule_id = process_schedule_id

    @property
    def sla_in_minutes(self):
        """Gets the sla_in_minutes of this QueueDefinitionDto.  # noqa: E501

        Queue item processing SLA on the QueueDefinition level.  # noqa: E501

        :return: The sla_in_minutes of this QueueDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._sla_in_minutes

    @sla_in_minutes.setter
    def sla_in_minutes(self, sla_in_minutes):
        """Sets the sla_in_minutes of this QueueDefinitionDto.

        Queue item processing SLA on the QueueDefinition level.  # noqa: E501

        :param sla_in_minutes: The sla_in_minutes of this QueueDefinitionDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                sla_in_minutes is not None and sla_in_minutes > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `sla_in_minutes`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                sla_in_minutes is not None and sla_in_minutes < 0):  # noqa: E501
            raise ValueError("Invalid value for `sla_in_minutes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sla_in_minutes = sla_in_minutes

    @property
    def risk_sla_in_minutes(self):
        """Gets the risk_sla_in_minutes of this QueueDefinitionDto.  # noqa: E501

        Queue Item processing Risk SLA on the QueueDefinition level.  # noqa: E501

        :return: The risk_sla_in_minutes of this QueueDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._risk_sla_in_minutes

    @risk_sla_in_minutes.setter
    def risk_sla_in_minutes(self, risk_sla_in_minutes):
        """Sets the risk_sla_in_minutes of this QueueDefinitionDto.

        Queue Item processing Risk SLA on the QueueDefinition level.  # noqa: E501

        :param risk_sla_in_minutes: The risk_sla_in_minutes of this QueueDefinitionDto.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                risk_sla_in_minutes is not None and risk_sla_in_minutes > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `risk_sla_in_minutes`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                risk_sla_in_minutes is not None and risk_sla_in_minutes < 0):  # noqa: E501
            raise ValueError("Invalid value for `risk_sla_in_minutes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._risk_sla_in_minutes = risk_sla_in_minutes

    @property
    def release_id(self):
        """Gets the release_id of this QueueDefinitionDto.  # noqa: E501

        The ProcessId Queue is associated with.  # noqa: E501

        :return: The release_id of this QueueDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this QueueDefinitionDto.

        The ProcessId Queue is associated with.  # noqa: E501

        :param release_id: The release_id of this QueueDefinitionDto.  # noqa: E501
        :type: int
        """

        self._release_id = release_id

    @property
    def is_process_in_current_folder(self):
        """Gets the is_process_in_current_folder of this QueueDefinitionDto.  # noqa: E501

        Flag to determine if the release is in the current folder  # noqa: E501

        :return: The is_process_in_current_folder of this QueueDefinitionDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_process_in_current_folder

    @is_process_in_current_folder.setter
    def is_process_in_current_folder(self, is_process_in_current_folder):
        """Sets the is_process_in_current_folder of this QueueDefinitionDto.

        Flag to determine if the release is in the current folder  # noqa: E501

        :param is_process_in_current_folder: The is_process_in_current_folder of this QueueDefinitionDto.  # noqa: E501
        :type: bool
        """

        self._is_process_in_current_folder = is_process_in_current_folder

    @property
    def folders_count(self):
        """Gets the folders_count of this QueueDefinitionDto.  # noqa: E501

        Number of folders where the queue is shared.  # noqa: E501

        :return: The folders_count of this QueueDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._folders_count

    @folders_count.setter
    def folders_count(self, folders_count):
        """Sets the folders_count of this QueueDefinitionDto.

        Number of folders where the queue is shared.  # noqa: E501

        :param folders_count: The folders_count of this QueueDefinitionDto.  # noqa: E501
        :type: int
        """

        self._folders_count = folders_count

    @property
    def organization_unit_id(self):
        """Gets the organization_unit_id of this QueueDefinitionDto.  # noqa: E501

        DEPRECATED.   # noqa: E501

        :return: The organization_unit_id of this QueueDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._organization_unit_id

    @organization_unit_id.setter
    def organization_unit_id(self, organization_unit_id):
        """Sets the organization_unit_id of this QueueDefinitionDto.

        DEPRECATED.   # noqa: E501

        :param organization_unit_id: The organization_unit_id of this QueueDefinitionDto.  # noqa: E501
        :type: int
        """

        self._organization_unit_id = organization_unit_id

    @property
    def organization_unit_fully_qualified_name(self):
        """Gets the organization_unit_fully_qualified_name of this QueueDefinitionDto.  # noqa: E501

        DEPRECATED.   # noqa: E501

        :return: The organization_unit_fully_qualified_name of this QueueDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._organization_unit_fully_qualified_name

    @organization_unit_fully_qualified_name.setter
    def organization_unit_fully_qualified_name(self, organization_unit_fully_qualified_name):
        """Sets the organization_unit_fully_qualified_name of this QueueDefinitionDto.

        DEPRECATED.   # noqa: E501

        :param organization_unit_fully_qualified_name: The organization_unit_fully_qualified_name of this QueueDefinitionDto.  # noqa: E501
        :type: str
        """

        self._organization_unit_fully_qualified_name = organization_unit_fully_qualified_name

    @property
    def tags(self):
        """Gets the tags of this QueueDefinitionDto.  # noqa: E501


        :return: The tags of this QueueDefinitionDto.  # noqa: E501
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this QueueDefinitionDto.


        :param tags: The tags of this QueueDefinitionDto.  # noqa: E501
        :type: list[TagDto]
        """

        self._tags = tags

    @property
    def id(self):
        """Gets the id of this QueueDefinitionDto.  # noqa: E501


        :return: The id of this QueueDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueueDefinitionDto.


        :param id: The id of this QueueDefinitionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueDefinitionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueDefinitionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueDefinitionDto):
            return True

        return self.to_dict() != other.to_dict()
