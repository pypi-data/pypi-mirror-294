# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TaskDefinitionPropertiesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'int',
        'schema': 'str',
        'allowed_actions': 'list[str]',
        'allowed_actions_for_definition': 'str',
        'task_definition_key': 'str',
        'creation_time': 'datetime',
        'creator_user_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'version': 'version',
        'schema': 'schema',
        'allowed_actions': 'allowedActions',
        'allowed_actions_for_definition': 'allowedActionsForDefinition',
        'task_definition_key': 'taskDefinitionKey',
        'creation_time': 'creationTime',
        'creator_user_id': 'creatorUserId',
        'id': 'id'
    }

    def __init__(self, version=None, schema=None, allowed_actions=None, allowed_actions_for_definition=None, task_definition_key=None, creation_time=None, creator_user_id=None, id=None, _configuration=None):  # noqa: E501
        """TaskDefinitionPropertiesDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._version = None
        self._schema = None
        self._allowed_actions = None
        self._allowed_actions_for_definition = None
        self._task_definition_key = None
        self._creation_time = None
        self._creator_user_id = None
        self._id = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if schema is not None:
            self.schema = schema
        if allowed_actions is not None:
            self.allowed_actions = allowed_actions
        if allowed_actions_for_definition is not None:
            self.allowed_actions_for_definition = allowed_actions_for_definition
        if task_definition_key is not None:
            self.task_definition_key = task_definition_key
        if creation_time is not None:
            self.creation_time = creation_time
        if creator_user_id is not None:
            self.creator_user_id = creator_user_id
        if id is not None:
            self.id = id

    @property
    def version(self):
        """Gets the version of this TaskDefinitionPropertiesDto.  # noqa: E501

        Version number of the property set  # noqa: E501

        :return: The version of this TaskDefinitionPropertiesDto.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TaskDefinitionPropertiesDto.

        Version number of the property set  # noqa: E501

        :param version: The version of this TaskDefinitionPropertiesDto.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def schema(self):
        """Gets the schema of this TaskDefinitionPropertiesDto.  # noqa: E501

        Field Schema for the definition  # noqa: E501

        :return: The schema of this TaskDefinitionPropertiesDto.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this TaskDefinitionPropertiesDto.

        Field Schema for the definition  # noqa: E501

        :param schema: The schema of this TaskDefinitionPropertiesDto.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def allowed_actions(self):
        """Gets the allowed_actions of this TaskDefinitionPropertiesDto.  # noqa: E501

        Set of allowed actions for this version of Task Definition  # noqa: E501

        :return: The allowed_actions of this TaskDefinitionPropertiesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_actions

    @allowed_actions.setter
    def allowed_actions(self, allowed_actions):
        """Sets the allowed_actions of this TaskDefinitionPropertiesDto.

        Set of allowed actions for this version of Task Definition  # noqa: E501

        :param allowed_actions: The allowed_actions of this TaskDefinitionPropertiesDto.  # noqa: E501
        :type: list[str]
        """

        self._allowed_actions = allowed_actions

    @property
    def allowed_actions_for_definition(self):
        """Gets the allowed_actions_for_definition of this TaskDefinitionPropertiesDto.  # noqa: E501


        :return: The allowed_actions_for_definition of this TaskDefinitionPropertiesDto.  # noqa: E501
        :rtype: str
        """
        return self._allowed_actions_for_definition

    @allowed_actions_for_definition.setter
    def allowed_actions_for_definition(self, allowed_actions_for_definition):
        """Sets the allowed_actions_for_definition of this TaskDefinitionPropertiesDto.


        :param allowed_actions_for_definition: The allowed_actions_for_definition of this TaskDefinitionPropertiesDto.  # noqa: E501
        :type: str
        """

        self._allowed_actions_for_definition = allowed_actions_for_definition

    @property
    def task_definition_key(self):
        """Gets the task_definition_key of this TaskDefinitionPropertiesDto.  # noqa: E501


        :return: The task_definition_key of this TaskDefinitionPropertiesDto.  # noqa: E501
        :rtype: str
        """
        return self._task_definition_key

    @task_definition_key.setter
    def task_definition_key(self, task_definition_key):
        """Sets the task_definition_key of this TaskDefinitionPropertiesDto.


        :param task_definition_key: The task_definition_key of this TaskDefinitionPropertiesDto.  # noqa: E501
        :type: str
        """

        self._task_definition_key = task_definition_key

    @property
    def creation_time(self):
        """Gets the creation_time of this TaskDefinitionPropertiesDto.  # noqa: E501


        :return: The creation_time of this TaskDefinitionPropertiesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TaskDefinitionPropertiesDto.


        :param creation_time: The creation_time of this TaskDefinitionPropertiesDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this TaskDefinitionPropertiesDto.  # noqa: E501


        :return: The creator_user_id of this TaskDefinitionPropertiesDto.  # noqa: E501
        :rtype: int
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this TaskDefinitionPropertiesDto.


        :param creator_user_id: The creator_user_id of this TaskDefinitionPropertiesDto.  # noqa: E501
        :type: int
        """

        self._creator_user_id = creator_user_id

    @property
    def id(self):
        """Gets the id of this TaskDefinitionPropertiesDto.  # noqa: E501


        :return: The id of this TaskDefinitionPropertiesDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskDefinitionPropertiesDto.


        :param id: The id of this TaskDefinitionPropertiesDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDefinitionPropertiesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDefinitionPropertiesDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskDefinitionPropertiesDto):
            return True

        return self.to_dict() != other.to_dict()
