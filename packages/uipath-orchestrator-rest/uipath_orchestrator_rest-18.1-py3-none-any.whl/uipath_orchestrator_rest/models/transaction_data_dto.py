# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TransactionDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'robot_identifier': 'str',
        'specific_content': 'dict(str, object)',
        'defer_date': 'datetime',
        'due_date': 'datetime',
        'reference': 'str',
        'reference_filter_option': 'str',
        'parent_operation_id': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'robot_identifier': 'RobotIdentifier',
        'specific_content': 'SpecificContent',
        'defer_date': 'DeferDate',
        'due_date': 'DueDate',
        'reference': 'Reference',
        'reference_filter_option': 'ReferenceFilterOption',
        'parent_operation_id': 'ParentOperationId'
    }

    def __init__(self, name=None, robot_identifier=None, specific_content=None, defer_date=None, due_date=None, reference=None, reference_filter_option=None, parent_operation_id=None, _configuration=None):  # noqa: E501
        """TransactionDataDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._robot_identifier = None
        self._specific_content = None
        self._defer_date = None
        self._due_date = None
        self._reference = None
        self._reference_filter_option = None
        self._parent_operation_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if robot_identifier is not None:
            self.robot_identifier = robot_identifier
        if specific_content is not None:
            self.specific_content = specific_content
        if defer_date is not None:
            self.defer_date = defer_date
        if due_date is not None:
            self.due_date = due_date
        if reference is not None:
            self.reference = reference
        if reference_filter_option is not None:
            self.reference_filter_option = reference_filter_option
        if parent_operation_id is not None:
            self.parent_operation_id = parent_operation_id

    @property
    def name(self):
        """Gets the name of this TransactionDataDto.  # noqa: E501

        The name of the queue in which to search for the next item or in which to insert the item before marking it as InProgress and sending it to the robot.  # noqa: E501

        :return: The name of this TransactionDataDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransactionDataDto.

        The name of the queue in which to search for the next item or in which to insert the item before marking it as InProgress and sending it to the robot.  # noqa: E501

        :param name: The name of this TransactionDataDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def robot_identifier(self):
        """Gets the robot_identifier of this TransactionDataDto.  # noqa: E501

        The unique key identifying the robot that sent the request.  # noqa: E501

        :return: The robot_identifier of this TransactionDataDto.  # noqa: E501
        :rtype: str
        """
        return self._robot_identifier

    @robot_identifier.setter
    def robot_identifier(self, robot_identifier):
        """Sets the robot_identifier of this TransactionDataDto.

        The unique key identifying the robot that sent the request.  # noqa: E501

        :param robot_identifier: The robot_identifier of this TransactionDataDto.  # noqa: E501
        :type: str
        """

        self._robot_identifier = robot_identifier

    @property
    def specific_content(self):
        """Gets the specific_content of this TransactionDataDto.  # noqa: E501

        If not null a new item will be added to the queue with this content before being moved to InProgress state and returned to the robot for processing.  <para />If null the next available item in the list will be moved to InProgress state and returned to the robot for processing.  # noqa: E501

        :return: The specific_content of this TransactionDataDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._specific_content

    @specific_content.setter
    def specific_content(self, specific_content):
        """Sets the specific_content of this TransactionDataDto.

        If not null a new item will be added to the queue with this content before being moved to InProgress state and returned to the robot for processing.  <para />If null the next available item in the list will be moved to InProgress state and returned to the robot for processing.  # noqa: E501

        :param specific_content: The specific_content of this TransactionDataDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._specific_content = specific_content

    @property
    def defer_date(self):
        """Gets the defer_date of this TransactionDataDto.  # noqa: E501

        The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.  # noqa: E501

        :return: The defer_date of this TransactionDataDto.  # noqa: E501
        :rtype: datetime
        """
        return self._defer_date

    @defer_date.setter
    def defer_date(self, defer_date):
        """Sets the defer_date of this TransactionDataDto.

        The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.  # noqa: E501

        :param defer_date: The defer_date of this TransactionDataDto.  # noqa: E501
        :type: datetime
        """

        self._defer_date = defer_date

    @property
    def due_date(self):
        """Gets the due_date of this TransactionDataDto.  # noqa: E501

        The latest date and time at which the item should be processed. If empty the item can be processed at any given time.  # noqa: E501

        :return: The due_date of this TransactionDataDto.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this TransactionDataDto.

        The latest date and time at which the item should be processed. If empty the item can be processed at any given time.  # noqa: E501

        :param due_date: The due_date of this TransactionDataDto.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def reference(self):
        """Gets the reference of this TransactionDataDto.  # noqa: E501

        An optional, user-specified value for queue item identification.  # noqa: E501

        :return: The reference of this TransactionDataDto.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this TransactionDataDto.

        An optional, user-specified value for queue item identification.  # noqa: E501

        :param reference: The reference of this TransactionDataDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reference is not None and len(reference) > 128):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                reference is not None and len(reference) < 0):
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `0`")  # noqa: E501

        self._reference = reference

    @property
    def reference_filter_option(self):
        """Gets the reference_filter_option of this TransactionDataDto.  # noqa: E501

        Declares the strategy used to filter the Reference value.  # noqa: E501

        :return: The reference_filter_option of this TransactionDataDto.  # noqa: E501
        :rtype: str
        """
        return self._reference_filter_option

    @reference_filter_option.setter
    def reference_filter_option(self, reference_filter_option):
        """Sets the reference_filter_option of this TransactionDataDto.

        Declares the strategy used to filter the Reference value.  # noqa: E501

        :param reference_filter_option: The reference_filter_option of this TransactionDataDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Equals", "StartsWith"]  # noqa: E501
        if (self._configuration.client_side_validation and
                reference_filter_option not in allowed_values):
            raise ValueError(
                "Invalid value for `reference_filter_option` ({0}), must be one of {1}"  # noqa: E501
                .format(reference_filter_option, allowed_values)
            )

        self._reference_filter_option = reference_filter_option

    @property
    def parent_operation_id(self):
        """Gets the parent_operation_id of this TransactionDataDto.  # noqa: E501

        Operation id which created the queue item.  # noqa: E501

        :return: The parent_operation_id of this TransactionDataDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_operation_id

    @parent_operation_id.setter
    def parent_operation_id(self, parent_operation_id):
        """Sets the parent_operation_id of this TransactionDataDto.

        Operation id which created the queue item.  # noqa: E501

        :param parent_operation_id: The parent_operation_id of this TransactionDataDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                parent_operation_id is not None and len(parent_operation_id) > 128):
            raise ValueError("Invalid value for `parent_operation_id`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                parent_operation_id is not None and len(parent_operation_id) < 0):
            raise ValueError("Invalid value for `parent_operation_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._parent_operation_id = parent_operation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionDataDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionDataDto):
            return True

        return self.to_dict() != other.to_dict()
