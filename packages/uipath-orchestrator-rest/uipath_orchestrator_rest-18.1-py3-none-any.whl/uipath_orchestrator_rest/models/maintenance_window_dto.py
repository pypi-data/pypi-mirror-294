# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class MaintenanceWindowDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'job_stop_strategy': 'str',
        'cron_expression': 'str',
        'timezone_id': 'str',
        'duration': 'int',
        'next_execution_time': 'datetime'
    }

    attribute_map = {
        'enabled': 'enabled',
        'job_stop_strategy': 'jobStopStrategy',
        'cron_expression': 'cronExpression',
        'timezone_id': 'timezoneId',
        'duration': 'duration',
        'next_execution_time': 'nextExecutionTime'
    }

    def __init__(self, enabled=None, job_stop_strategy=None, cron_expression=None, timezone_id=None, duration=None, next_execution_time=None, _configuration=None):  # noqa: E501
        """MaintenanceWindowDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._job_stop_strategy = None
        self._cron_expression = None
        self._timezone_id = None
        self._duration = None
        self._next_execution_time = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if job_stop_strategy is not None:
            self.job_stop_strategy = job_stop_strategy
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if timezone_id is not None:
            self.timezone_id = timezone_id
        if duration is not None:
            self.duration = duration
        if next_execution_time is not None:
            self.next_execution_time = next_execution_time

    @property
    def enabled(self):
        """Gets the enabled of this MaintenanceWindowDto.  # noqa: E501

        Whether the maintenance window is enabled  # noqa: E501

        :return: The enabled of this MaintenanceWindowDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MaintenanceWindowDto.

        Whether the maintenance window is enabled  # noqa: E501

        :param enabled: The enabled of this MaintenanceWindowDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def job_stop_strategy(self):
        """Gets the job_stop_strategy of this MaintenanceWindowDto.  # noqa: E501

        The strategy for stopping jobs when the window begins  # noqa: E501

        :return: The job_stop_strategy of this MaintenanceWindowDto.  # noqa: E501
        :rtype: str
        """
        return self._job_stop_strategy

    @job_stop_strategy.setter
    def job_stop_strategy(self, job_stop_strategy):
        """Sets the job_stop_strategy of this MaintenanceWindowDto.

        The strategy for stopping jobs when the window begins  # noqa: E501

        :param job_stop_strategy: The job_stop_strategy of this MaintenanceWindowDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Kill"]  # noqa: E501
        if (self._configuration.client_side_validation and
                job_stop_strategy not in allowed_values):
            raise ValueError(
                "Invalid value for `job_stop_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(job_stop_strategy, allowed_values)
            )

        self._job_stop_strategy = job_stop_strategy

    @property
    def cron_expression(self):
        """Gets the cron_expression of this MaintenanceWindowDto.  # noqa: E501

        The recurrence pattern as a cron expression  # noqa: E501

        :return: The cron_expression of this MaintenanceWindowDto.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this MaintenanceWindowDto.

        The recurrence pattern as a cron expression  # noqa: E501

        :param cron_expression: The cron_expression of this MaintenanceWindowDto.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def timezone_id(self):
        """Gets the timezone_id of this MaintenanceWindowDto.  # noqa: E501

        The Timezone Id  # noqa: E501

        :return: The timezone_id of this MaintenanceWindowDto.  # noqa: E501
        :rtype: str
        """
        return self._timezone_id

    @timezone_id.setter
    def timezone_id(self, timezone_id):
        """Sets the timezone_id of this MaintenanceWindowDto.

        The Timezone Id  # noqa: E501

        :param timezone_id: The timezone_id of this MaintenanceWindowDto.  # noqa: E501
        :type: str
        """

        self._timezone_id = timezone_id

    @property
    def duration(self):
        """Gets the duration of this MaintenanceWindowDto.  # noqa: E501

        The duration of the maintenance window in minutes  # noqa: E501

        :return: The duration of this MaintenanceWindowDto.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MaintenanceWindowDto.

        The duration of the maintenance window in minutes  # noqa: E501

        :param duration: The duration of this MaintenanceWindowDto.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def next_execution_time(self):
        """Gets the next_execution_time of this MaintenanceWindowDto.  # noqa: E501

        The next execution time of the maintenance window  # noqa: E501

        :return: The next_execution_time of this MaintenanceWindowDto.  # noqa: E501
        :rtype: datetime
        """
        return self._next_execution_time

    @next_execution_time.setter
    def next_execution_time(self, next_execution_time):
        """Sets the next_execution_time of this MaintenanceWindowDto.

        The next execution time of the maintenance window  # noqa: E501

        :param next_execution_time: The next_execution_time of this MaintenanceWindowDto.  # noqa: E501
        :type: datetime
        """

        self._next_execution_time = next_execution_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceWindowDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceWindowDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintenanceWindowDto):
            return True

        return self.to_dict() != other.to_dict()
