# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TestCaseExecutionOptionsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'str',
        'package_identifier': 'str',
        'input_arguments_variations': 'list[object]',
        'execution_order': 'int'
    }

    attribute_map = {
        'unique_id': 'uniqueId',
        'package_identifier': 'packageIdentifier',
        'input_arguments_variations': 'inputArgumentsVariations',
        'execution_order': 'executionOrder'
    }

    def __init__(self, unique_id=None, package_identifier=None, input_arguments_variations=None, execution_order=None, _configuration=None):  # noqa: E501
        """TestCaseExecutionOptionsDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._unique_id = None
        self._package_identifier = None
        self._input_arguments_variations = None
        self._execution_order = None
        self.discriminator = None

        self.unique_id = unique_id
        if package_identifier is not None:
            self.package_identifier = package_identifier
        if input_arguments_variations is not None:
            self.input_arguments_variations = input_arguments_variations
        if execution_order is not None:
            self.execution_order = execution_order

    @property
    def unique_id(self):
        """Gets the unique_id of this TestCaseExecutionOptionsDto.  # noqa: E501


        :return: The unique_id of this TestCaseExecutionOptionsDto.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this TestCaseExecutionOptionsDto.


        :param unique_id: The unique_id of this TestCaseExecutionOptionsDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and unique_id is None:
            raise ValueError("Invalid value for `unique_id`, must not be `None`")  # noqa: E501

        self._unique_id = unique_id

    @property
    def package_identifier(self):
        """Gets the package_identifier of this TestCaseExecutionOptionsDto.  # noqa: E501


        :return: The package_identifier of this TestCaseExecutionOptionsDto.  # noqa: E501
        :rtype: str
        """
        return self._package_identifier

    @package_identifier.setter
    def package_identifier(self, package_identifier):
        """Sets the package_identifier of this TestCaseExecutionOptionsDto.


        :param package_identifier: The package_identifier of this TestCaseExecutionOptionsDto.  # noqa: E501
        :type: str
        """

        self._package_identifier = package_identifier

    @property
    def input_arguments_variations(self):
        """Gets the input_arguments_variations of this TestCaseExecutionOptionsDto.  # noqa: E501


        :return: The input_arguments_variations of this TestCaseExecutionOptionsDto.  # noqa: E501
        :rtype: list[object]
        """
        return self._input_arguments_variations

    @input_arguments_variations.setter
    def input_arguments_variations(self, input_arguments_variations):
        """Sets the input_arguments_variations of this TestCaseExecutionOptionsDto.


        :param input_arguments_variations: The input_arguments_variations of this TestCaseExecutionOptionsDto.  # noqa: E501
        :type: list[object]
        """

        self._input_arguments_variations = input_arguments_variations

    @property
    def execution_order(self):
        """Gets the execution_order of this TestCaseExecutionOptionsDto.  # noqa: E501


        :return: The execution_order of this TestCaseExecutionOptionsDto.  # noqa: E501
        :rtype: int
        """
        return self._execution_order

    @execution_order.setter
    def execution_order(self, execution_order):
        """Sets the execution_order of this TestCaseExecutionOptionsDto.


        :param execution_order: The execution_order of this TestCaseExecutionOptionsDto.  # noqa: E501
        :type: int
        """

        self._execution_order = execution_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCaseExecutionOptionsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCaseExecutionOptionsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestCaseExecutionOptionsDto):
            return True

        return self.to_dict() != other.to_dict()
