# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class MachineSessionRuntimeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_id': 'int',
        'machine_id': 'int',
        'machine_name': 'str',
        'maintenance_mode': 'str',
        'host_machine_name': 'str',
        'runtime_type': 'str',
        'machine_type': 'str',
        'machine_scope': 'str',
        'status': 'str',
        'is_unresponsive': 'bool',
        'runtimes': 'int',
        'used_runtimes': 'int',
        'service_user_name': 'str',
        'reporting_time': 'datetime',
        'version': 'str',
        'debug_mode_expiration_date': 'datetime',
        'platform': 'str',
        'endpoint_detection': 'str',
        'triggers_count': 'int'
    }

    attribute_map = {
        'session_id': 'SessionId',
        'machine_id': 'MachineId',
        'machine_name': 'MachineName',
        'maintenance_mode': 'MaintenanceMode',
        'host_machine_name': 'HostMachineName',
        'runtime_type': 'RuntimeType',
        'machine_type': 'MachineType',
        'machine_scope': 'MachineScope',
        'status': 'Status',
        'is_unresponsive': 'IsUnresponsive',
        'runtimes': 'Runtimes',
        'used_runtimes': 'UsedRuntimes',
        'service_user_name': 'ServiceUserName',
        'reporting_time': 'ReportingTime',
        'version': 'Version',
        'debug_mode_expiration_date': 'DebugModeExpirationDate',
        'platform': 'Platform',
        'endpoint_detection': 'EndpointDetection',
        'triggers_count': 'TriggersCount'
    }

    def __init__(self, session_id=None, machine_id=None, machine_name=None, maintenance_mode=None, host_machine_name=None, runtime_type=None, machine_type=None, machine_scope=None, status=None, is_unresponsive=None, runtimes=None, used_runtimes=None, service_user_name=None, reporting_time=None, version=None, debug_mode_expiration_date=None, platform=None, endpoint_detection=None, triggers_count=None, _configuration=None):  # noqa: E501
        """MachineSessionRuntimeDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._session_id = None
        self._machine_id = None
        self._machine_name = None
        self._maintenance_mode = None
        self._host_machine_name = None
        self._runtime_type = None
        self._machine_type = None
        self._machine_scope = None
        self._status = None
        self._is_unresponsive = None
        self._runtimes = None
        self._used_runtimes = None
        self._service_user_name = None
        self._reporting_time = None
        self._version = None
        self._debug_mode_expiration_date = None
        self._platform = None
        self._endpoint_detection = None
        self._triggers_count = None
        self.discriminator = None

        if session_id is not None:
            self.session_id = session_id
        if machine_id is not None:
            self.machine_id = machine_id
        if machine_name is not None:
            self.machine_name = machine_name
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if host_machine_name is not None:
            self.host_machine_name = host_machine_name
        if runtime_type is not None:
            self.runtime_type = runtime_type
        if machine_type is not None:
            self.machine_type = machine_type
        if machine_scope is not None:
            self.machine_scope = machine_scope
        if status is not None:
            self.status = status
        if is_unresponsive is not None:
            self.is_unresponsive = is_unresponsive
        if runtimes is not None:
            self.runtimes = runtimes
        if used_runtimes is not None:
            self.used_runtimes = used_runtimes
        if service_user_name is not None:
            self.service_user_name = service_user_name
        if reporting_time is not None:
            self.reporting_time = reporting_time
        if version is not None:
            self.version = version
        if debug_mode_expiration_date is not None:
            self.debug_mode_expiration_date = debug_mode_expiration_date
        if platform is not None:
            self.platform = platform
        if endpoint_detection is not None:
            self.endpoint_detection = endpoint_detection
        if triggers_count is not None:
            self.triggers_count = triggers_count

    @property
    def session_id(self):
        """Gets the session_id of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The session_id of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this MachineSessionRuntimeDto.


        :param session_id: The session_id of this MachineSessionRuntimeDto.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    @property
    def machine_id(self):
        """Gets the machine_id of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The machine_id of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this MachineSessionRuntimeDto.


        :param machine_id: The machine_id of this MachineSessionRuntimeDto.  # noqa: E501
        :type: int
        """

        self._machine_id = machine_id

    @property
    def machine_name(self):
        """Gets the machine_name of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The machine_name of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this MachineSessionRuntimeDto.


        :param machine_name: The machine_name of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """

        self._machine_name = machine_name

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The maintenance_mode of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this MachineSessionRuntimeDto.


        :param maintenance_mode: The maintenance_mode of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                maintenance_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `maintenance_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance_mode, allowed_values)
            )

        self._maintenance_mode = maintenance_mode

    @property
    def host_machine_name(self):
        """Gets the host_machine_name of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The host_machine_name of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._host_machine_name

    @host_machine_name.setter
    def host_machine_name(self, host_machine_name):
        """Sets the host_machine_name of this MachineSessionRuntimeDto.


        :param host_machine_name: The host_machine_name of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """

        self._host_machine_name = host_machine_name

    @property
    def runtime_type(self):
        """Gets the runtime_type of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The runtime_type of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """Sets the runtime_type of this MachineSessionRuntimeDto.


        :param runtime_type: The runtime_type of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NonProduction", "Attended", "Unattended", "Development", "Studio", "RpaDeveloper", "StudioX", "CitizenDeveloper", "Headless", "StudioPro", "RpaDeveloperPro", "TestAutomation", "AutomationCloud", "Serverless", "AutomationKit", "ServerlessTestAutomation", "AutomationCloudTestAutomation", "AttendedStudioWeb"]  # noqa: E501
        if (self._configuration.client_side_validation and
                runtime_type not in allowed_values):
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    @property
    def machine_type(self):
        """Gets the machine_type of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The machine_type of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this MachineSessionRuntimeDto.


        :param machine_type: The machine_type of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Standard", "Template"]  # noqa: E501
        if (self._configuration.client_side_validation and
                machine_type not in allowed_values):
            raise ValueError(
                "Invalid value for `machine_type` ({0}), must be one of {1}"  # noqa: E501
                .format(machine_type, allowed_values)
            )

        self._machine_type = machine_type

    @property
    def machine_scope(self):
        """Gets the machine_scope of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The machine_scope of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_scope

    @machine_scope.setter
    def machine_scope(self, machine_scope):
        """Sets the machine_scope of this MachineSessionRuntimeDto.


        :param machine_scope: The machine_scope of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Shared", "PersonalWorkspace", "Cloud", "Serverless"]  # noqa: E501
        if (self._configuration.client_side_validation and
                machine_scope not in allowed_values):
            raise ValueError(
                "Invalid value for `machine_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(machine_scope, allowed_values)
            )

        self._machine_scope = machine_scope

    @property
    def status(self):
        """Gets the status of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The status of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MachineSessionRuntimeDto.


        :param status: The status of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Available", "Busy", "Disconnected", "Unknown"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def is_unresponsive(self):
        """Gets the is_unresponsive of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The is_unresponsive of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_unresponsive

    @is_unresponsive.setter
    def is_unresponsive(self, is_unresponsive):
        """Sets the is_unresponsive of this MachineSessionRuntimeDto.


        :param is_unresponsive: The is_unresponsive of this MachineSessionRuntimeDto.  # noqa: E501
        :type: bool
        """

        self._is_unresponsive = is_unresponsive

    @property
    def runtimes(self):
        """Gets the runtimes of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The runtimes of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes):
        """Sets the runtimes of this MachineSessionRuntimeDto.


        :param runtimes: The runtimes of this MachineSessionRuntimeDto.  # noqa: E501
        :type: int
        """

        self._runtimes = runtimes

    @property
    def used_runtimes(self):
        """Gets the used_runtimes of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The used_runtimes of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._used_runtimes

    @used_runtimes.setter
    def used_runtimes(self, used_runtimes):
        """Sets the used_runtimes of this MachineSessionRuntimeDto.


        :param used_runtimes: The used_runtimes of this MachineSessionRuntimeDto.  # noqa: E501
        :type: int
        """

        self._used_runtimes = used_runtimes

    @property
    def service_user_name(self):
        """Gets the service_user_name of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The service_user_name of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._service_user_name

    @service_user_name.setter
    def service_user_name(self, service_user_name):
        """Sets the service_user_name of this MachineSessionRuntimeDto.


        :param service_user_name: The service_user_name of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """

        self._service_user_name = service_user_name

    @property
    def reporting_time(self):
        """Gets the reporting_time of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The reporting_time of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: datetime
        """
        return self._reporting_time

    @reporting_time.setter
    def reporting_time(self, reporting_time):
        """Sets the reporting_time of this MachineSessionRuntimeDto.


        :param reporting_time: The reporting_time of this MachineSessionRuntimeDto.  # noqa: E501
        :type: datetime
        """

        self._reporting_time = reporting_time

    @property
    def version(self):
        """Gets the version of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The version of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MachineSessionRuntimeDto.


        :param version: The version of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def debug_mode_expiration_date(self):
        """Gets the debug_mode_expiration_date of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The debug_mode_expiration_date of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: datetime
        """
        return self._debug_mode_expiration_date

    @debug_mode_expiration_date.setter
    def debug_mode_expiration_date(self, debug_mode_expiration_date):
        """Sets the debug_mode_expiration_date of this MachineSessionRuntimeDto.


        :param debug_mode_expiration_date: The debug_mode_expiration_date of this MachineSessionRuntimeDto.  # noqa: E501
        :type: datetime
        """

        self._debug_mode_expiration_date = debug_mode_expiration_date

    @property
    def platform(self):
        """Gets the platform of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The platform of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this MachineSessionRuntimeDto.


        :param platform: The platform of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Windows", "Linux", "OSX"]  # noqa: E501
        if (self._configuration.client_side_validation and
                platform not in allowed_values):
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def endpoint_detection(self):
        """Gets the endpoint_detection of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The endpoint_detection of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_detection

    @endpoint_detection.setter
    def endpoint_detection(self, endpoint_detection):
        """Sets the endpoint_detection of this MachineSessionRuntimeDto.


        :param endpoint_detection: The endpoint_detection of this MachineSessionRuntimeDto.  # noqa: E501
        :type: str
        """

        self._endpoint_detection = endpoint_detection

    @property
    def triggers_count(self):
        """Gets the triggers_count of this MachineSessionRuntimeDto.  # noqa: E501


        :return: The triggers_count of this MachineSessionRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._triggers_count

    @triggers_count.setter
    def triggers_count(self, triggers_count):
        """Sets the triggers_count of this MachineSessionRuntimeDto.


        :param triggers_count: The triggers_count of this MachineSessionRuntimeDto.  # noqa: E501
        :type: int
        """

        self._triggers_count = triggers_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineSessionRuntimeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineSessionRuntimeDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MachineSessionRuntimeDto):
            return True

        return self.to_dict() != other.to_dict()
