# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class TestSetScheduleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'name': 'str',
        'description': 'str',
        'test_set_id': 'int',
        'test_set_name': 'str',
        'time_zone_id': 'str',
        'time_zone_iana': 'str',
        'calendar_id': 'int',
        'calendar_name': 'str',
        'cron_expression': 'str',
        'cron_details': 'str',
        'cron_summary': 'str',
        'next_occurrence': 'datetime',
        'disable_date': 'datetime',
        'external_job_key': 'str',
        'external_job_key_scheduler': 'str',
        'id': 'int'
    }

    attribute_map = {
        'enabled': 'Enabled',
        'name': 'Name',
        'description': 'Description',
        'test_set_id': 'TestSetId',
        'test_set_name': 'TestSetName',
        'time_zone_id': 'TimeZoneId',
        'time_zone_iana': 'TimeZoneIana',
        'calendar_id': 'CalendarId',
        'calendar_name': 'CalendarName',
        'cron_expression': 'CronExpression',
        'cron_details': 'CronDetails',
        'cron_summary': 'CronSummary',
        'next_occurrence': 'NextOccurrence',
        'disable_date': 'DisableDate',
        'external_job_key': 'ExternalJobKey',
        'external_job_key_scheduler': 'ExternalJobKeyScheduler',
        'id': 'Id'
    }

    def __init__(self, enabled=None, name=None, description=None, test_set_id=None, test_set_name=None, time_zone_id=None, time_zone_iana=None, calendar_id=None, calendar_name=None, cron_expression=None, cron_details=None, cron_summary=None, next_occurrence=None, disable_date=None, external_job_key=None, external_job_key_scheduler=None, id=None, _configuration=None):  # noqa: E501
        """TestSetScheduleDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._name = None
        self._description = None
        self._test_set_id = None
        self._test_set_name = None
        self._time_zone_id = None
        self._time_zone_iana = None
        self._calendar_id = None
        self._calendar_name = None
        self._cron_expression = None
        self._cron_details = None
        self._cron_summary = None
        self._next_occurrence = None
        self._disable_date = None
        self._external_job_key = None
        self._external_job_key_scheduler = None
        self._id = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        self.name = name
        if description is not None:
            self.description = description
        self.test_set_id = test_set_id
        if test_set_name is not None:
            self.test_set_name = test_set_name
        self.time_zone_id = time_zone_id
        if time_zone_iana is not None:
            self.time_zone_iana = time_zone_iana
        if calendar_id is not None:
            self.calendar_id = calendar_id
        if calendar_name is not None:
            self.calendar_name = calendar_name
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if cron_details is not None:
            self.cron_details = cron_details
        if cron_summary is not None:
            self.cron_summary = cron_summary
        if next_occurrence is not None:
            self.next_occurrence = next_occurrence
        if disable_date is not None:
            self.disable_date = disable_date
        if external_job_key is not None:
            self.external_job_key = external_job_key
        if external_job_key_scheduler is not None:
            self.external_job_key_scheduler = external_job_key_scheduler
        if id is not None:
            self.id = id

    @property
    def enabled(self):
        """Gets the enabled of this TestSetScheduleDto.  # noqa: E501


        :return: The enabled of this TestSetScheduleDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TestSetScheduleDto.


        :param enabled: The enabled of this TestSetScheduleDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this TestSetScheduleDto.  # noqa: E501


        :return: The name of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestSetScheduleDto.


        :param name: The name of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 256):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TestSetScheduleDto.  # noqa: E501


        :return: The description of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestSetScheduleDto.


        :param description: The description of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def test_set_id(self):
        """Gets the test_set_id of this TestSetScheduleDto.  # noqa: E501


        :return: The test_set_id of this TestSetScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._test_set_id

    @test_set_id.setter
    def test_set_id(self, test_set_id):
        """Sets the test_set_id of this TestSetScheduleDto.


        :param test_set_id: The test_set_id of this TestSetScheduleDto.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and test_set_id is None:
            raise ValueError("Invalid value for `test_set_id`, must not be `None`")  # noqa: E501

        self._test_set_id = test_set_id

    @property
    def test_set_name(self):
        """Gets the test_set_name of this TestSetScheduleDto.  # noqa: E501


        :return: The test_set_name of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._test_set_name

    @test_set_name.setter
    def test_set_name(self, test_set_name):
        """Sets the test_set_name of this TestSetScheduleDto.


        :param test_set_name: The test_set_name of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._test_set_name = test_set_name

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this TestSetScheduleDto.  # noqa: E501


        :return: The time_zone_id of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this TestSetScheduleDto.


        :param time_zone_id: The time_zone_id of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_zone_id is None:
            raise ValueError("Invalid value for `time_zone_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_zone_id is not None and len(time_zone_id) > 80):
            raise ValueError("Invalid value for `time_zone_id`, length must be less than or equal to `80`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_zone_id is not None and len(time_zone_id) < 1):
            raise ValueError("Invalid value for `time_zone_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._time_zone_id = time_zone_id

    @property
    def time_zone_iana(self):
        """Gets the time_zone_iana of this TestSetScheduleDto.  # noqa: E501


        :return: The time_zone_iana of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_iana

    @time_zone_iana.setter
    def time_zone_iana(self, time_zone_iana):
        """Sets the time_zone_iana of this TestSetScheduleDto.


        :param time_zone_iana: The time_zone_iana of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._time_zone_iana = time_zone_iana

    @property
    def calendar_id(self):
        """Gets the calendar_id of this TestSetScheduleDto.  # noqa: E501


        :return: The calendar_id of this TestSetScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this TestSetScheduleDto.


        :param calendar_id: The calendar_id of this TestSetScheduleDto.  # noqa: E501
        :type: int
        """

        self._calendar_id = calendar_id

    @property
    def calendar_name(self):
        """Gets the calendar_name of this TestSetScheduleDto.  # noqa: E501


        :return: The calendar_name of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._calendar_name

    @calendar_name.setter
    def calendar_name(self, calendar_name):
        """Sets the calendar_name of this TestSetScheduleDto.


        :param calendar_name: The calendar_name of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._calendar_name = calendar_name

    @property
    def cron_expression(self):
        """Gets the cron_expression of this TestSetScheduleDto.  # noqa: E501


        :return: The cron_expression of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this TestSetScheduleDto.


        :param cron_expression: The cron_expression of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def cron_details(self):
        """Gets the cron_details of this TestSetScheduleDto.  # noqa: E501


        :return: The cron_details of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._cron_details

    @cron_details.setter
    def cron_details(self, cron_details):
        """Sets the cron_details of this TestSetScheduleDto.


        :param cron_details: The cron_details of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._cron_details = cron_details

    @property
    def cron_summary(self):
        """Gets the cron_summary of this TestSetScheduleDto.  # noqa: E501


        :return: The cron_summary of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._cron_summary

    @cron_summary.setter
    def cron_summary(self, cron_summary):
        """Sets the cron_summary of this TestSetScheduleDto.


        :param cron_summary: The cron_summary of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._cron_summary = cron_summary

    @property
    def next_occurrence(self):
        """Gets the next_occurrence of this TestSetScheduleDto.  # noqa: E501


        :return: The next_occurrence of this TestSetScheduleDto.  # noqa: E501
        :rtype: datetime
        """
        return self._next_occurrence

    @next_occurrence.setter
    def next_occurrence(self, next_occurrence):
        """Sets the next_occurrence of this TestSetScheduleDto.


        :param next_occurrence: The next_occurrence of this TestSetScheduleDto.  # noqa: E501
        :type: datetime
        """

        self._next_occurrence = next_occurrence

    @property
    def disable_date(self):
        """Gets the disable_date of this TestSetScheduleDto.  # noqa: E501


        :return: The disable_date of this TestSetScheduleDto.  # noqa: E501
        :rtype: datetime
        """
        return self._disable_date

    @disable_date.setter
    def disable_date(self, disable_date):
        """Sets the disable_date of this TestSetScheduleDto.


        :param disable_date: The disable_date of this TestSetScheduleDto.  # noqa: E501
        :type: datetime
        """

        self._disable_date = disable_date

    @property
    def external_job_key(self):
        """Gets the external_job_key of this TestSetScheduleDto.  # noqa: E501


        :return: The external_job_key of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._external_job_key

    @external_job_key.setter
    def external_job_key(self, external_job_key):
        """Sets the external_job_key of this TestSetScheduleDto.


        :param external_job_key: The external_job_key of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._external_job_key = external_job_key

    @property
    def external_job_key_scheduler(self):
        """Gets the external_job_key_scheduler of this TestSetScheduleDto.  # noqa: E501


        :return: The external_job_key_scheduler of this TestSetScheduleDto.  # noqa: E501
        :rtype: str
        """
        return self._external_job_key_scheduler

    @external_job_key_scheduler.setter
    def external_job_key_scheduler(self, external_job_key_scheduler):
        """Sets the external_job_key_scheduler of this TestSetScheduleDto.


        :param external_job_key_scheduler: The external_job_key_scheduler of this TestSetScheduleDto.  # noqa: E501
        :type: str
        """

        self._external_job_key_scheduler = external_job_key_scheduler

    @property
    def id(self):
        """Gets the id of this TestSetScheduleDto.  # noqa: E501


        :return: The id of this TestSetScheduleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestSetScheduleDto.


        :param id: The id of this TestSetScheduleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestSetScheduleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestSetScheduleDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestSetScheduleDto):
            return True

        return self.to_dict() != other.to_dict()
