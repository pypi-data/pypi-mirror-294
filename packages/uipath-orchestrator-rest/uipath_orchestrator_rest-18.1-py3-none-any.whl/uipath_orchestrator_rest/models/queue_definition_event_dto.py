# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class QueueDefinitionEventDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'key': 'str',
        'name': 'str',
        'description': 'str',
        'max_number_of_retries': 'int',
        'accept_automatically_retry': 'bool',
        'enforce_unique_reference': 'bool',
        'sla_in_minutes': 'int',
        'risk_sla_in_minutes': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'key': 'Key',
        'name': 'Name',
        'description': 'Description',
        'max_number_of_retries': 'MaxNumberOfRetries',
        'accept_automatically_retry': 'AcceptAutomaticallyRetry',
        'enforce_unique_reference': 'EnforceUniqueReference',
        'sla_in_minutes': 'SlaInMinutes',
        'risk_sla_in_minutes': 'RiskSlaInMinutes'
    }

    def __init__(self, id=None, key=None, name=None, description=None, max_number_of_retries=None, accept_automatically_retry=None, enforce_unique_reference=None, sla_in_minutes=None, risk_sla_in_minutes=None, _configuration=None):  # noqa: E501
        """QueueDefinitionEventDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._key = None
        self._name = None
        self._description = None
        self._max_number_of_retries = None
        self._accept_automatically_retry = None
        self._enforce_unique_reference = None
        self._sla_in_minutes = None
        self._risk_sla_in_minutes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if max_number_of_retries is not None:
            self.max_number_of_retries = max_number_of_retries
        if accept_automatically_retry is not None:
            self.accept_automatically_retry = accept_automatically_retry
        if enforce_unique_reference is not None:
            self.enforce_unique_reference = enforce_unique_reference
        if sla_in_minutes is not None:
            self.sla_in_minutes = sla_in_minutes
        if risk_sla_in_minutes is not None:
            self.risk_sla_in_minutes = risk_sla_in_minutes

    @property
    def id(self):
        """Gets the id of this QueueDefinitionEventDto.  # noqa: E501


        :return: The id of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueueDefinitionEventDto.


        :param id: The id of this QueueDefinitionEventDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this QueueDefinitionEventDto.  # noqa: E501


        :return: The key of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this QueueDefinitionEventDto.


        :param key: The key of this QueueDefinitionEventDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this QueueDefinitionEventDto.  # noqa: E501

        A custom name for the queue.  # noqa: E501

        :return: The name of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QueueDefinitionEventDto.

        A custom name for the queue.  # noqa: E501

        :param name: The name of this QueueDefinitionEventDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this QueueDefinitionEventDto.  # noqa: E501

        Used to add additional information about a queue in order to better identify it.  # noqa: E501

        :return: The description of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this QueueDefinitionEventDto.

        Used to add additional information about a queue in order to better identify it.  # noqa: E501

        :param description: The description of this QueueDefinitionEventDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def max_number_of_retries(self):
        """Gets the max_number_of_retries of this QueueDefinitionEventDto.  # noqa: E501

        An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.  # noqa: E501

        :return: The max_number_of_retries of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_retries

    @max_number_of_retries.setter
    def max_number_of_retries(self, max_number_of_retries):
        """Sets the max_number_of_retries of this QueueDefinitionEventDto.

        An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.  # noqa: E501

        :param max_number_of_retries: The max_number_of_retries of this QueueDefinitionEventDto.  # noqa: E501
        :type: int
        """

        self._max_number_of_retries = max_number_of_retries

    @property
    def accept_automatically_retry(self):
        """Gets the accept_automatically_retry of this QueueDefinitionEventDto.  # noqa: E501

        States whether a robot should retry to process an item if, after processing, it failed with application exception.  # noqa: E501

        :return: The accept_automatically_retry of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: bool
        """
        return self._accept_automatically_retry

    @accept_automatically_retry.setter
    def accept_automatically_retry(self, accept_automatically_retry):
        """Sets the accept_automatically_retry of this QueueDefinitionEventDto.

        States whether a robot should retry to process an item if, after processing, it failed with application exception.  # noqa: E501

        :param accept_automatically_retry: The accept_automatically_retry of this QueueDefinitionEventDto.  # noqa: E501
        :type: bool
        """

        self._accept_automatically_retry = accept_automatically_retry

    @property
    def enforce_unique_reference(self):
        """Gets the enforce_unique_reference of this QueueDefinitionEventDto.  # noqa: E501

        States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.  # noqa: E501

        :return: The enforce_unique_reference of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_unique_reference

    @enforce_unique_reference.setter
    def enforce_unique_reference(self, enforce_unique_reference):
        """Sets the enforce_unique_reference of this QueueDefinitionEventDto.

        States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.  # noqa: E501

        :param enforce_unique_reference: The enforce_unique_reference of this QueueDefinitionEventDto.  # noqa: E501
        :type: bool
        """

        self._enforce_unique_reference = enforce_unique_reference

    @property
    def sla_in_minutes(self):
        """Gets the sla_in_minutes of this QueueDefinitionEventDto.  # noqa: E501

        An integer value representing the Queue SLA in minutes.  # noqa: E501

        :return: The sla_in_minutes of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: int
        """
        return self._sla_in_minutes

    @sla_in_minutes.setter
    def sla_in_minutes(self, sla_in_minutes):
        """Sets the sla_in_minutes of this QueueDefinitionEventDto.

        An integer value representing the Queue SLA in minutes.  # noqa: E501

        :param sla_in_minutes: The sla_in_minutes of this QueueDefinitionEventDto.  # noqa: E501
        :type: int
        """

        self._sla_in_minutes = sla_in_minutes

    @property
    def risk_sla_in_minutes(self):
        """Gets the risk_sla_in_minutes of this QueueDefinitionEventDto.  # noqa: E501

        An integer value representing the Queue RiskSla in minutes.  # noqa: E501

        :return: The risk_sla_in_minutes of this QueueDefinitionEventDto.  # noqa: E501
        :rtype: int
        """
        return self._risk_sla_in_minutes

    @risk_sla_in_minutes.setter
    def risk_sla_in_minutes(self, risk_sla_in_minutes):
        """Sets the risk_sla_in_minutes of this QueueDefinitionEventDto.

        An integer value representing the Queue RiskSla in minutes.  # noqa: E501

        :param risk_sla_in_minutes: The risk_sla_in_minutes of this QueueDefinitionEventDto.  # noqa: E501
        :type: int
        """

        self._risk_sla_in_minutes = risk_sla_in_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueDefinitionEventDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueDefinitionEventDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueDefinitionEventDto):
            return True

        return self.to_dict() != other.to_dict()
