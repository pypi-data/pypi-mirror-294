# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class LicenseRuntimeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'machine_id': 'int',
        'machine_name': 'str',
        'host_machine_name': 'str',
        'service_user_name': 'str',
        'machine_type': 'str',
        'runtimes': 'int',
        'robots_count': 'int',
        'executing_count': 'int',
        'is_online': 'bool',
        'is_licensed': 'bool',
        'enabled': 'bool',
        'machine_scope': 'str'
    }

    attribute_map = {
        'key': 'Key',
        'machine_id': 'MachineId',
        'machine_name': 'MachineName',
        'host_machine_name': 'HostMachineName',
        'service_user_name': 'ServiceUserName',
        'machine_type': 'MachineType',
        'runtimes': 'Runtimes',
        'robots_count': 'RobotsCount',
        'executing_count': 'ExecutingCount',
        'is_online': 'IsOnline',
        'is_licensed': 'IsLicensed',
        'enabled': 'Enabled',
        'machine_scope': 'MachineScope'
    }

    def __init__(self, key=None, machine_id=None, machine_name=None, host_machine_name=None, service_user_name=None, machine_type=None, runtimes=None, robots_count=None, executing_count=None, is_online=None, is_licensed=None, enabled=None, machine_scope=None, _configuration=None):  # noqa: E501
        """LicenseRuntimeDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._machine_id = None
        self._machine_name = None
        self._host_machine_name = None
        self._service_user_name = None
        self._machine_type = None
        self._runtimes = None
        self._robots_count = None
        self._executing_count = None
        self._is_online = None
        self._is_licensed = None
        self._enabled = None
        self._machine_scope = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if machine_id is not None:
            self.machine_id = machine_id
        if machine_name is not None:
            self.machine_name = machine_name
        if host_machine_name is not None:
            self.host_machine_name = host_machine_name
        if service_user_name is not None:
            self.service_user_name = service_user_name
        if machine_type is not None:
            self.machine_type = machine_type
        if runtimes is not None:
            self.runtimes = runtimes
        if robots_count is not None:
            self.robots_count = robots_count
        if executing_count is not None:
            self.executing_count = executing_count
        if is_online is not None:
            self.is_online = is_online
        if is_licensed is not None:
            self.is_licensed = is_licensed
        if enabled is not None:
            self.enabled = enabled
        if machine_scope is not None:
            self.machine_scope = machine_scope

    @property
    def key(self):
        """Gets the key of this LicenseRuntimeDto.  # noqa: E501

        The license key.  # noqa: E501

        :return: The key of this LicenseRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LicenseRuntimeDto.

        The license key.  # noqa: E501

        :param key: The key of this LicenseRuntimeDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def machine_id(self):
        """Gets the machine_id of this LicenseRuntimeDto.  # noqa: E501

        The Machine's Id.  # noqa: E501

        :return: The machine_id of this LicenseRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this LicenseRuntimeDto.

        The Machine's Id.  # noqa: E501

        :param machine_id: The machine_id of this LicenseRuntimeDto.  # noqa: E501
        :type: int
        """

        self._machine_id = machine_id

    @property
    def machine_name(self):
        """Gets the machine_name of this LicenseRuntimeDto.  # noqa: E501

        The Machine's Name.  # noqa: E501

        :return: The machine_name of this LicenseRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this LicenseRuntimeDto.

        The Machine's Name.  # noqa: E501

        :param machine_name: The machine_name of this LicenseRuntimeDto.  # noqa: E501
        :type: str
        """

        self._machine_name = machine_name

    @property
    def host_machine_name(self):
        """Gets the host_machine_name of this LicenseRuntimeDto.  # noqa: E501

        The Host machine's Name.  # noqa: E501

        :return: The host_machine_name of this LicenseRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._host_machine_name

    @host_machine_name.setter
    def host_machine_name(self, host_machine_name):
        """Sets the host_machine_name of this LicenseRuntimeDto.

        The Host machine's Name.  # noqa: E501

        :param host_machine_name: The host_machine_name of this LicenseRuntimeDto.  # noqa: E501
        :type: str
        """

        self._host_machine_name = host_machine_name

    @property
    def service_user_name(self):
        """Gets the service_user_name of this LicenseRuntimeDto.  # noqa: E501

        The Service username when installed in user mode.  # noqa: E501

        :return: The service_user_name of this LicenseRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._service_user_name

    @service_user_name.setter
    def service_user_name(self, service_user_name):
        """Sets the service_user_name of this LicenseRuntimeDto.

        The Service username when installed in user mode.  # noqa: E501

        :param service_user_name: The service_user_name of this LicenseRuntimeDto.  # noqa: E501
        :type: str
        """

        self._service_user_name = service_user_name

    @property
    def machine_type(self):
        """Gets the machine_type of this LicenseRuntimeDto.  # noqa: E501

        The Machine's Type.  # noqa: E501

        :return: The machine_type of this LicenseRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this LicenseRuntimeDto.

        The Machine's Type.  # noqa: E501

        :param machine_type: The machine_type of this LicenseRuntimeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Standard", "Template"]  # noqa: E501
        if (self._configuration.client_side_validation and
                machine_type not in allowed_values):
            raise ValueError(
                "Invalid value for `machine_type` ({0}), must be one of {1}"  # noqa: E501
                .format(machine_type, allowed_values)
            )

        self._machine_type = machine_type

    @property
    def runtimes(self):
        """Gets the runtimes of this LicenseRuntimeDto.  # noqa: E501

        Maximum number of runtimes.  # noqa: E501

        :return: The runtimes of this LicenseRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes):
        """Sets the runtimes of this LicenseRuntimeDto.

        Maximum number of runtimes.  # noqa: E501

        :param runtimes: The runtimes of this LicenseRuntimeDto.  # noqa: E501
        :type: int
        """

        self._runtimes = runtimes

    @property
    def robots_count(self):
        """Gets the robots_count of this LicenseRuntimeDto.  # noqa: E501

        Total number of Robots.  # noqa: E501

        :return: The robots_count of this LicenseRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._robots_count

    @robots_count.setter
    def robots_count(self, robots_count):
        """Sets the robots_count of this LicenseRuntimeDto.

        Total number of Robots.  # noqa: E501

        :param robots_count: The robots_count of this LicenseRuntimeDto.  # noqa: E501
        :type: int
        """

        self._robots_count = robots_count

    @property
    def executing_count(self):
        """Gets the executing_count of this LicenseRuntimeDto.  # noqa: E501

        How many Robots acquired a license.  # noqa: E501

        :return: The executing_count of this LicenseRuntimeDto.  # noqa: E501
        :rtype: int
        """
        return self._executing_count

    @executing_count.setter
    def executing_count(self, executing_count):
        """Sets the executing_count of this LicenseRuntimeDto.

        How many Robots acquired a license.  # noqa: E501

        :param executing_count: The executing_count of this LicenseRuntimeDto.  # noqa: E501
        :type: int
        """

        self._executing_count = executing_count

    @property
    def is_online(self):
        """Gets the is_online of this LicenseRuntimeDto.  # noqa: E501

        If the machine is online.  # noqa: E501

        :return: The is_online of this LicenseRuntimeDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this LicenseRuntimeDto.

        If the machine is online.  # noqa: E501

        :param is_online: The is_online of this LicenseRuntimeDto.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    @property
    def is_licensed(self):
        """Gets the is_licensed of this LicenseRuntimeDto.  # noqa: E501

        If the machine is licensed.  # noqa: E501

        :return: The is_licensed of this LicenseRuntimeDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_licensed

    @is_licensed.setter
    def is_licensed(self, is_licensed):
        """Sets the is_licensed of this LicenseRuntimeDto.

        If the machine is licensed.  # noqa: E501

        :param is_licensed: The is_licensed of this LicenseRuntimeDto.  # noqa: E501
        :type: bool
        """

        self._is_licensed = is_licensed

    @property
    def enabled(self):
        """Gets the enabled of this LicenseRuntimeDto.  # noqa: E501

        If the machine is allowed to consume licenses.  # noqa: E501

        :return: The enabled of this LicenseRuntimeDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LicenseRuntimeDto.

        If the machine is allowed to consume licenses.  # noqa: E501

        :param enabled: The enabled of this LicenseRuntimeDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def machine_scope(self):
        """Gets the machine_scope of this LicenseRuntimeDto.  # noqa: E501

        Machine scope.  # noqa: E501

        :return: The machine_scope of this LicenseRuntimeDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_scope

    @machine_scope.setter
    def machine_scope(self, machine_scope):
        """Sets the machine_scope of this LicenseRuntimeDto.

        Machine scope.  # noqa: E501

        :param machine_scope: The machine_scope of this LicenseRuntimeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Shared", "PersonalWorkspace", "Cloud", "Serverless"]  # noqa: E501
        if (self._configuration.client_side_validation and
                machine_scope not in allowed_values):
            raise ValueError(
                "Invalid value for `machine_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(machine_scope, allowed_values)
            )

        self._machine_scope = machine_scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseRuntimeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseRuntimeDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseRuntimeDto):
            return True

        return self.to_dict() != other.to_dict()
