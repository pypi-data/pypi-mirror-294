# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class LogDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'windows_identity': 'str',
        'process_name': 'str',
        'time_stamp': 'datetime',
        'message': 'str',
        'job_key': 'str',
        'raw_message': 'str',
        'robot_name': 'str',
        'host_machine_name': 'str',
        'machine_id': 'int',
        'machine_key': 'str',
        'runtime_type': 'str',
        'id': 'int'
    }

    attribute_map = {
        'level': 'Level',
        'windows_identity': 'WindowsIdentity',
        'process_name': 'ProcessName',
        'time_stamp': 'TimeStamp',
        'message': 'Message',
        'job_key': 'JobKey',
        'raw_message': 'RawMessage',
        'robot_name': 'RobotName',
        'host_machine_name': 'HostMachineName',
        'machine_id': 'MachineId',
        'machine_key': 'MachineKey',
        'runtime_type': 'RuntimeType',
        'id': 'Id'
    }

    def __init__(self, level=None, windows_identity=None, process_name=None, time_stamp=None, message=None, job_key=None, raw_message=None, robot_name=None, host_machine_name=None, machine_id=None, machine_key=None, runtime_type=None, id=None, _configuration=None):  # noqa: E501
        """LogDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._level = None
        self._windows_identity = None
        self._process_name = None
        self._time_stamp = None
        self._message = None
        self._job_key = None
        self._raw_message = None
        self._robot_name = None
        self._host_machine_name = None
        self._machine_id = None
        self._machine_key = None
        self._runtime_type = None
        self._id = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if windows_identity is not None:
            self.windows_identity = windows_identity
        if process_name is not None:
            self.process_name = process_name
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if message is not None:
            self.message = message
        if job_key is not None:
            self.job_key = job_key
        if raw_message is not None:
            self.raw_message = raw_message
        if robot_name is not None:
            self.robot_name = robot_name
        if host_machine_name is not None:
            self.host_machine_name = host_machine_name
        if machine_id is not None:
            self.machine_id = machine_id
        if machine_key is not None:
            self.machine_key = machine_key
        if runtime_type is not None:
            self.runtime_type = runtime_type
        if id is not None:
            self.id = id

    @property
    def level(self):
        """Gets the level of this LogDto.  # noqa: E501

        Defines the log severity.  # noqa: E501

        :return: The level of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this LogDto.

        Defines the log severity.  # noqa: E501

        :param level: The level of this LogDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"]  # noqa: E501
        if (self._configuration.client_side_validation and
                level not in allowed_values):
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def windows_identity(self):
        """Gets the windows_identity of this LogDto.  # noqa: E501

        The name of the user that performed the action that was logged.  # noqa: E501

        :return: The windows_identity of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._windows_identity

    @windows_identity.setter
    def windows_identity(self, windows_identity):
        """Sets the windows_identity of this LogDto.

        The name of the user that performed the action that was logged.  # noqa: E501

        :param windows_identity: The windows_identity of this LogDto.  # noqa: E501
        :type: str
        """

        self._windows_identity = windows_identity

    @property
    def process_name(self):
        """Gets the process_name of this LogDto.  # noqa: E501

        The name of the process.  # noqa: E501

        :return: The process_name of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """Sets the process_name of this LogDto.

        The name of the process.  # noqa: E501

        :param process_name: The process_name of this LogDto.  # noqa: E501
        :type: str
        """

        self._process_name = process_name

    @property
    def time_stamp(self):
        """Gets the time_stamp of this LogDto.  # noqa: E501

        The exact date and time the action was performed.  # noqa: E501

        :return: The time_stamp of this LogDto.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this LogDto.

        The exact date and time the action was performed.  # noqa: E501

        :param time_stamp: The time_stamp of this LogDto.  # noqa: E501
        :type: datetime
        """

        self._time_stamp = time_stamp

    @property
    def message(self):
        """Gets the message of this LogDto.  # noqa: E501

        The log message. This can also be a message logged through the Log Message activity in UiPath Studio.  # noqa: E501

        :return: The message of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogDto.

        The log message. This can also be a message logged through the Log Message activity in UiPath Studio.  # noqa: E501

        :param message: The message of this LogDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def job_key(self):
        """Gets the job_key of this LogDto.  # noqa: E501

        The key of the job running the process that generated the log, if any.  # noqa: E501

        :return: The job_key of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._job_key

    @job_key.setter
    def job_key(self, job_key):
        """Sets the job_key of this LogDto.

        The key of the job running the process that generated the log, if any.  # noqa: E501

        :param job_key: The job_key of this LogDto.  # noqa: E501
        :type: str
        """

        self._job_key = job_key

    @property
    def raw_message(self):
        """Gets the raw_message of this LogDto.  # noqa: E501

        A JSON format message containing all the above fields.  # noqa: E501

        :return: The raw_message of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._raw_message

    @raw_message.setter
    def raw_message(self, raw_message):
        """Sets the raw_message of this LogDto.

        A JSON format message containing all the above fields.  # noqa: E501

        :param raw_message: The raw_message of this LogDto.  # noqa: E501
        :type: str
        """

        self._raw_message = raw_message

    @property
    def robot_name(self):
        """Gets the robot_name of this LogDto.  # noqa: E501

        The name of the Robot that generated the log.  # noqa: E501

        :return: The robot_name of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._robot_name

    @robot_name.setter
    def robot_name(self, robot_name):
        """Sets the robot_name of this LogDto.

        The name of the Robot that generated the log.  # noqa: E501

        :param robot_name: The robot_name of this LogDto.  # noqa: E501
        :type: str
        """

        self._robot_name = robot_name

    @property
    def host_machine_name(self):
        """Gets the host_machine_name of this LogDto.  # noqa: E501

        The name of the machine that generated the log  # noqa: E501

        :return: The host_machine_name of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._host_machine_name

    @host_machine_name.setter
    def host_machine_name(self, host_machine_name):
        """Sets the host_machine_name of this LogDto.

        The name of the machine that generated the log  # noqa: E501

        :param host_machine_name: The host_machine_name of this LogDto.  # noqa: E501
        :type: str
        """

        self._host_machine_name = host_machine_name

    @property
    def machine_id(self):
        """Gets the machine_id of this LogDto.  # noqa: E501

        The Id of the Machine on which the Robot that generated the log is running.  # noqa: E501

        :return: The machine_id of this LogDto.  # noqa: E501
        :rtype: int
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this LogDto.

        The Id of the Machine on which the Robot that generated the log is running.  # noqa: E501

        :param machine_id: The machine_id of this LogDto.  # noqa: E501
        :type: int
        """

        self._machine_id = machine_id

    @property
    def machine_key(self):
        """Gets the machine_key of this LogDto.  # noqa: E501

        The Key of the Machine on which the Robot that generated the log is running.  # noqa: E501

        :return: The machine_key of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._machine_key

    @machine_key.setter
    def machine_key(self, machine_key):
        """Sets the machine_key of this LogDto.

        The Key of the Machine on which the Robot that generated the log is running.  # noqa: E501

        :param machine_key: The machine_key of this LogDto.  # noqa: E501
        :type: str
        """

        self._machine_key = machine_key

    @property
    def runtime_type(self):
        """Gets the runtime_type of this LogDto.  # noqa: E501

        The RuntimeType of the job referenced by the JobKey field  # noqa: E501

        :return: The runtime_type of this LogDto.  # noqa: E501
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """Sets the runtime_type of this LogDto.

        The RuntimeType of the job referenced by the JobKey field  # noqa: E501

        :param runtime_type: The runtime_type of this LogDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NonProduction", "Attended", "Unattended", "Development", "Studio", "RpaDeveloper", "StudioX", "CitizenDeveloper", "Headless", "StudioPro", "RpaDeveloperPro", "TestAutomation", "AutomationCloud", "Serverless", "AutomationKit", "ServerlessTestAutomation", "AutomationCloudTestAutomation", "AttendedStudioWeb"]  # noqa: E501
        if (self._configuration.client_side_validation and
                runtime_type not in allowed_values):
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    @property
    def id(self):
        """Gets the id of this LogDto.  # noqa: E501


        :return: The id of this LogDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogDto.


        :param id: The id of this LogDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LogDto):
            return True

        return self.to_dict() != other.to_dict()
