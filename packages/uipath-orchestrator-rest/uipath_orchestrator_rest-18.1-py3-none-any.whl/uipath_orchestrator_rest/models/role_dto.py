# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class RoleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'type': 'str',
        'groups': 'str',
        'is_static': 'bool',
        'is_editable': 'bool',
        'permissions': 'list[PermissionDto]',
        'id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'display_name': 'DisplayName',
        'type': 'Type',
        'groups': 'Groups',
        'is_static': 'IsStatic',
        'is_editable': 'IsEditable',
        'permissions': 'Permissions',
        'id': 'Id'
    }

    def __init__(self, name=None, display_name=None, type=None, groups=None, is_static=None, is_editable=None, permissions=None, id=None, _configuration=None):  # noqa: E501
        """RoleDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._type = None
        self._groups = None
        self._is_static = None
        self._is_editable = None
        self._permissions = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if type is not None:
            self.type = type
        if groups is not None:
            self.groups = groups
        if is_static is not None:
            self.is_static = is_static
        if is_editable is not None:
            self.is_editable = is_editable
        if permissions is not None:
            self.permissions = permissions
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this RoleDto.  # noqa: E501

        A custom name for the role.  # noqa: E501

        :return: The name of this RoleDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleDto.

        A custom name for the role.  # noqa: E501

        :param name: The name of this RoleDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this RoleDto.  # noqa: E501

        An alternative name used for UI display.  # noqa: E501

        :return: The display_name of this RoleDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RoleDto.

        An alternative name used for UI display.  # noqa: E501

        :param display_name: The display_name of this RoleDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                display_name is not None and len(display_name) > 64):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `64`")  # noqa: E501

        self._display_name = display_name

    @property
    def type(self):
        """Gets the type of this RoleDto.  # noqa: E501

        Can be: Mixed, Tenant or Folder based on the permissions it includes  # noqa: E501

        :return: The type of this RoleDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoleDto.

        Can be: Mixed, Tenant or Folder based on the permissions it includes  # noqa: E501

        :param type: The type of this RoleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Mixed", "Tenant", "Folder"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def groups(self):
        """Gets the groups of this RoleDto.  # noqa: E501

        Allows grouping multiple roles together.  # noqa: E501

        :return: The groups of this RoleDto.  # noqa: E501
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this RoleDto.

        Allows grouping multiple roles together.  # noqa: E501

        :param groups: The groups of this RoleDto.  # noqa: E501
        :type: str
        """

        self._groups = groups

    @property
    def is_static(self):
        """Gets the is_static of this RoleDto.  # noqa: E501

        States whether this role is defined by the application and cannot be deleted or it is user defined and can be deleted.  # noqa: E501

        :return: The is_static of this RoleDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_static

    @is_static.setter
    def is_static(self, is_static):
        """Sets the is_static of this RoleDto.

        States whether this role is defined by the application and cannot be deleted or it is user defined and can be deleted.  # noqa: E501

        :param is_static: The is_static of this RoleDto.  # noqa: E501
        :type: bool
        """

        self._is_static = is_static

    @property
    def is_editable(self):
        """Gets the is_editable of this RoleDto.  # noqa: E501

        States whether the permissions for this role can be modified or not.  # noqa: E501

        :return: The is_editable of this RoleDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """Sets the is_editable of this RoleDto.

        States whether the permissions for this role can be modified or not.  # noqa: E501

        :param is_editable: The is_editable of this RoleDto.  # noqa: E501
        :type: bool
        """

        self._is_editable = is_editable

    @property
    def permissions(self):
        """Gets the permissions of this RoleDto.  # noqa: E501

        The collection of application permissions associated with the role.  # noqa: E501

        :return: The permissions of this RoleDto.  # noqa: E501
        :rtype: list[PermissionDto]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RoleDto.

        The collection of application permissions associated with the role.  # noqa: E501

        :param permissions: The permissions of this RoleDto.  # noqa: E501
        :type: list[PermissionDto]
        """

        self._permissions = permissions

    @property
    def id(self):
        """Gets the id of this RoleDto.  # noqa: E501


        :return: The id of this RoleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoleDto.


        :param id: The id of this RoleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoleDto):
            return True

        return self.to_dict() != other.to_dict()
