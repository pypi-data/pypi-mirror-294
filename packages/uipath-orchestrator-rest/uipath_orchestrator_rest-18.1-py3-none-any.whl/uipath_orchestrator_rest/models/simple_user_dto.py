# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class SimpleUserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'surname': 'str',
        'user_name': 'str',
        'domain': 'str',
        'directory_identifier': 'str',
        'full_name': 'str',
        'email_address': 'str',
        'is_email_confirmed': 'bool',
        'last_login_time': 'datetime',
        'is_active': 'bool',
        'creation_time': 'datetime',
        'authentication_source': 'str',
        'password': 'str',
        'is_external_licensed': 'bool',
        'user_roles': 'list[UserRoleDto]',
        'roles_list': 'list[str]',
        'login_providers': 'list[str]',
        'organization_units': 'list[OrganizationUnitDto]',
        'tenant_id': 'int',
        'tenancy_name': 'str',
        'tenant_display_name': 'str',
        'tenant_key': 'str',
        'type': 'str',
        'provision_type': 'str',
        'license_type': 'str',
        'robot_provision': 'AttendedRobotDto',
        'unattended_robot': 'UnattendedRobotDto',
        'notification_subscription': 'UserNotificationSubscription',
        'key': 'str',
        'may_have_user_session': 'bool',
        'may_have_robot_session': 'bool',
        'may_have_unattended_session': 'bool',
        'may_have_personal_workspace': 'bool',
        'restrict_to_personal_workspace': 'bool',
        'update_policy': 'UpdatePolicyDto',
        'account_id': 'str',
        'last_modification_time': 'datetime',
        'last_modifier_user_id': 'int',
        'creator_user_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'surname': 'Surname',
        'user_name': 'UserName',
        'domain': 'Domain',
        'directory_identifier': 'DirectoryIdentifier',
        'full_name': 'FullName',
        'email_address': 'EmailAddress',
        'is_email_confirmed': 'IsEmailConfirmed',
        'last_login_time': 'LastLoginTime',
        'is_active': 'IsActive',
        'creation_time': 'CreationTime',
        'authentication_source': 'AuthenticationSource',
        'password': 'Password',
        'is_external_licensed': 'IsExternalLicensed',
        'user_roles': 'UserRoles',
        'roles_list': 'RolesList',
        'login_providers': 'LoginProviders',
        'organization_units': 'OrganizationUnits',
        'tenant_id': 'TenantId',
        'tenancy_name': 'TenancyName',
        'tenant_display_name': 'TenantDisplayName',
        'tenant_key': 'TenantKey',
        'type': 'Type',
        'provision_type': 'ProvisionType',
        'license_type': 'LicenseType',
        'robot_provision': 'RobotProvision',
        'unattended_robot': 'UnattendedRobot',
        'notification_subscription': 'NotificationSubscription',
        'key': 'Key',
        'may_have_user_session': 'MayHaveUserSession',
        'may_have_robot_session': 'MayHaveRobotSession',
        'may_have_unattended_session': 'MayHaveUnattendedSession',
        'may_have_personal_workspace': 'MayHavePersonalWorkspace',
        'restrict_to_personal_workspace': 'RestrictToPersonalWorkspace',
        'update_policy': 'UpdatePolicy',
        'account_id': 'AccountId',
        'last_modification_time': 'LastModificationTime',
        'last_modifier_user_id': 'LastModifierUserId',
        'creator_user_id': 'CreatorUserId',
        'id': 'Id'
    }

    def __init__(self, name=None, surname=None, user_name=None, domain=None, directory_identifier=None, full_name=None, email_address=None, is_email_confirmed=None, last_login_time=None, is_active=None, creation_time=None, authentication_source=None, password=None, is_external_licensed=None, user_roles=None, roles_list=None, login_providers=None, organization_units=None, tenant_id=None, tenancy_name=None, tenant_display_name=None, tenant_key=None, type=None, provision_type=None, license_type=None, robot_provision=None, unattended_robot=None, notification_subscription=None, key=None, may_have_user_session=None, may_have_robot_session=None, may_have_unattended_session=None, may_have_personal_workspace=None, restrict_to_personal_workspace=None, update_policy=None, account_id=None, last_modification_time=None, last_modifier_user_id=None, creator_user_id=None, id=None, _configuration=None):  # noqa: E501
        """SimpleUserDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._surname = None
        self._user_name = None
        self._domain = None
        self._directory_identifier = None
        self._full_name = None
        self._email_address = None
        self._is_email_confirmed = None
        self._last_login_time = None
        self._is_active = None
        self._creation_time = None
        self._authentication_source = None
        self._password = None
        self._is_external_licensed = None
        self._user_roles = None
        self._roles_list = None
        self._login_providers = None
        self._organization_units = None
        self._tenant_id = None
        self._tenancy_name = None
        self._tenant_display_name = None
        self._tenant_key = None
        self._type = None
        self._provision_type = None
        self._license_type = None
        self._robot_provision = None
        self._unattended_robot = None
        self._notification_subscription = None
        self._key = None
        self._may_have_user_session = None
        self._may_have_robot_session = None
        self._may_have_unattended_session = None
        self._may_have_personal_workspace = None
        self._restrict_to_personal_workspace = None
        self._update_policy = None
        self._account_id = None
        self._last_modification_time = None
        self._last_modifier_user_id = None
        self._creator_user_id = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if surname is not None:
            self.surname = surname
        if user_name is not None:
            self.user_name = user_name
        if domain is not None:
            self.domain = domain
        if directory_identifier is not None:
            self.directory_identifier = directory_identifier
        if full_name is not None:
            self.full_name = full_name
        if email_address is not None:
            self.email_address = email_address
        if is_email_confirmed is not None:
            self.is_email_confirmed = is_email_confirmed
        if last_login_time is not None:
            self.last_login_time = last_login_time
        if is_active is not None:
            self.is_active = is_active
        if creation_time is not None:
            self.creation_time = creation_time
        if authentication_source is not None:
            self.authentication_source = authentication_source
        if password is not None:
            self.password = password
        if is_external_licensed is not None:
            self.is_external_licensed = is_external_licensed
        if user_roles is not None:
            self.user_roles = user_roles
        if roles_list is not None:
            self.roles_list = roles_list
        if login_providers is not None:
            self.login_providers = login_providers
        if organization_units is not None:
            self.organization_units = organization_units
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenancy_name is not None:
            self.tenancy_name = tenancy_name
        if tenant_display_name is not None:
            self.tenant_display_name = tenant_display_name
        if tenant_key is not None:
            self.tenant_key = tenant_key
        if type is not None:
            self.type = type
        if provision_type is not None:
            self.provision_type = provision_type
        if license_type is not None:
            self.license_type = license_type
        if robot_provision is not None:
            self.robot_provision = robot_provision
        if unattended_robot is not None:
            self.unattended_robot = unattended_robot
        if notification_subscription is not None:
            self.notification_subscription = notification_subscription
        if key is not None:
            self.key = key
        if may_have_user_session is not None:
            self.may_have_user_session = may_have_user_session
        if may_have_robot_session is not None:
            self.may_have_robot_session = may_have_robot_session
        if may_have_unattended_session is not None:
            self.may_have_unattended_session = may_have_unattended_session
        if may_have_personal_workspace is not None:
            self.may_have_personal_workspace = may_have_personal_workspace
        if restrict_to_personal_workspace is not None:
            self.restrict_to_personal_workspace = restrict_to_personal_workspace
        if update_policy is not None:
            self.update_policy = update_policy
        if account_id is not None:
            self.account_id = account_id
        if last_modification_time is not None:
            self.last_modification_time = last_modification_time
        if last_modifier_user_id is not None:
            self.last_modifier_user_id = last_modifier_user_id
        if creator_user_id is not None:
            self.creator_user_id = creator_user_id
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this SimpleUserDto.  # noqa: E501

        The name of the person for which the user is created.  # noqa: E501

        :return: The name of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimpleUserDto.

        The name of the person for which the user is created.  # noqa: E501

        :param name: The name of this SimpleUserDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 1024):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def surname(self):
        """Gets the surname of this SimpleUserDto.  # noqa: E501

        The surname of the person for which the user is created.  # noqa: E501

        :return: The surname of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this SimpleUserDto.

        The surname of the person for which the user is created.  # noqa: E501

        :param surname: The surname of this SimpleUserDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                surname is not None and len(surname) > 1024):
            raise ValueError("Invalid value for `surname`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                surname is not None and len(surname) < 0):
            raise ValueError("Invalid value for `surname`, length must be greater than or equal to `0`")  # noqa: E501

        self._surname = surname

    @property
    def user_name(self):
        """Gets the user_name of this SimpleUserDto.  # noqa: E501

        The name used to login to Orchestrator.  # noqa: E501

        :return: The user_name of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SimpleUserDto.

        The name used to login to Orchestrator.  # noqa: E501

        :param user_name: The user_name of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def domain(self):
        """Gets the domain of this SimpleUserDto.  # noqa: E501

        The domain from which the user is imported  # noqa: E501

        :return: The domain of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SimpleUserDto.

        The domain from which the user is imported  # noqa: E501

        :param domain: The domain of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def directory_identifier(self):
        """Gets the directory_identifier of this SimpleUserDto.  # noqa: E501

        The directory identifier from which the user is imported  # noqa: E501

        :return: The directory_identifier of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._directory_identifier

    @directory_identifier.setter
    def directory_identifier(self, directory_identifier):
        """Sets the directory_identifier of this SimpleUserDto.

        The directory identifier from which the user is imported  # noqa: E501

        :param directory_identifier: The directory_identifier of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._directory_identifier = directory_identifier

    @property
    def full_name(self):
        """Gets the full_name of this SimpleUserDto.  # noqa: E501

        The full name of the person constructed with the format Name Surname.  # noqa: E501

        :return: The full_name of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SimpleUserDto.

        The full name of the person constructed with the format Name Surname.  # noqa: E501

        :param full_name: The full_name of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def email_address(self):
        """Gets the email_address of this SimpleUserDto.  # noqa: E501

        The e-mail address associated with the user.  # noqa: E501

        :return: The email_address of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this SimpleUserDto.

        The e-mail address associated with the user.  # noqa: E501

        :param email_address: The email_address of this SimpleUserDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email_address is not None and len(email_address) > 256):
            raise ValueError("Invalid value for `email_address`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                email_address is not None and len(email_address) < 0):
            raise ValueError("Invalid value for `email_address`, length must be greater than or equal to `0`")  # noqa: E501

        self._email_address = email_address

    @property
    def is_email_confirmed(self):
        """Gets the is_email_confirmed of this SimpleUserDto.  # noqa: E501

        States if the email address is valid or not.  # noqa: E501

        :return: The is_email_confirmed of this SimpleUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_email_confirmed

    @is_email_confirmed.setter
    def is_email_confirmed(self, is_email_confirmed):
        """Sets the is_email_confirmed of this SimpleUserDto.

        States if the email address is valid or not.  # noqa: E501

        :param is_email_confirmed: The is_email_confirmed of this SimpleUserDto.  # noqa: E501
        :type: bool
        """

        self._is_email_confirmed = is_email_confirmed

    @property
    def last_login_time(self):
        """Gets the last_login_time of this SimpleUserDto.  # noqa: E501

        The date and time when the user last logged in, or null if the user never logged in.  # noqa: E501

        :return: The last_login_time of this SimpleUserDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """Sets the last_login_time of this SimpleUserDto.

        The date and time when the user last logged in, or null if the user never logged in.  # noqa: E501

        :param last_login_time: The last_login_time of this SimpleUserDto.  # noqa: E501
        :type: datetime
        """

        self._last_login_time = last_login_time

    @property
    def is_active(self):
        """Gets the is_active of this SimpleUserDto.  # noqa: E501

        States if the user is active or not. An inactive user cannot login to Orchestrator.  # noqa: E501

        :return: The is_active of this SimpleUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SimpleUserDto.

        States if the user is active or not. An inactive user cannot login to Orchestrator.  # noqa: E501

        :param is_active: The is_active of this SimpleUserDto.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def creation_time(self):
        """Gets the creation_time of this SimpleUserDto.  # noqa: E501

        The date and time when the user was created.  # noqa: E501

        :return: The creation_time of this SimpleUserDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this SimpleUserDto.

        The date and time when the user was created.  # noqa: E501

        :param creation_time: The creation_time of this SimpleUserDto.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def authentication_source(self):
        """Gets the authentication_source of this SimpleUserDto.  # noqa: E501

        The source which authenticated this user.  # noqa: E501

        :return: The authentication_source of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._authentication_source

    @authentication_source.setter
    def authentication_source(self, authentication_source):
        """Sets the authentication_source of this SimpleUserDto.

        The source which authenticated this user.  # noqa: E501

        :param authentication_source: The authentication_source of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._authentication_source = authentication_source

    @property
    def password(self):
        """Gets the password of this SimpleUserDto.  # noqa: E501

        The password used during application login.  # noqa: E501

        :return: The password of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SimpleUserDto.

        The password used during application login.  # noqa: E501

        :param password: The password of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def is_external_licensed(self):
        """Gets the is_external_licensed of this SimpleUserDto.  # noqa: E501


        :return: The is_external_licensed of this SimpleUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_external_licensed

    @is_external_licensed.setter
    def is_external_licensed(self, is_external_licensed):
        """Sets the is_external_licensed of this SimpleUserDto.


        :param is_external_licensed: The is_external_licensed of this SimpleUserDto.  # noqa: E501
        :type: bool
        """

        self._is_external_licensed = is_external_licensed

    @property
    def user_roles(self):
        """Gets the user_roles of this SimpleUserDto.  # noqa: E501

        The collection of roles associated with the user.  # noqa: E501

        :return: The user_roles of this SimpleUserDto.  # noqa: E501
        :rtype: list[UserRoleDto]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this SimpleUserDto.

        The collection of roles associated with the user.  # noqa: E501

        :param user_roles: The user_roles of this SimpleUserDto.  # noqa: E501
        :type: list[UserRoleDto]
        """

        self._user_roles = user_roles

    @property
    def roles_list(self):
        """Gets the roles_list of this SimpleUserDto.  # noqa: E501

        The collection of role names associated with the user.  # noqa: E501

        :return: The roles_list of this SimpleUserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles_list

    @roles_list.setter
    def roles_list(self, roles_list):
        """Sets the roles_list of this SimpleUserDto.

        The collection of role names associated with the user.  # noqa: E501

        :param roles_list: The roles_list of this SimpleUserDto.  # noqa: E501
        :type: list[str]
        """

        self._roles_list = roles_list

    @property
    def login_providers(self):
        """Gets the login_providers of this SimpleUserDto.  # noqa: E501

        The collection of entities that can authenticate the user.  # noqa: E501

        :return: The login_providers of this SimpleUserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._login_providers

    @login_providers.setter
    def login_providers(self, login_providers):
        """Sets the login_providers of this SimpleUserDto.

        The collection of entities that can authenticate the user.  # noqa: E501

        :param login_providers: The login_providers of this SimpleUserDto.  # noqa: E501
        :type: list[str]
        """

        self._login_providers = login_providers

    @property
    def organization_units(self):
        """Gets the organization_units of this SimpleUserDto.  # noqa: E501

        The collection of organization units associated with the user.  # noqa: E501

        :return: The organization_units of this SimpleUserDto.  # noqa: E501
        :rtype: list[OrganizationUnitDto]
        """
        return self._organization_units

    @organization_units.setter
    def organization_units(self, organization_units):
        """Sets the organization_units of this SimpleUserDto.

        The collection of organization units associated with the user.  # noqa: E501

        :param organization_units: The organization_units of this SimpleUserDto.  # noqa: E501
        :type: list[OrganizationUnitDto]
        """

        self._organization_units = organization_units

    @property
    def tenant_id(self):
        """Gets the tenant_id of this SimpleUserDto.  # noqa: E501

        The id of the tenant owning the user.  # noqa: E501

        :return: The tenant_id of this SimpleUserDto.  # noqa: E501
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this SimpleUserDto.

        The id of the tenant owning the user.  # noqa: E501

        :param tenant_id: The tenant_id of this SimpleUserDto.  # noqa: E501
        :type: int
        """

        self._tenant_id = tenant_id

    @property
    def tenancy_name(self):
        """Gets the tenancy_name of this SimpleUserDto.  # noqa: E501

        The name of the tenant owning the user.  # noqa: E501

        :return: The tenancy_name of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._tenancy_name

    @tenancy_name.setter
    def tenancy_name(self, tenancy_name):
        """Sets the tenancy_name of this SimpleUserDto.

        The name of the tenant owning the user.  # noqa: E501

        :param tenancy_name: The tenancy_name of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._tenancy_name = tenancy_name

    @property
    def tenant_display_name(self):
        """Gets the tenant_display_name of this SimpleUserDto.  # noqa: E501

        The display name of the tenant owning the user.  # noqa: E501

        :return: The tenant_display_name of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._tenant_display_name

    @tenant_display_name.setter
    def tenant_display_name(self, tenant_display_name):
        """Sets the tenant_display_name of this SimpleUserDto.

        The display name of the tenant owning the user.  # noqa: E501

        :param tenant_display_name: The tenant_display_name of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._tenant_display_name = tenant_display_name

    @property
    def tenant_key(self):
        """Gets the tenant_key of this SimpleUserDto.  # noqa: E501

        The key of the tenant owning the user.  # noqa: E501

        :return: The tenant_key of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._tenant_key

    @tenant_key.setter
    def tenant_key(self, tenant_key):
        """Sets the tenant_key of this SimpleUserDto.

        The key of the tenant owning the user.  # noqa: E501

        :param tenant_key: The tenant_key of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._tenant_key = tenant_key

    @property
    def type(self):
        """Gets the type of this SimpleUserDto.  # noqa: E501

        The user type.  # noqa: E501

        :return: The type of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimpleUserDto.

        The user type.  # noqa: E501

        :param type: The type of this SimpleUserDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["User", "Robot", "DirectoryUser", "DirectoryGroup", "DirectoryRobot", "DirectoryExternalApplication"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def provision_type(self):
        """Gets the provision_type of this SimpleUserDto.  # noqa: E501

        The user type.  # noqa: E501

        :return: The provision_type of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._provision_type

    @provision_type.setter
    def provision_type(self, provision_type):
        """Sets the provision_type of this SimpleUserDto.

        The user type.  # noqa: E501

        :param provision_type: The provision_type of this SimpleUserDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Manual", "Automatic"]  # noqa: E501
        if (self._configuration.client_side_validation and
                provision_type not in allowed_values):
            raise ValueError(
                "Invalid value for `provision_type` ({0}), must be one of {1}"  # noqa: E501
                .format(provision_type, allowed_values)
            )

        self._provision_type = provision_type

    @property
    def license_type(self):
        """Gets the license_type of this SimpleUserDto.  # noqa: E501

        The user's license type.  # noqa: E501

        :return: The license_type of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this SimpleUserDto.

        The user's license type.  # noqa: E501

        :param license_type: The license_type of this SimpleUserDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NonProduction", "Attended", "Unattended", "Development", "Studio", "RpaDeveloper", "StudioX", "CitizenDeveloper", "Headless", "StudioPro", "RpaDeveloperPro", "TestAutomation", "AutomationCloud", "Serverless", "AutomationKit", "ServerlessTestAutomation", "AutomationCloudTestAutomation", "AttendedStudioWeb"]  # noqa: E501
        if (self._configuration.client_side_validation and
                license_type not in allowed_values):
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"  # noqa: E501
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    @property
    def robot_provision(self):
        """Gets the robot_provision of this SimpleUserDto.  # noqa: E501


        :return: The robot_provision of this SimpleUserDto.  # noqa: E501
        :rtype: AttendedRobotDto
        """
        return self._robot_provision

    @robot_provision.setter
    def robot_provision(self, robot_provision):
        """Sets the robot_provision of this SimpleUserDto.


        :param robot_provision: The robot_provision of this SimpleUserDto.  # noqa: E501
        :type: AttendedRobotDto
        """

        self._robot_provision = robot_provision

    @property
    def unattended_robot(self):
        """Gets the unattended_robot of this SimpleUserDto.  # noqa: E501


        :return: The unattended_robot of this SimpleUserDto.  # noqa: E501
        :rtype: UnattendedRobotDto
        """
        return self._unattended_robot

    @unattended_robot.setter
    def unattended_robot(self, unattended_robot):
        """Sets the unattended_robot of this SimpleUserDto.


        :param unattended_robot: The unattended_robot of this SimpleUserDto.  # noqa: E501
        :type: UnattendedRobotDto
        """

        self._unattended_robot = unattended_robot

    @property
    def notification_subscription(self):
        """Gets the notification_subscription of this SimpleUserDto.  # noqa: E501


        :return: The notification_subscription of this SimpleUserDto.  # noqa: E501
        :rtype: UserNotificationSubscription
        """
        return self._notification_subscription

    @notification_subscription.setter
    def notification_subscription(self, notification_subscription):
        """Sets the notification_subscription of this SimpleUserDto.


        :param notification_subscription: The notification_subscription of this SimpleUserDto.  # noqa: E501
        :type: UserNotificationSubscription
        """

        self._notification_subscription = notification_subscription

    @property
    def key(self):
        """Gets the key of this SimpleUserDto.  # noqa: E501

        Unique key for a user  # noqa: E501

        :return: The key of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SimpleUserDto.

        Unique key for a user  # noqa: E501

        :param key: The key of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def may_have_user_session(self):
        """Gets the may_have_user_session of this SimpleUserDto.  # noqa: E501

        Specifies whether this user is allowed to have a User session (default: true)  # noqa: E501

        :return: The may_have_user_session of this SimpleUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._may_have_user_session

    @may_have_user_session.setter
    def may_have_user_session(self, may_have_user_session):
        """Sets the may_have_user_session of this SimpleUserDto.

        Specifies whether this user is allowed to have a User session (default: true)  # noqa: E501

        :param may_have_user_session: The may_have_user_session of this SimpleUserDto.  # noqa: E501
        :type: bool
        """

        self._may_have_user_session = may_have_user_session

    @property
    def may_have_robot_session(self):
        """Gets the may_have_robot_session of this SimpleUserDto.  # noqa: E501

        Specifies whether this user is allowed to have an Attended Robot attached (default: true)  # noqa: E501

        :return: The may_have_robot_session of this SimpleUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._may_have_robot_session

    @may_have_robot_session.setter
    def may_have_robot_session(self, may_have_robot_session):
        """Sets the may_have_robot_session of this SimpleUserDto.

        Specifies whether this user is allowed to have an Attended Robot attached (default: true)  # noqa: E501

        :param may_have_robot_session: The may_have_robot_session of this SimpleUserDto.  # noqa: E501
        :type: bool
        """

        self._may_have_robot_session = may_have_robot_session

    @property
    def may_have_unattended_session(self):
        """Gets the may_have_unattended_session of this SimpleUserDto.  # noqa: E501

        Specifies whether this user is allowed to have an Unattended Robot attached (default: false)  # noqa: E501

        :return: The may_have_unattended_session of this SimpleUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._may_have_unattended_session

    @may_have_unattended_session.setter
    def may_have_unattended_session(self, may_have_unattended_session):
        """Sets the may_have_unattended_session of this SimpleUserDto.

        Specifies whether this user is allowed to have an Unattended Robot attached (default: false)  # noqa: E501

        :param may_have_unattended_session: The may_have_unattended_session of this SimpleUserDto.  # noqa: E501
        :type: bool
        """

        self._may_have_unattended_session = may_have_unattended_session

    @property
    def may_have_personal_workspace(self):
        """Gets the may_have_personal_workspace of this SimpleUserDto.  # noqa: E501

        Specifies whether this user is allowed to have a Personal Workspace  # noqa: E501

        :return: The may_have_personal_workspace of this SimpleUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._may_have_personal_workspace

    @may_have_personal_workspace.setter
    def may_have_personal_workspace(self, may_have_personal_workspace):
        """Sets the may_have_personal_workspace of this SimpleUserDto.

        Specifies whether this user is allowed to have a Personal Workspace  # noqa: E501

        :param may_have_personal_workspace: The may_have_personal_workspace of this SimpleUserDto.  # noqa: E501
        :type: bool
        """

        self._may_have_personal_workspace = may_have_personal_workspace

    @property
    def restrict_to_personal_workspace(self):
        """Gets the restrict_to_personal_workspace of this SimpleUserDto.  # noqa: E501

        Restrict to personal workspace view  # noqa: E501

        :return: The restrict_to_personal_workspace of this SimpleUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_to_personal_workspace

    @restrict_to_personal_workspace.setter
    def restrict_to_personal_workspace(self, restrict_to_personal_workspace):
        """Sets the restrict_to_personal_workspace of this SimpleUserDto.

        Restrict to personal workspace view  # noqa: E501

        :param restrict_to_personal_workspace: The restrict_to_personal_workspace of this SimpleUserDto.  # noqa: E501
        :type: bool
        """

        self._restrict_to_personal_workspace = restrict_to_personal_workspace

    @property
    def update_policy(self):
        """Gets the update_policy of this SimpleUserDto.  # noqa: E501


        :return: The update_policy of this SimpleUserDto.  # noqa: E501
        :rtype: UpdatePolicyDto
        """
        return self._update_policy

    @update_policy.setter
    def update_policy(self, update_policy):
        """Sets the update_policy of this SimpleUserDto.


        :param update_policy: The update_policy of this SimpleUserDto.  # noqa: E501
        :type: UpdatePolicyDto
        """

        self._update_policy = update_policy

    @property
    def account_id(self):
        """Gets the account_id of this SimpleUserDto.  # noqa: E501


        :return: The account_id of this SimpleUserDto.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SimpleUserDto.


        :param account_id: The account_id of this SimpleUserDto.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this SimpleUserDto.  # noqa: E501


        :return: The last_modification_time of this SimpleUserDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this SimpleUserDto.


        :param last_modification_time: The last_modification_time of this SimpleUserDto.  # noqa: E501
        :type: datetime
        """

        self._last_modification_time = last_modification_time

    @property
    def last_modifier_user_id(self):
        """Gets the last_modifier_user_id of this SimpleUserDto.  # noqa: E501


        :return: The last_modifier_user_id of this SimpleUserDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modifier_user_id

    @last_modifier_user_id.setter
    def last_modifier_user_id(self, last_modifier_user_id):
        """Sets the last_modifier_user_id of this SimpleUserDto.


        :param last_modifier_user_id: The last_modifier_user_id of this SimpleUserDto.  # noqa: E501
        :type: int
        """

        self._last_modifier_user_id = last_modifier_user_id

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this SimpleUserDto.  # noqa: E501


        :return: The creator_user_id of this SimpleUserDto.  # noqa: E501
        :rtype: int
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this SimpleUserDto.


        :param creator_user_id: The creator_user_id of this SimpleUserDto.  # noqa: E501
        :type: int
        """

        self._creator_user_id = creator_user_id

    @property
    def id(self):
        """Gets the id of this SimpleUserDto.  # noqa: E501


        :return: The id of this SimpleUserDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimpleUserDto.


        :param id: The id of this SimpleUserDto.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleUserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleUserDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimpleUserDto):
            return True

        return self.to_dict() != other.to_dict()
