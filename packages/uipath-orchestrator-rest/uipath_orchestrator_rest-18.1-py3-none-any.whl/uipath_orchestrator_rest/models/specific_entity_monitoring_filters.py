# coding: utf-8

"""
    UiPath.WebApi 18.0

    Orchestrator API  # noqa: E501

    OpenAPI spec version: 18.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from uipath_orchestrator_rest.configuration import Configuration


class SpecificEntityMonitoringFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'int',
        'include_subfolders': 'bool',
        'tenant_id': 'int',
        'organization_unit_ids': 'list[int]',
        'time_frame_minutes': 'int',
        'entity_ids': 'list[int]'
    }

    attribute_map = {
        'entity_id': 'entityId',
        'include_subfolders': 'includeSubfolders',
        'tenant_id': 'tenantId',
        'organization_unit_ids': 'organizationUnitIds',
        'time_frame_minutes': 'timeFrameMinutes',
        'entity_ids': 'entityIds'
    }

    def __init__(self, entity_id=None, include_subfolders=None, tenant_id=None, organization_unit_ids=None, time_frame_minutes=None, entity_ids=None, _configuration=None):  # noqa: E501
        """SpecificEntityMonitoringFilters - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._entity_id = None
        self._include_subfolders = None
        self._tenant_id = None
        self._organization_unit_ids = None
        self._time_frame_minutes = None
        self._entity_ids = None
        self.discriminator = None

        if entity_id is not None:
            self.entity_id = entity_id
        if include_subfolders is not None:
            self.include_subfolders = include_subfolders
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if organization_unit_ids is not None:
            self.organization_unit_ids = organization_unit_ids
        if time_frame_minutes is not None:
            self.time_frame_minutes = time_frame_minutes
        if entity_ids is not None:
            self.entity_ids = entity_ids

    @property
    def entity_id(self):
        """Gets the entity_id of this SpecificEntityMonitoringFilters.  # noqa: E501


        :return: The entity_id of this SpecificEntityMonitoringFilters.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SpecificEntityMonitoringFilters.


        :param entity_id: The entity_id of this SpecificEntityMonitoringFilters.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                entity_id is not None and entity_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `entity_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def include_subfolders(self):
        """Gets the include_subfolders of this SpecificEntityMonitoringFilters.  # noqa: E501


        :return: The include_subfolders of this SpecificEntityMonitoringFilters.  # noqa: E501
        :rtype: bool
        """
        return self._include_subfolders

    @include_subfolders.setter
    def include_subfolders(self, include_subfolders):
        """Sets the include_subfolders of this SpecificEntityMonitoringFilters.


        :param include_subfolders: The include_subfolders of this SpecificEntityMonitoringFilters.  # noqa: E501
        :type: bool
        """

        self._include_subfolders = include_subfolders

    @property
    def tenant_id(self):
        """Gets the tenant_id of this SpecificEntityMonitoringFilters.  # noqa: E501


        :return: The tenant_id of this SpecificEntityMonitoringFilters.  # noqa: E501
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this SpecificEntityMonitoringFilters.


        :param tenant_id: The tenant_id of this SpecificEntityMonitoringFilters.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                tenant_id is not None and tenant_id > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `tenant_id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tenant_id is not None and tenant_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `tenant_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def organization_unit_ids(self):
        """Gets the organization_unit_ids of this SpecificEntityMonitoringFilters.  # noqa: E501


        :return: The organization_unit_ids of this SpecificEntityMonitoringFilters.  # noqa: E501
        :rtype: list[int]
        """
        return self._organization_unit_ids

    @organization_unit_ids.setter
    def organization_unit_ids(self, organization_unit_ids):
        """Sets the organization_unit_ids of this SpecificEntityMonitoringFilters.


        :param organization_unit_ids: The organization_unit_ids of this SpecificEntityMonitoringFilters.  # noqa: E501
        :type: list[int]
        """

        self._organization_unit_ids = organization_unit_ids

    @property
    def time_frame_minutes(self):
        """Gets the time_frame_minutes of this SpecificEntityMonitoringFilters.  # noqa: E501


        :return: The time_frame_minutes of this SpecificEntityMonitoringFilters.  # noqa: E501
        :rtype: int
        """
        return self._time_frame_minutes

    @time_frame_minutes.setter
    def time_frame_minutes(self, time_frame_minutes):
        """Sets the time_frame_minutes of this SpecificEntityMonitoringFilters.


        :param time_frame_minutes: The time_frame_minutes of this SpecificEntityMonitoringFilters.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                time_frame_minutes is not None and time_frame_minutes > 43200):  # noqa: E501
            raise ValueError("Invalid value for `time_frame_minutes`, must be a value less than or equal to `43200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_frame_minutes is not None and time_frame_minutes < 1):  # noqa: E501
            raise ValueError("Invalid value for `time_frame_minutes`, must be a value greater than or equal to `1`")  # noqa: E501

        self._time_frame_minutes = time_frame_minutes

    @property
    def entity_ids(self):
        """Gets the entity_ids of this SpecificEntityMonitoringFilters.  # noqa: E501


        :return: The entity_ids of this SpecificEntityMonitoringFilters.  # noqa: E501
        :rtype: list[int]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):
        """Sets the entity_ids of this SpecificEntityMonitoringFilters.


        :param entity_ids: The entity_ids of this SpecificEntityMonitoringFilters.  # noqa: E501
        :type: list[int]
        """

        self._entity_ids = entity_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecificEntityMonitoringFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecificEntityMonitoringFilters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpecificEntityMonitoringFilters):
            return True

        return self.to_dict() != other.to_dict()
