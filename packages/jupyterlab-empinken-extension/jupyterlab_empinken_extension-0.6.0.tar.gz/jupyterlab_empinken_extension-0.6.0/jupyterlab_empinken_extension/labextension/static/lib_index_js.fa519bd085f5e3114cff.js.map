{"version":3,"file":"lib_index_js.fa519bd085f5e3114cff.js","mappings":"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","sources":["webpack://jupyterlab_empinken_extension/./src/empinken_commands.ts","webpack://jupyterlab_empinken_extension/./src/icons.ts","webpack://jupyterlab_empinken_extension/./src/index.ts"],"sourcesContent":["/********* JUPYTERLAB_EMPINKEN _EXTENSION *********\n\nThe `jupyterlab_empinken_extension` provides a range of tools\nfor manipulating the displayed background colour of notebook code cells.\n\nThe name derives from an original classic notebook extension that was used to\nadd a pink background colour to appropriately tagged cells as a way for academic tutors\nto highlight notebook cells in which they were providing feedback comments back to students.\n\nThe extension works as follows:\n\n- cell metadata tags are used to label cells that should be recoloured.\n- the jupyterlab-celltagsclasses extension (installed as a dependency)\n  maps cell metadata tags onto CSS classes (using the form: cell-tag-TAG) \n  on the HTML cell view;\n- CSS style rules are used to set the background cell colour on \n  appropriately classed cell elements.\n\nWhilst metadata tags may be manually applied to cells via the JupyterLab UI,\ntoolbar buttons are also supported to allow tags to be applied to the active\ncell or multiple selected cells.\n\nTags may be applied to all notebook cell types (markdown cell, code cell, etc.).\n\nClicking the notebook button toggles the metadata tag for the \ncorresponding empinken cell type.\n\nUsing the notebook button to add a tag also ensures that at most ONE of the \nsupported empinken tags is added to a cell at any one time.\n\nUser settings (defined in ../scheme/plugin.json) determine:\n\n- which empinken buttons are displayed on the notebook toolbar;\n- what background colour is applied to an empinken tagged cell;\n- whether the background colour should be applied for each empinken cell type;\n- what empinken tag prefix (if any) should be applied to\n  empinken cell types (defaults to `style-`)\n\n*/\n\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { Cell } from '@jupyterlab/cells';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { activityIcon, solutionIcon, learnerIcon, tutorIcon } from './icons';\n\n// The jupyterlab-celltagsclasses extension provides a range of utility functions\n// for working with notebook cells, including:\n// - metadata handling on a cell's logical model\nimport { md_insert, md_remove, md_has } from 'jupyterlab-celltagsclasses';\n// - working with cells' in the rendered JupyterLab UI view\nimport { Scope, apply_on_cells } from 'jupyterlab-celltagsclasses';\n\n// Define a collection of empinken cell types.\nexport const typs: string[] = ['activity', 'solution', 'learner', 'tutor'];\n\n// Metadata tags used by the extension are generated as a combination of a\n// settings provided prefix and the empinken cell type.\nfunction getFullTag(prefix: string, tag: string): string {\n  return `${prefix}${tag}`;\n}\n\n// When a button is clicked, toggle the corresponding\n// empinken tag on the appropriate cell(s).\n// Also ensure that AT MOST ONE empinken tag is applied\n// to any particular cell.\nconst toggleTag = (\n  cell: Cell,\n  typ: string,\n  prefix: string,\n  settings: ISettingRegistry.ISettings | null\n) => {\n  // This is made unnecessarily complicated because we provide\n  // a level of indirection between the empinken cell type and the associated tag.\n  // This means we need to generate the tag list from the settings,\n  // rather than derive them directly from the empinken cell types.\n  // This is also going to be brittle when it comes to the CSS, because\n  // the cell classes are derived directly from the cell tag using the\n  // jupyterlab-celltagsclasses extension.\n  const tags = typs.map(\n    t => (settings?.get(`${t}_tag`).composite as string) || t\n  );\n\n  // The full tag is the prefix and the partial tag as specified in the settings\n  const tag = (settings?.get(`${typ}_tag`).composite as string) || typ;\n  const fullTag = getFullTag(prefix, tag);\n  // Metadata path to the tags\n  const tags_path = 'tags';\n  // Does that tag exist in the cell metadata?\n  const hasTag = md_has(cell, tags_path, fullTag);\n  if (hasTag) {\n    // Remove the desired tag\n    md_remove(cell, tags_path, fullTag);\n  } else {\n    // We only allow one empinken tag per cell,\n    // so remove all empinken tags if any are present\n    tags.forEach(typ => md_remove(cell, tags_path, getFullTag(prefix, typ)));\n    // Set the tag\n    md_insert(cell, tags_path, fullTag);\n  }\n  console.log(`Toggled cell tag ${fullTag}`, cell.node);\n};\n\n// If the user settings for the extension are updated,\n// act on the updates if we can.\n// In particular:\n// - update cell background colours\n// - ignore cell colours if the render setting\n//   for an empinken cell type is not true.\nexport function update_empinken_settings(\n  settings: ISettingRegistry.ISettings,\n  root: HTMLElement\n) {\n  // Cells are coloured according to CSS variables\n  // used in CSS rules applied to appropriately classed cells.\n  // The CSS rules are defined in ../style/base.css.\n  // The jupyterlab-celltagsclasses extensions creates a class of the form cell-tag-TAG\n  // for a cell tag TAG. The class is removed if the TAG is removed.\n  for (const typ of typs) {\n    // Get the background colour for an empinken type from user-settings.\n    let color = settings.get(`${typ}_color`).composite as string;\n    // Get the background render flag for an empinken type from user-settings.\n    const render = settings.get(`${typ}_render`).composite as boolean;\n    // if we don't want to render the background colour, make it transparent\n    if (!render) {\n      color = 'transparent';\n    }\n    // Set the CSS variable for the empinken cell type\n    root.style.setProperty(`--iou-${typ}-bg-color`, color);\n  }\n}\n\nconst captions: { [key: string]: string } = {\n  A: 'Colour activity cell',\n  S: 'Colour solution cell',\n  L: 'Colour learner / call to action cell',\n  T: 'Colour tutor / feedback  cell'\n};\n\n// Create the dictionary with explicit typing\nconst iconDict: { [key: string]: LabIcon } = {\n  A: activityIcon,\n  S: solutionIcon,\n  L: learnerIcon,\n  T: tutorIcon\n};\n\n// When the extension is loaded, create a set of empinken commands,\n// and register notebook toolbar buttons as required.\nexport const create_empinken_commands = (\n  app: JupyterFrontEnd,\n  notebookTracker: INotebookTracker,\n  palette: ICommandPalette,\n  settings: ISettingRegistry.ISettings | null\n) => {\n  // A settings defined prefix is available that may be added\n  // to each empinken cell type when setting the metadata tag.\n  const prefix =\n    settings && typeof settings.get('tagprefix').composite === 'string'\n      ? (settings.get('tagprefix').composite as string)\n      : '';\n\n  // Add commands and command buttons.\n  // These can be controlled from the extension settings.\n  // Currently, JupyterLab needs to be reloaded in a browser tab / window\n  // for the button display regime to be updated.\n  const add_command = (\n    suffix: string,\n    typ: string,\n    label: string,\n    scope: Scope, // Which cells are tags applied to\n    keys: string[], // Keyboard shortcut combinations\n    settings: ISettingRegistry.ISettings | null,\n    the_function: (cell: Cell) => void\n  ) => {\n    // By default (in the absence of settings),\n    // we will try to display the buttons\n    let display_button = true;\n    // If there are settings, respect them:\n    if (settings !== null) {\n      display_button = settings.get(`${typ}_button`).composite as boolean;\n    }\n    // Register the button as required\n    // TO DO - should we separate the command and the button?\n    // Here, display_button determines whether the command is registered,\n    // as well as whether the button is displayed\n    if (display_button) {\n      // Register a command in a de facto `ouseful_empinken` command namespace\n      const command = `ouseful_empinken:${suffix}`;\n      // Add the command...\n      app.commands.addCommand(command, {\n        label,\n        caption: captions[label],\n        icon: iconDict[label],\n        execute: () => {\n          console.log(label);\n          // ... to the desired cell(s)\n          apply_on_cells(notebookTracker, scope, the_function);\n        }\n      });\n      // Register the toolbar buttons\n      palette.addItem({ command, category: 'empinken_buttons' });\n      // Register keyboard shortcut bindings\n      if (keys) {\n        app.commands.addKeyBinding({\n          command,\n          keys,\n          selector: '.jp-Notebook'\n        });\n      }\n    }\n  };\n\n  // For each empinken cell type, add an appropriate command.\n  typs.forEach(typ => {\n    // Use a simple label text label for the button\n    // Really this should be a vector image?\n    const label = typ[0].toUpperCase();\n    // console.log(`typ ${typ} has tag ${typ} ok? `);\n    // Add the command and also register and display buttons if required\n    add_command(\n      `empkn_${typ}`, // The command name suffix\n      typ, // The empinken cell type\n      label, // The button label\n      Scope.Multiple, // Cell scope: Active, Multiple (all selected), All\n      [], // Keyboard shortcuts\n      settings, // User preference settings\n      (cell: Cell) => toggleTag(cell, typ, prefix, settings) // The command function\n    );\n  });\n};\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nexport const activityIcon = new LabIcon({\n  name: 'jupyterlab_empinken_extension:activity_icon',\n  svgstr:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>book-open-variant-outline</title><path d=\"M12 21.5C10.65 20.65 8.2 20 6.5 20C4.85 20 3.15 20.3 1.75 21.05C1.65 21.1 1.6 21.1 1.5 21.1C1.25 21.1 1 20.85 1 20.6V6C1.6 5.55 2.25 5.25 3 5C4.11 4.65 5.33 4.5 6.5 4.5C8.45 4.5 10.55 4.9 12 6C13.45 4.9 15.55 4.5 17.5 4.5C18.67 4.5 19.89 4.65 21 5C21.75 5.25 22.4 5.55 23 6V20.6C23 20.85 22.75 21.1 22.5 21.1C22.4 21.1 22.35 21.1 22.25 21.05C20.85 20.3 19.15 20 17.5 20C15.8 20 13.35 20.65 12 21.5M11 7.5C9.64 6.9 7.84 6.5 6.5 6.5C5.3 6.5 4.1 6.65 3 7V18.5C4.1 18.15 5.3 18 6.5 18C7.84 18 9.64 18.4 11 19V7.5M13 19C14.36 18.4 16.16 18 17.5 18C18.7 18 19.9 18.15 21 18.5V7C19.9 6.65 18.7 6.5 17.5 6.5C16.16 6.5 14.36 6.9 13 7.5V19M14 16.35C14.96 16 16.12 15.83 17.5 15.83C18.54 15.83 19.38 15.91 20 16.07V14.57C19.13 14.41 18.29 14.33 17.5 14.33C16.16 14.33 15 14.5 14 14.76V16.35M14 13.69C14.96 13.34 16.12 13.16 17.5 13.16C18.54 13.16 19.38 13.24 20 13.4V11.9C19.13 11.74 18.29 11.67 17.5 11.67C16.22 11.67 15.05 11.82 14 12.12V13.69M14 11C14.96 10.67 16.12 10.5 17.5 10.5C18.41 10.5 19.26 10.59 20 10.78V9.23C19.13 9.08 18.29 9 17.5 9C16.18 9 15 9.15 14 9.46V11Z\" /></svg>'\n});\n \nexport const solutionIcon = new LabIcon({\n  name: 'jupyterlab_empinken_extension:solution_icon',\n  svgstr:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>check</title><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\" /></svg>'\n});\n \n\nexport const learnerIcon = new LabIcon({\n  name: 'jupyterlab_empinken_extension:learner_icon',\n  svgstr:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>school-outline</title><path d=\"M12 3L1 9L5 11.18V17.18L12 21L19 17.18V11.18L21 10.09V17H23V9L12 3M18.82 9L12 12.72L5.18 9L12 5.28L18.82 9M17 16L12 18.72L7 16V12.27L12 15L17 12.27V16Z\" /></svg>'\n});\n \n\nexport const tutorIcon = new LabIcon({\n  name: 'jupyterlab_empinken_extension:tutor_icon',\n  svgstr:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>format-quote-close</title><path d=\"M14,17H17L19,13V7H13V13H16M6,17H9L11,13V7H5V13H8L6,17Z\" /></svg>'\n});\n ","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ICommandPalette } from '@jupyterlab/apputils';\n\nimport {\n  update_empinken_settings,\n  create_empinken_commands\n} from './empinken_commands';\n\n/**\n * Initialisation data for the jupyterlab_empinken_extension extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab_empinken_extension:plugin',\n  description:\n    'A JupyterLab extension for colouring notebook cell backgrounds.',\n  autoStart: true,\n  requires: [INotebookTracker, ICommandPalette],\n  optional: [ISettingRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    notebookTracker: INotebookTracker,\n    palette: ICommandPalette,\n    settingRegistry: ISettingRegistry | null\n  ) => {\n    console.log(\n      'JupyterLab extension jupyterlab_empinken_extension is activated!'\n    );\n\n    // User-settings for the extension are defined in ../schema/plugin.json .properties\n    if (settingRegistry) {\n      settingRegistry\n        .load(plugin.id)\n        .then(loaded_settings => {\n          console.log(\n            'jupyterlab_empinken_extension settings loaded:',\n            loaded_settings.composite\n          );\n\n          // Handle the background colours\n          // The document object is always available.\n          const root = document.documentElement;\n          const updateSettings = (): void => {\n            console.log('jupyterlab_empinken_extension settings updated');\n            update_empinken_settings(loaded_settings, root);\n          };\n          updateSettings();\n          // Update settings if the settings are changed\n          // In the case of empinken, the following will happen\n          // immediately the settings are saved (click in the settings canvas to trigger the update):\n          // - [Y] update the CSS variables with new colour settings.\n          // - [Y] enable/disable display of background colour for each empinken type.\n          // - [N] enable/disable button display (requires refresh of browser window).\n          loaded_settings.changed.connect(updateSettings);\n          // Create empinken commands and add appropriate notebook buttons.\n          create_empinken_commands(\n            app,\n            notebookTracker,\n            palette,\n            loaded_settings\n          );\n        })\n        .catch(reason => {\n          console.error(\n            'Failed to load settings for jupyterlab_empinken_extension.',\n            reason\n          );\n          // Create empinken commands.\n          // The lack of settings means buttons will not be displayed.\n          // No CSS variables will have been set via the extension,\n          // but they may have been defined via a custom CSS file.\n          create_empinken_commands(app, notebookTracker, palette, null);\n        });\n    } else {\n      // Create empinken commands.\n      // The lack of settings means buttons will not be displayed.\n      // No CSS variables will have been set via the extension,\n      // but they may have been defined via a custom CSS file\n      create_empinken_commands(app, notebookTracker, palette, null);\n    }\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}