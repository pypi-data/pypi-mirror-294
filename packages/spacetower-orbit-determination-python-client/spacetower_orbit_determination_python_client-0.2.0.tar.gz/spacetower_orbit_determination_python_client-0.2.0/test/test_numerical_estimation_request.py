# coding: utf-8

"""
    Orbit Determination API

    Orbit Determination API

    The version of the OpenAPI document: 0.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_determination_python_client.models.numerical_estimation_request import NumericalEstimationRequest

class TestNumericalEstimationRequest(unittest.TestCase):
    """NumericalEstimationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalEstimationRequest:
        """Test NumericalEstimationRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalEstimationRequest`
        """
        model = NumericalEstimationRequest()
        if include_optional:
            return NumericalEstimationRequest(
                initial_guess = spacetower_orbit_determination_python_client.models.state_estimate.StateEstimate(
                    orbit = spacetower_orbit_determination_python_client.models.orbit.Orbit(
                        orbit_type = 'KEPLERIAN', ), 
                    space_object = spacetower_orbit_determination_python_client.models.space_object.SpaceObject(
                        mass = 1.337, 
                        drag_coefficient = 1.337, 
                        propulsion_system = spacetower_orbit_determination_python_client.models.propulsion_system.PropulsionSystem(
                            thruster = spacetower_orbit_determination_python_client.models.thruster.Thruster(
                                thrust = 1.337, 
                                specific_impulse = 1.337, 
                                axis_in_space_object_frame = spacetower_orbit_determination_python_client.models.vector3_d.Vector3D(
                                    x = 1.337, 
                                    y = 1.337, 
                                    z = 1.337, ), ), ), 
                        clock_offset = 1.337, 
                        space_object_type = 'ISOTROPIC', ), ),
                maneuver_schedule = spacetower_orbit_determination_python_client.models.maneuver_schedule.ManeuverSchedule(
                    maneuver_schedule_type = 'LOCAL_FRAME_BASED_MANEUVER_SCHEDULE', ),
                attitude_sequence = spacetower_orbit_determination_python_client.models.attitude_sequence.AttitudeSequence(
                    attitude_sequence_type = 'DATE_TRIGGERED_ATTITUDE_SWITCH', 
                    initial_attitude_law = spacetower_orbit_determination_python_client.models.attitude_law.AttitudeLaw(
                        attitude_law_type = 'LOCAL_FRAME_ATTITUDE', ), ),
                measurements_set = [
                    spacetower_orbit_determination_python_client.models.measurements.Measurements(
                        measurement_type = 'POSITION_VELOCITY', 
                        dates = [
                            '2024-01-01T00:00Z'
                            ], )
                    ],
                simulation_configuration = spacetower_orbit_determination_python_client.models.simulation_configuration.SimulationConfiguration(
                    earth_fixed_frame_id = null, 
                    ellipsoid_id = 'WGS84', 
                    include_tidal_effects_in_eop_interpolation = True, 
                    shadow_model_type = 'CONICAL', 
                    perturbations = [
                        spacetower_orbit_determination_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'EARTH_POTENTIAL', )
                        ], 
                    integrator_configuration = spacetower_orbit_determination_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'VARIABLE_STEP', ), ),
                estimation_configuration = spacetower_orbit_determination_python_client.models.estimation_configuration.EstimationConfiguration(),
                post_process_configuration = spacetower_orbit_determination_python_client.models.post_process_configuration.PostProcessConfiguration(
                    output_osculating_orbit_type = 'KEPLERIAN', 
                    mean_theory = 'DSST_6X0', ),
                data = {
                    'key' : ''
                    }
            )
        else:
            return NumericalEstimationRequest(
                initial_guess = spacetower_orbit_determination_python_client.models.state_estimate.StateEstimate(
                    orbit = spacetower_orbit_determination_python_client.models.orbit.Orbit(
                        orbit_type = 'KEPLERIAN', ), 
                    space_object = spacetower_orbit_determination_python_client.models.space_object.SpaceObject(
                        mass = 1.337, 
                        drag_coefficient = 1.337, 
                        propulsion_system = spacetower_orbit_determination_python_client.models.propulsion_system.PropulsionSystem(
                            thruster = spacetower_orbit_determination_python_client.models.thruster.Thruster(
                                thrust = 1.337, 
                                specific_impulse = 1.337, 
                                axis_in_space_object_frame = spacetower_orbit_determination_python_client.models.vector3_d.Vector3D(
                                    x = 1.337, 
                                    y = 1.337, 
                                    z = 1.337, ), ), ), 
                        clock_offset = 1.337, 
                        space_object_type = 'ISOTROPIC', ), ),
                measurements_set = [
                    spacetower_orbit_determination_python_client.models.measurements.Measurements(
                        measurement_type = 'POSITION_VELOCITY', 
                        dates = [
                            '2024-01-01T00:00Z'
                            ], )
                    ],
                estimation_configuration = spacetower_orbit_determination_python_client.models.estimation_configuration.EstimationConfiguration(),
        )
        """

    def testNumericalEstimationRequest(self):
        """Test NumericalEstimationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
