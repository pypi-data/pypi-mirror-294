# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidateRequestOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'output_text': 'str'
    }

    attribute_map = {
        'output_text': 'outputText'
    }

    def __init__(self, output_text=None):  # noqa: E501
        """ValidateRequestOutput - a model defined in Swagger"""  # noqa: E501
        self._output_text = None
        self.discriminator = None
        if output_text is not None:
            self.output_text = output_text

    @property
    def output_text(self):
        """Gets the output_text of this ValidateRequestOutput.  # noqa: E501

        Output text is the raw output text of the model. The generative firewall performs validation on the output so the system can determine whether to show it to users.  # noqa: E501

        :return: The output_text of this ValidateRequestOutput.  # noqa: E501
        :rtype: str
        """
        return self._output_text

    @output_text.setter
    def output_text(self, output_text):
        """Sets the output_text of this ValidateRequestOutput.

        Output text is the raw output text of the model. The generative firewall performs validation on the output so the system can determine whether to show it to users.  # noqa: E501

        :param output_text: The output_text of this ValidateRequestOutput.  # noqa: E501
        :type: str
        """

        self._output_text = output_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateRequestOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateRequestOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
