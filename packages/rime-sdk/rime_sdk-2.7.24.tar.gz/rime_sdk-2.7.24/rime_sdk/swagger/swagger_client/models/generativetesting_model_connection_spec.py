# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativetestingModelConnectionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'http_headers': 'dict(str, str)',
        'endpoint_payload_template': 'str',
        'response_json_path': 'str'
    }

    attribute_map = {
        'url': 'url',
        'http_headers': 'httpHeaders',
        'endpoint_payload_template': 'endpointPayloadTemplate',
        'response_json_path': 'responseJsonPath'
    }

    def __init__(self, url=None, http_headers=None, endpoint_payload_template=None, response_json_path=None):  # noqa: E501
        """GenerativetestingModelConnectionSpec - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._http_headers = None
        self._endpoint_payload_template = None
        self._response_json_path = None
        self.discriminator = None
        self.url = url
        if http_headers is not None:
            self.http_headers = http_headers
        self.endpoint_payload_template = endpoint_payload_template
        self.response_json_path = response_json_path

    @property
    def url(self):
        """Gets the url of this GenerativetestingModelConnectionSpec.  # noqa: E501


        :return: The url of this GenerativetestingModelConnectionSpec.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GenerativetestingModelConnectionSpec.


        :param url: The url of this GenerativetestingModelConnectionSpec.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def http_headers(self):
        """Gets the http_headers of this GenerativetestingModelConnectionSpec.  # noqa: E501


        :return: The http_headers of this GenerativetestingModelConnectionSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers):
        """Sets the http_headers of this GenerativetestingModelConnectionSpec.


        :param http_headers: The http_headers of this GenerativetestingModelConnectionSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._http_headers = http_headers

    @property
    def endpoint_payload_template(self):
        """Gets the endpoint_payload_template of this GenerativetestingModelConnectionSpec.  # noqa: E501


        :return: The endpoint_payload_template of this GenerativetestingModelConnectionSpec.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_payload_template

    @endpoint_payload_template.setter
    def endpoint_payload_template(self, endpoint_payload_template):
        """Sets the endpoint_payload_template of this GenerativetestingModelConnectionSpec.


        :param endpoint_payload_template: The endpoint_payload_template of this GenerativetestingModelConnectionSpec.  # noqa: E501
        :type: str
        """
        if endpoint_payload_template is None:
            raise ValueError("Invalid value for `endpoint_payload_template`, must not be `None`")  # noqa: E501

        self._endpoint_payload_template = endpoint_payload_template

    @property
    def response_json_path(self):
        """Gets the response_json_path of this GenerativetestingModelConnectionSpec.  # noqa: E501

        A json path specifying where in the response json payload we can find the LLM's response response string. Note that the path must point to a string value in the json payload. Whitespace and other special characters can be encoded as unicode (\\u0020). Periods in json fields can be escaped with a backslash.  Example: - response payload: '{\"myfield\": {\"myotherfield\": \"Hey there!\"}}' - json path: \"myfield.myotherfield\"  Example: - response payload: '{\"myfield\": {\"myarr\": [\"Hey there!\"]}}' - json path: \"myfield.myarr.0\"  Example: - response payload: '{\"my.field\": \"hello\"}' - json path: \"my\\.field\"  The supported syntax is dot notation only as in the examples above.  # noqa: E501

        :return: The response_json_path of this GenerativetestingModelConnectionSpec.  # noqa: E501
        :rtype: str
        """
        return self._response_json_path

    @response_json_path.setter
    def response_json_path(self, response_json_path):
        """Sets the response_json_path of this GenerativetestingModelConnectionSpec.

        A json path specifying where in the response json payload we can find the LLM's response response string. Note that the path must point to a string value in the json payload. Whitespace and other special characters can be encoded as unicode (\\u0020). Periods in json fields can be escaped with a backslash.  Example: - response payload: '{\"myfield\": {\"myotherfield\": \"Hey there!\"}}' - json path: \"myfield.myotherfield\"  Example: - response payload: '{\"myfield\": {\"myarr\": [\"Hey there!\"]}}' - json path: \"myfield.myarr.0\"  Example: - response payload: '{\"my.field\": \"hello\"}' - json path: \"my\\.field\"  The supported syntax is dot notation only as in the examples above.  # noqa: E501

        :param response_json_path: The response_json_path of this GenerativetestingModelConnectionSpec.  # noqa: E501
        :type: str
        """
        if response_json_path is None:
            raise ValueError("Invalid value for `response_json_path`, must not be `None`")  # noqa: E501

        self._response_json_path = response_json_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativetestingModelConnectionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativetestingModelConnectionSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
