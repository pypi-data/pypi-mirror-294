# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallValidateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_results': 'dict(str, GenerativefirewallRuleOutput)',
        'output_results': 'dict(str, GenerativefirewallRuleOutput)'
    }

    attribute_map = {
        'input_results': 'inputResults',
        'output_results': 'outputResults'
    }

    def __init__(self, input_results=None, output_results=None):  # noqa: E501
        """GenerativefirewallValidateResponse - a model defined in Swagger"""  # noqa: E501
        self._input_results = None
        self._output_results = None
        self.discriminator = None
        if input_results is not None:
            self.input_results = input_results
        if output_results is not None:
            self.output_results = output_results

    @property
    def input_results(self):
        """Gets the input_results of this GenerativefirewallValidateResponse.  # noqa: E501

        Results of the firewall for user input. The key is a rule name.  # noqa: E501

        :return: The input_results of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: dict(str, GenerativefirewallRuleOutput)
        """
        return self._input_results

    @input_results.setter
    def input_results(self, input_results):
        """Sets the input_results of this GenerativefirewallValidateResponse.

        Results of the firewall for user input. The key is a rule name.  # noqa: E501

        :param input_results: The input_results of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: dict(str, GenerativefirewallRuleOutput)
        """

        self._input_results = input_results

    @property
    def output_results(self):
        """Gets the output_results of this GenerativefirewallValidateResponse.  # noqa: E501

        Results of the firewall for model output. The key is a rule name.  # noqa: E501

        :return: The output_results of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: dict(str, GenerativefirewallRuleOutput)
        """
        return self._output_results

    @output_results.setter
    def output_results(self, output_results):
        """Sets the output_results of this GenerativefirewallValidateResponse.

        Results of the firewall for model output. The key is a rule name.  # noqa: E501

        :param output_results: The output_results of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: dict(str, GenerativefirewallRuleOutput)
        """

        self._output_results = output_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallValidateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallValidateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
