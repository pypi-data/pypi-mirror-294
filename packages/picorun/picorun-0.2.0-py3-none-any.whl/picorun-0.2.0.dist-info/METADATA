Metadata-Version: 2.1
Name: picorun
Version: 0.2.0
Summary: PicoFun runtime components
Author-email: Dave Hall <skwashd@gmail.com>
License: Copyright 2023 Dave Hall - https://proactiveops.io
        
        Permission is hereby granted, free of charge, to any person obtaining a copy 
        of this software and associated documentation files (the “Software”), to deal 
        in the Software without restriction, including without limitation the rights 
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
        copies of the Software, and to permit persons to whom the Software is 
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all 
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
        SOFTWARE.
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: requests ==2.32.3
Provides-Extra: build
Requires-Dist: build ==1.2.1 ; extra == 'build'
Requires-Dist: twine ==5.1.1 ; extra == 'build'
Provides-Extra: dev
Requires-Dist: pytest ==8.3.2 ; extra == 'dev'
Requires-Dist: pytest-cov ==5.0.0 ; extra == 'dev'
Requires-Dist: pytest-mock ==3.14.0 ; extra == 'dev'
Requires-Dist: ruff ==0.6.3 ; extra == 'dev'

# PicoRun

PicoRun is a small collection of classes used by the default PicoFun 
implementation at run time. These classes don't do a lot, but they help keep 
the cost simple. Spinning the out into this package prevents lots of 
duplication. These functions are baked into a common lambda layer so the 
lambda functions stay small.

For more information about PicoFun, check out the [project on 
GitHub](https://github.com/proactiveops/picofun).
