from __future__ import annotations
import _wlplan.data
import _wlplan.graph
import _wlplan.planning
import typing
__all__ = list()
class _WLFeatures:
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, prune_features: str, multiset_hash: bool) -> None:
        ...
    @typing.overload
    def collect(self, dataset: _wlplan.data.Dataset) -> None:
        ...
    @typing.overload
    def collect(self, graphs: list[_wlplan.graph.Graph]) -> None:
        ...
    @typing.overload
    def embed(self, dataset: _wlplan.data.Dataset) -> list[list[int]]:
        ...
    @typing.overload
    def embed(self, graphs: list[_wlplan.graph.Graph]) -> list[list[int]]:
        ...
    @typing.overload
    def embed(self, state: list[_wlplan.planning.Atom]) -> list[int]:
        ...
    def get_n_features(self) -> int:
        ...
    def get_seen_counts(self) -> list[int]:
        ...
    def get_unseen_counts(self) -> list[int]:
        ...
    def get_weights(self) -> list[float]:
        ...
    @typing.overload
    def predict(self, graph: _wlplan.graph.Graph) -> float:
        ...
    @typing.overload
    def predict(self, state: list[_wlplan.planning.Atom]) -> float:
        ...
    def save(self, arg0: str) -> None:
        ...
    def set_problem(self, problem: _wlplan.planning.Problem) -> None:
        ...
    def set_weights(self, weights: list[float]) -> None:
        ...
