{"version":3,"file":"static/js/732.c19b7ab1.chunk.js","mappings":"+NA6Be,SAASA,EAAkBC,GAA6B,IAA5B,eAAEC,GAAuBD,EAClE,MAAME,GAAoBC,EAAAA,EAAAA,QAAkC,OAEtD,gBAAEC,EAAe,OAAEC,IAAWC,EAAAA,EAAAA,UAAQ,KAC1C,MAAMF,EAAkBH,EAAeM,KAAKC,GAAQA,EAAIC,OAElDC,EAAmB,IAAIC,IAC7BV,EAAeW,SAASJ,IAAS,IAADK,EACN,QAAxBA,EAAAL,EAAIM,4BAAoB,IAAAD,GAAxBA,EAA0BD,SAASG,IACjCL,EAAiBM,IAAID,EAAOE,WAAW,GACvC,IAkBJ,MAAO,CACLb,kBACAC,OAjBoCa,MAAMC,KAAKT,GAEoBH,KAClEU,IAAU,CACTR,KAAMQ,EACNG,KAAMnB,EAAeM,KAAKC,IAAS,IAADa,EAAAC,EAChC,MAAMP,EAAiC,QAA3BM,EAAGb,EAAIM,4BAAoB,IAAAO,OAAA,EAAxBA,EAA0BE,MACtCC,GAAMA,EAAEP,aAAeA,IAE1B,OAxCV,SAAwBQ,GACtB,GAAqB,kBAAVA,EACT,OAAOA,EAET,GAAqB,kBAAVA,EACT,IACE,MAAMC,EAAYC,KAAKC,MAAMH,GAC7B,GAAyB,kBAAdC,EACT,OAAOA,CAEX,CAAE,MACA,OAAO,IACT,CAGF,OAAO,IACT,CAwBiBG,CAAkC,QAApBP,EAAO,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQe,mBAAW,IAAAR,EAAAA,EAAI,KAAK,IAEpDS,KAAM,aAOT,GACA,CAAC9B,IAEE+B,GAA8B1B,EAAAA,EAAAA,UAClC,MACE2B,cAAe,CACbC,SAAS,GAEXC,MAAO,CACLJ,KAAM,UAERK,MAAO,CACLC,KAAM,GACNC,MAAO,QAETC,MAAO,CACLC,WAAYpC,EACZqC,WAAW,EACXR,cAAe,CACbS,YAAa,mBAGjBC,MAAO,CACLF,WAAW,EACXG,IAAK,EACLR,MAAO,CACLC,KAAM,OAGVQ,QAAS,CACPC,YAAa,IAEfC,YAAa,CACXC,OAAQ,CACNC,aAAc,GACdC,YAAa,IAGjB7C,YAEF,CAACA,EAAQD,IAGL+C,GAAuBC,EAAAA,EAAAA,KAE7B,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACFC,EAAE,OACFC,EAAE,OACFC,UAAS,8BAAAC,OAAgCP,GAAuBQ,UAEhEN,EAAAA,EAAAA,KAACO,IAAe,CACdC,WAAYC,IACZ9B,QAASA,EACT+B,IAAK7D,KAIb,C","sources":["components/evaluation_sets_correlations/GroupedColumnChart.tsx"],"sourcesContent":["import { Box } from \"@mantine/core\";\nimport { EvaluationSet, JSONValue } from \"../../types\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { useMemo, useRef } from \"react\";\nimport { useColorScheme } from \"@mantine/hooks\";\n\ntype Props = {\n  evaluationSets: EvaluationSet[];\n};\n\nfunction getNumberValue(value: JSONValue): number | null {\n  if (typeof value === \"number\") {\n    return value;\n  }\n  if (typeof value === \"string\") {\n    try {\n      const parsedNum = JSON.parse(value);\n      if (typeof parsedNum === \"number\") {\n        return parsedNum;\n      }\n    } catch {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nexport default function GroupedColumnChart({ evaluationSets }: Props) {\n  const chartComponentRef = useRef<HighchartsReact.RefObject>(null);\n\n  const { xAxisCategories, series } = useMemo(() => {\n    const xAxisCategories = evaluationSets.map((set) => set.name);\n\n    const metricCategories = new Set<string>();\n    evaluationSets.forEach((set) => {\n      set.evaluationSetMetrics?.forEach((metric) => {\n        metricCategories.add(metric.metricName);\n      });\n    });\n\n    const metricCategoriesArr: string[] = Array.from(metricCategories);\n\n    const series: Highcharts.SeriesColumnOptions[] = metricCategoriesArr.map(\n      (metricName) => ({\n        name: metricName,\n        data: evaluationSets.map((set) => {\n          const metric = set.evaluationSetMetrics?.find(\n            (m) => m.metricName === metricName\n          );\n          return getNumberValue(metric?.metricValue ?? null);\n        }),\n        type: \"column\",\n      })\n    );\n\n    return {\n      xAxisCategories,\n      series,\n    };\n  }, [evaluationSets]);\n\n  const options: Highcharts.Options = useMemo(\n    () => ({\n      accessibility: {\n        enabled: false,\n      },\n      chart: {\n        type: \"column\",\n      },\n      title: {\n        text: \"\",\n        align: \"left\",\n      },\n      xAxis: {\n        categories: xAxisCategories,\n        crosshair: true,\n        accessibility: {\n          description: \"Evaluation Run\",\n        },\n      },\n      yAxis: {\n        crosshair: true,\n        min: 0,\n        title: {\n          text: null,\n        },\n      },\n      tooltip: {\n        valueSuffix: \"\",\n      },\n      plotOptions: {\n        column: {\n          pointPadding: 0.2,\n          borderWidth: 0,\n        },\n      },\n      series,\n    }),\n    [series, xAxisCategories]\n  );\n\n  const preferredColorScheme = useColorScheme();\n\n  return (\n    <Box\n      h=\"100%\"\n      w=\"100%\"\n      className={`highcharts-container-theme-${preferredColorScheme}`}\n    >\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n        ref={chartComponentRef}\n      />\n    </Box>\n  );\n}\n"],"names":["GroupedColumnChart","_ref","evaluationSets","chartComponentRef","useRef","xAxisCategories","series","useMemo","map","set","name","metricCategories","Set","forEach","_set$evaluationSetMet","evaluationSetMetrics","metric","add","metricName","Array","from","data","_set$evaluationSetMet2","_metric$metricValue","find","m","value","parsedNum","JSON","parse","getNumberValue","metricValue","type","options","accessibility","enabled","chart","title","text","align","xAxis","categories","crosshair","description","yAxis","min","tooltip","valueSuffix","plotOptions","column","pointPadding","borderWidth","preferredColorScheme","useColorScheme","_jsx","Box","h","w","className","concat","children","HighchartsReact","highcharts","Highcharts","ref"],"sourceRoot":""}