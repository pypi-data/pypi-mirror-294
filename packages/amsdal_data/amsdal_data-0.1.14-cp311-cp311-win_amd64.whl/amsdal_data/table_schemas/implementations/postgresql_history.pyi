from amsdal_data.connections.implementations.postgresql_history import PostgresHistoricalConnection as PostgresHistoricalConnection
from amsdal_data.table_schemas.base import TableSchemaServiceBase as TableSchemaServiceBase
from amsdal_data.table_schemas.data_models.sql_table_column import SqlTableColumn as SqlTableColumn
from amsdal_data.table_schemas.implementations.mixins.sql_statements_mixin import SqlStatementsMixin as SqlStatementsMixin
from amsdal_data.transactions.constants import TRANSACTION_CLASS_NAME as TRANSACTION_CLASS_NAME
from amsdal_utils.models.data_models.address import Address
from amsdal_utils.models.data_models.table_schema import TableSchema
from typing import Any

class PostgresHistoricalTableSchemaService(SqlStatementsMixin, TableSchemaServiceBase):
    connection: PostgresHistoricalConnection
    TABLE_SEPARATOR: str
    COLUMN_SEPARATOR: str
    @staticmethod
    def _to_sql_type(type_: Any) -> str: ...
    def register_table(self, table_schema: TableSchema, *, is_internal_table: bool = False) -> tuple[str, bool]: ...
    def create_index(self, table_name: str, column_name: str) -> None: ...
    def unregister_table(self, address: Address) -> None: ...
    def resolve_table_name(self, address: Address) -> str: ...
    @staticmethod
    def _build_select_table_name_statement(table_name: str) -> tuple[str, list[Any]]: ...
    def create_table(self, table_name: str, table_schema: TableSchema, *, is_internal_table: bool = False) -> None: ...
    def register_internal_tables(self) -> None: ...
    def update_internal_table(self, table_schema: TableSchema) -> None: ...
