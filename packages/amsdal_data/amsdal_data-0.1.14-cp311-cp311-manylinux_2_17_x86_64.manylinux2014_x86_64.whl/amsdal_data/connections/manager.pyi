from amsdal_data.connections.base import Connectable as Connectable, ConnectionBase as ConnectionBase
from amsdal_data.connections.constants import CONNECTION_BACKEND_ALIASES as CONNECTION_BACKEND_ALIASES
from amsdal_data.connections.errors import AmsdalConnectionError as AmsdalConnectionError
from amsdal_data.lock.base import LockBase as LockBase
from amsdal_data.transactions.background.connections.base import WorkerConnectionBase as WorkerConnectionBase
from amsdal_utils.config.data_models.connection_config import ConnectionConfig as ConnectionConfig
from amsdal_utils.models.mixins.cached_mixin import CachedMixin
from amsdal_utils.utils.singleton import Singleton
from functools import cached_property as cached_property
from typing import Any

class ConnectionsManager(CachedMixin, metaclass=Singleton):
    _connection_instances: list[tuple[str, Connectable, dict[str, Any]]]
    def __init__(self, connection_configs: list[ConnectionConfig]) -> None: ...
    @cached_property
    def connections(self) -> list[Connectable]: ...
    @cached_property
    def transactional_connections(self) -> list[ConnectionBase]: ...
    @cached_property
    def lock_connection(self) -> LockBase: ...
    def connect(self) -> None: ...
    def prepare_connections(self) -> None: ...
    def disconnect(self) -> None: ...
    def get_connection(self, connection_name: str) -> ConnectionBase: ...
    def get_worker_connection(self, connection_name: str) -> WorkerConnectionBase: ...
    def get_connectable(self, connection_name: str) -> Connectable: ...
    @staticmethod
    def _resolve_backend_class(backend: str) -> Any: ...
