import redis
from amsdal_data.connections.errors import AmsdalConnectionError as AmsdalConnectionError
from amsdal_data.lock.base import LockBase as LockBase
from amsdal_utils.models.data_models.address import Address as Address
from typing import Any

class RedisLock(LockBase):
    client: redis.Redis
    @property
    def is_connected(self) -> bool: ...
    @property
    def is_alive(self) -> bool: ...
    def connect(self, host: str, *, port: int = 6379, username: str | None = None, password: str | None = None, ssl: bool = False, ssl_certfile: str | None = None, ssl_keyfile: str | None = None, ssl_ca_certs: str | None = None) -> None: ...
    def disconnect(self) -> None: ...
    def acquire(self, target_address: Address, *, timeout_ms: int = -1, blocking: bool = True, metadata: dict[str, Any] | None = None) -> bool: ...
    def release(self, target_address: Address) -> None: ...
    @staticmethod
    def _get_redis_client(host: str, *, port: int = 6379, username: str | None = None, password: str | None = None, ssl: bool = False, ssl_certfile: str | None = None, ssl_keyfile: str | None = None, ssl_ca_certs: str | None = None) -> Any: ...
