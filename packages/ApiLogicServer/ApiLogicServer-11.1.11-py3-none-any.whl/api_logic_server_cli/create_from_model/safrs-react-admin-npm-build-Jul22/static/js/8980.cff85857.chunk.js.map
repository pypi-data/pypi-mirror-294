{"version":3,"file":"static/js/8980.cff85857.chunk.js","mappings":"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","sources":["components/external/UserPasswordTab.tsx","components/ApiAdmin.tsx","components/external/index.tsx","components/Custom.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Typography, Button } from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { FormControl } from \"@mui/material\";\r\nimport { useRecordContext, useDataProvider } from \"react-admin\";\r\nimport { httpAuthClient } from \"../../rav4-jsonapi-client/ra-jsonapi-client\";\r\nimport { useConf } from \"../../Config\";\r\nimport { useNotify } from \"react-admin\";\r\n\r\nexport const UserPasswordTab = () => {\r\n  const conf = useConf();\r\n  const notify = useNotify();\r\n  const record = useRecordContext();\r\n  const dataProvider = useDataProvider();\r\n  const [pwdValue, setPwdValue] = useState(\"\");\r\n  const [rpwdValue, setRPwdValue] = useState(\"\");\r\n  const [submitColor, setSubmitColor] = useState<\r\n    \"default\" | \"inherit\" | \"secondary\" | \"primary\" | undefined\r\n  >(\"secondary\");\r\n  const onPwdChange = (e: any) => {\r\n    let pwdValue = e.target.value;\r\n    setPwdValue(pwdValue);\r\n    setSubmitColor(\r\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\r\n    );\r\n    // console.log(pwdValue, rpwdValue);\r\n  };\r\n  const onRPwdVerify = (e: any) => {\r\n    let rpwdValue = e.target.value;\r\n    setRPwdValue(rpwdValue);\r\n    setSubmitColor(\r\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\r\n    );\r\n    // console.log(pwdValue, rpwdValue);\r\n  };\r\n  const handleSubmit = () => {\r\n    // console.log(rpwdValue);\r\n    if (pwdValue !== rpwdValue) {\r\n      notify(\"Passwords don't match\", { type: \"warning\" });\r\n      return;\r\n    }\r\n    if (pwdValue.length < 6) {\r\n      notify(\"Password too short\", { type: \"warning\" });\r\n      return;\r\n    }\r\n    const data = {\r\n      password: pwdValue,\r\n    };\r\n    httpAuthClient(`${conf.api_root}/Users/${record.id}/change_password`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then(() => notify(\"Password Changed!\"))\r\n      .catch(() => notify(`Error Changing Password`, { type: \"warning\" }));\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component=\"form\"\r\n      sx={{\r\n        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\r\n      }}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n    >\r\n      <FormControl>\r\n        <Grid item xs={12} spacing={4}>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            <b>Change the user password</b>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} spacing={4}>\r\n          <TextField\r\n            id=\"outlined-password-input\"\r\n            label=\"New Password\"\r\n            type=\"password\"\r\n            onChange={onPwdChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} spacing={4}>\r\n          <TextField\r\n            id=\"outlined-password-input\"\r\n            label=\"Repeat Password\"\r\n            type=\"password\"\r\n            onChange={onRPwdVerify}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} spacing={4}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color={submitColor}\r\n            onClick={handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Grid>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const ApiUserPasswordTab = () => {\r\n  const conf = useConf();\r\n  const notify = useNotify();\r\n  const record = useRecordContext();\r\n  const dataProvider = useDataProvider();\r\n  const [curPwdValue, setCurPwdValue] = useState(\"\");\r\n  const [newPwdValue, setNewPwdValue] = useState(\"\");\r\n  const [rpwdValue, setRPwdValue] = useState(\"\");\r\n  const [submitColor, setSubmitColor] = useState<\r\n    \"default\" | \"inherit\" | \"secondary\" | \"primary\" | undefined\r\n  >(\"secondary\");\r\n\r\n  const onCurPwdChange = (e: any) => {\r\n    let pwdValue = e.target.value;\r\n    setCurPwdValue(pwdValue);\r\n    setSubmitColor(\r\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\r\n    );\r\n  };\r\n  const onNewPwdChange = (e: any) => {\r\n    let pwdValue = e.target.value;\r\n    setNewPwdValue(pwdValue);\r\n    setSubmitColor(\r\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\r\n    );\r\n  };\r\n  const onRPwdVerify = (e: any) => {\r\n    let rpwdValue = e.target.value;\r\n    setRPwdValue(rpwdValue);\r\n    setSubmitColor(\r\n      newPwdValue === rpwdValue && newPwdValue.length > 5\r\n        ? \"primary\"\r\n        : \"secondary\"\r\n    );\r\n  };\r\n  const handleSubmit = () => {\r\n    // console.log(rpwdValue);\r\n    if (newPwdValue !== rpwdValue) {\r\n      notify(\"Passwords don't match\", { type: \"warning\" });\r\n      return;\r\n    }\r\n    if (newPwdValue.length < 1) {\r\n      notify(\"Password too short\", { type: \"warning\" });\r\n      return;\r\n    }\r\n    const data = {\r\n      password: newPwdValue,\r\n    };\r\n    httpAuthClient(`${conf.api_root}/Users/${record.id}/change_password`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then(() => notify(\"Password Changed!\"))\r\n      .catch(() => notify(`Error Changing Password`, { type: \"warning\" }));\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component=\"form\"\r\n      sx={{\r\n        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\r\n      }}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n    >\r\n      <FormControl>\r\n        <Grid item xs={12} spacing={4} component=\"div\">\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            <b>Current user password</b>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} spacing={4} component=\"div\">\r\n          <TextField\r\n            id=\"outlined-password-input\"\r\n            label=\"Current Password\"\r\n            type=\"password\"\r\n            onChange={onCurPwdChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} spacing={4} component=\"div\">\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            <b>New user password</b>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} spacing={4} component=\"div\">\r\n          <TextField\r\n            id=\"outlined-password-input\"\r\n            label=\"New Password\"\r\n            type=\"password\"\r\n            onChange={onNewPwdChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} spacing={4} component=\"div\">\r\n          <TextField\r\n            id=\"outlined-password-input\"\r\n            label=\"Repeat Password\"\r\n            type=\"password\"\r\n            onChange={onRPwdVerify}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} spacing={4} component=\"div\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color={submitColor}\r\n            onClick={handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Grid>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { Modal, Box, Grid, TextField } from \"@mui/material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport PlayCircleOutlineIcon from \"@mui/icons-material/PlayCircleOutline\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { useConf } from \"../Config\";\r\nimport { Loading, TextInput, useRecordContext, useGetList } from \"react-admin\";\r\nimport { useForm } from \"react-final-form\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\n\r\nconst boxStyle = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"75%\",\r\n  bgcolor: \"background.paper\",\r\n  border: \"0px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n  textAlign: \"left\",\r\n};\r\n\r\nconst modalStyle = {\r\n  position: \"absolute\",\r\n  top: \"10%\",\r\n  left: \"10%\",\r\n  overflow: \"scroll\",\r\n  height: \"100%\",\r\n  fontWeight: 600,\r\n  display: \"flex\",\r\n};\r\n\r\nconst joinedFieldStyle = { cursor: \"pointer\", color: \"#3f51b5\" };\r\n\r\nconst dbBtnStyle = {\r\n  height: \"80%\",\r\n  position: \"relative\",\r\n  top: \"50%\",\r\n  transform: \"translateY(-50%)\",\r\n};\r\n\r\nconst dbGridStyle = {\r\n  \"& .MuiTextField-root\": {\r\n    borderBottom: \"4px solid white\",\r\n    paddingBottom: \"1em\",\r\n    paddingRight: \"1em\",\r\n  },\r\n};\r\n\r\nconst actionsStyle = {\r\n  textAlign: \"center\",\r\n  \"& button\": {\r\n    width: \"99%\",\r\n  },\r\n};\r\n\r\nconst connStrStyle = { backgroundColor: \"#ccc\", fontFamily: \"Consolas\" };\r\n\r\nconst C2Rpc = (url: any, data: any, options: any) => {\r\n  const defaultOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"auth_token\")}`,\r\n    },\r\n    body: JSON.stringify(data || {}),\r\n  };\r\n  const requestOptions = Object.assign(defaultOptions, options || {});\r\n  return fetch(url, requestOptions);\r\n};\r\n\r\nconst ApiModal = (props: any) => {\r\n  const [output, setOutput] = React.useState<JSX.Element | null>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [box_style, setBoxStyle] = React.useState(boxStyle);\r\n\r\n  const conf = useConf();\r\n  const create_api = (record: any) => {\r\n    const create_url = `${conf.api_root}/Apis/${record.id}/generate`;\r\n    setOutput(<Loading />);\r\n    box_style.top = \"90%\";\r\n    setBoxStyle(box_style);\r\n    C2Rpc(create_url, {}, {})\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setOutput(<pre>{data}</pre>);\r\n      });\r\n  };\r\n\r\n  const handleOpen = (e: any) => {\r\n    setOpen(true);\r\n    e.stopPropagation();\r\n  };\r\n  const handleClose = (e: any) => {\r\n    e.stopPropagation();\r\n    setOpen(false);\r\n  };\r\n  const record = props.record;\r\n\r\n  return (\r\n    <span>\r\n      <span\r\n        onClick={handleOpen}\r\n        style={joinedFieldStyle}\r\n        title={` Relationship`}\r\n      >\r\n        <PlayCircleOutlineIcon />\r\n      </span>\r\n      <Modal\r\n        sx={modalStyle}\r\n        open={open}\r\n        onClose={handleClose}\r\n        onClick={(e) => e.stopPropagation()}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={box_style}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Create API\r\n          </Typography>\r\n          Pressing the button will generate an API with the following\r\n          properties:\r\n          <dl>\r\n            <dt>Name:</dt>\r\n            <dd>{record?.name}</dd>\r\n            <dt>Database URL:</dt>\r\n            <dd>{record?.connection_string}</dd>\r\n            <dt>Port:</dt>\r\n            <dd>{record?.port}</dd>\r\n            <dt>Hostname:</dt>\r\n            <dd>{record?.hostname}</dd>\r\n          </dl>\r\n          <Button variant=\"outlined\" onClick={() => create_api(record)}>\r\n            {\" \"}\r\n            Start <PlayCircleOutlineIcon />{\" \"}\r\n          </Button>\r\n          <hr />\r\n          {output}\r\n        </Box>\r\n      </Modal>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport const ApiGenerateField = (props: any) => {\r\n  if (props.mode === \"list\") {\r\n    return <ApiModal {...props} />;\r\n  }\r\n  return <></>;\r\n};\r\n\r\nexport const ApiShow = (props: any) => {\r\n  return (\r\n    <>\r\n      <div>xxxx</div>\r\n      <ApiModal />\r\n      {props.show}\r\n    </>\r\n  );\r\n};\r\n\r\nconst DBConnectionEdit = (props: any) => {\r\n  const form = useForm();\r\n  const record = useRecordContext();\r\n  let value = record ? record[\"connection_string\"] : \"\";\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  const [box_style] = React.useState(boxStyle);\r\n  const [other, setOther] = React.useState(value);\r\n  const [username, setUsername] = React.useState(\"user\");\r\n  const [password, setPassword] = React.useState(\"pass\");\r\n  const [dbhost, setDbhost] = React.useState(\"dbhost\");\r\n  const [dbname, setDbname] = React.useState(\"dbname\");\r\n  const [dialect, setDialect] = React.useState(\"Other\");\r\n  const [logdata, setLogData] = React.useState<React.ReactNode>(null);\r\n  const conf = useConf();\r\n\r\n  const selectDialect = (e: any) => {\r\n    const dialect = e.target.value;\r\n    setDialect(dialect);\r\n    if (dialect === \"sqlite\") {\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n      setDbhost(\"\");\r\n    }\r\n  };\r\n\r\n  const create_conn = () => {\r\n    let result = `${dialect}://`;\r\n    if (dialect === \"Other\") {\r\n      result = other;\r\n    } else if (dialect === \"sqlite\") {\r\n      result += `/${dbname}`;\r\n    } else {\r\n      result += `${username}:${password}@${dbhost}/${dbname}`;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const test_conn = (connection_string: any) => {\r\n    const create_url = `${conf.api_root}/Apis/test_conn`;\r\n    const req_data = { connection_string: connection_string };\r\n    C2Rpc(create_url, req_data, {})\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLogData(\r\n          <>\r\n            <Typography variant=\"h6\" component=\"h2\">\r\n              Result:\r\n            </Typography>\r\n            <pre>{data}</pre>\r\n          </>\r\n        );\r\n      })\r\n      .catch((err) => alert());\r\n  };\r\n\r\n  const create_api = () => {\r\n    if (record.id === undefined) {\r\n      const msg = \"you must first save the api\";\r\n      alert(msg);\r\n      setLogData(msg);\r\n      return;\r\n    }\r\n    const create_url = `${conf.api_root}/Apis/${record.id}/generate`;\r\n    setLogData(<Loading />);\r\n    box_style.top = \"90%\";\r\n    C2Rpc(create_url, {}, {})\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLogData(<pre>{data}</pre>);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid item xs={12} spacing={4}></Grid>\r\n      <Grid item xs={4} spacing={4}>\r\n        <TextInput\r\n          source={\"connection_string\"}\r\n          defaultValue={create_conn()}\r\n          helperText=\"SQLAlchemy connection string syntax\"\r\n          fullWidth\r\n        />\r\n      </Grid>\r\n      <Grid item xs={4} spacing={4}>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={handleOpen}\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          sx={dbBtnStyle}\r\n        >\r\n          Configure Connection\r\n        </Button>\r\n      </Grid>\r\n      <Grid item xs={12} spacing={4}></Grid>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        sx={modalStyle}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={box_style}>\r\n          <Grid container sx={dbGridStyle}>\r\n            <Grid item xs={12} spacing={4}>\r\n              <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                Database Configuration\r\n              </Typography>\r\n              <hr />\r\n            </Grid>\r\n            <Grid item xs={6} spacing={4}>\r\n              <FormControl>\r\n                <FormLabel id=\"demo-radio-buttons-group-label\">\r\n                  DB Dialect\r\n                </FormLabel>\r\n                <RadioGroup\r\n                  aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                  defaultValue=\"Other\"\r\n                  name=\"radio-buttons-group\"\r\n                  onChange={selectDialect}\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"mysql+pymysql\"\r\n                    control={<Radio />}\r\n                    label=\"MySQL\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"oracle\"\r\n                    control={<Radio />}\r\n                    label=\"Oracle\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"postgresql\"\r\n                    control={<Radio />}\r\n                    label=\"Postgres\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"sqlite\"\r\n                    control={<Radio />}\r\n                    label=\"SQLite\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"mssql+pyodbc\"\r\n                    control={<Radio />}\r\n                    label=\"SQLServer\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"Other\"\r\n                    control={<Radio />}\r\n                    label=\"Manual:\"\r\n                  />\r\n                </RadioGroup>\r\n                <TextField\r\n                  id=\"outlined-basic\"\r\n                  label=\"Manual\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  value={other}\r\n                  onChange={(e) => setOther(e.target.value)}\r\n                  helperText=\"Manual connection string configuration\"\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} spacing={4}>\r\n              <TextField\r\n                label=\"Username\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                value={username}\r\n              />\r\n              <TextField\r\n                label=\"Password\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                value={password}\r\n              />\r\n              <TextField\r\n                label=\"Database host\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => setDbhost(e.target.value)}\r\n                value={dbhost}\r\n              />\r\n              <TextField\r\n                label=\"Database name\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => setDbname(e.target.value)}\r\n                value={dbname}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} spacing={4}>\r\n              <Typography>\r\n                Connection String:{\" \"}\r\n                <span style={connStrStyle}>{create_conn()}</span>\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} sx={actionsStyle}>\r\n              <hr />\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} />\r\n            <Grid item xs={2} spacing={4} sx={actionsStyle}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => test_conn(create_conn())}\r\n              >\r\n                {\" \"}\r\n                Test Connection\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={2} spacing={4} sx={actionsStyle}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  setOpen(false);\r\n                  form.change(\"connection_string\", create_conn());\r\n                }}\r\n              >\r\n                Save &amp; Close\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={2} spacing={4} sx={actionsStyle}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => create_api()}\r\n                disabled={record.id ? false : true}\r\n                title={record.id ? \"\" : \"you must first save the api\"}\r\n              >\r\n                Generate API\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={2} spacing={4} sx={actionsStyle}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => setOpen(false)}\r\n              >\r\n                Close\r\n              </Button>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} spacing={4} className={classes.logdata}>\r\n              {logdata}\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const DBConnection = (props: any) => {\r\n  console.log(\"props: \", props);\r\n  const record = useRecordContext();\r\n  let value = record ? record[\"connection_string\"] : \"\";\r\n\r\n  if (props.mode !== \"edit\" && props.mode !== \"create\") {\r\n    return <Typography>{value}</Typography>;\r\n  }\r\n  return <DBConnectionEdit {...props} />;\r\n};\r\n\r\nconst api_url = (props: any) => {\r\n  const url = `/${props.name}/api`;\r\n  return (\r\n    <Typography>\r\n      <a href={url}>{url}</a>\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport const ApiURL = () => {\r\n  const record = useRecordContext();\r\n  if (!record.id) {\r\n    return null;\r\n  }\r\n  return api_url(record);\r\n};\r\n\r\nexport const ApiAdminHome = () => {\r\n  const { data } = useGetList(\"Apis\", {\r\n    pagination: { page: 0, perPage: 100 },\r\n  });\r\n\r\n  const apis = data?.map((api) => <li>{api_url(api)}</li>);\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" component=\"h2\">\r\n        {\" \"}\r\n        APIs\r\n      </Typography>\r\n      <Typography>\r\n        <ul>{apis}</ul>\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\n\r\nexport const MyComp = (props: any) => {\r\n  return <div>HMMMM</div>;\r\n};\r\n","import Grid from \"@mui/material/Grid\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { TextField, PasswordInput } from \"react-admin\";\r\nimport * as React from \"react\";\r\nimport { useRecordContext } from \"react-admin\";\r\nexport * from \"./external/UserPasswordTab\";\r\nexport * from \"./ApiAdmin\";\r\nexport * from \"./external\";\r\n\r\nexport const SampleColumnField = ({ attribute }: { attribute: any }) => {\r\n  console.log(\"attribute: \", attribute);\r\n  return (\r\n    <TextField\r\n      source={attribute.name}\r\n      key={attribute.name}\r\n      style={{ color: \"red\" }}\r\n    />\r\n  );\r\n};\r\n\r\nexport const EmployeeLabel = (props: any) => {\r\n  const employee = props.instance;\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      {employee.attributes?.FirstName} {employee.attributes?.LastName}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CustomerLabel = (props: any) => {\r\n  const customer = props.instance;\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <b>{customer.attributes?.CompanyName}</b>{\" \"}\r\n      <i>{customer.attributes?.ContactName}</i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const UserPasswordField = (props: any) => {\r\n  if (props.mode === \"list\") {\r\n    return <span />;\r\n  }\r\n  if (props.mode === \"edit\") {\r\n    return (\r\n      <>\r\n        <Grid item xs={12} spacing={4}>\r\n          <Typography variant=\"h6\" component=\"h6\">\r\n            Change Password\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={4} spacing={4}>\r\n          <PasswordInput source=\"_password\" />{\" \"}\r\n        </Grid>\r\n        <Grid item xs={4} spacing={4}>\r\n          <PasswordInput source=\"_password\" />{\" \"}\r\n        </Grid>\r\n        <Grid item xs={4} spacing={4}></Grid>\r\n      </>\r\n    );\r\n  }\r\n  return <></>;\r\n};\r\n\r\nexport const CustomTab = (props: any) => {\r\n  // eslint-disable-next-line no-unused-vars\r\n  const record = useRecordContext();\r\n  return <div>Some Text</div>;\r\n};\r\n"],"names":["UserPasswordTab","conf","useConf","notify","useNotify","record","useRecordContext","pwdValue","setPwdValue","useDataProvider","useState","rpwdValue","setRPwdValue","submitColor","setSubmitColor","_jsx","Box","component","sx","m","width","noValidate","autoComplete","children","_jsxs","FormControl","Grid","item","xs","spacing","Typography","variant","TextField","id","label","type","onChange","e","target","value","length","Button","color","onClick","handleSubmit","data","password","httpAuthClient","concat","api_root","method","body","JSON","stringify","then","catch","ApiUserPasswordTab","curPwdValue","setCurPwdValue","newPwdValue","setNewPwdValue","boxStyle","position","top","left","transform","bgcolor","border","boxShadow","p","textAlign","modalStyle","overflow","height","fontWeight","display","joinedFieldStyle","cursor","dbBtnStyle","dbGridStyle","borderBottom","paddingBottom","paddingRight","actionsStyle","connStrStyle","backgroundColor","fontFamily","C2Rpc","url","options","defaultOptions","headers","Authorization","localStorage","getItem","requestOptions","Object","assign","fetch","ApiModal","props","output","setOutput","React","open","setOpen","box_style","setBoxStyle","stopPropagation","style","title","PlayCircleOutlineIcon","Modal","onClose","name","connection_string","port","hostname","create_url","Loading","response","json","create_api","ApiGenerateField","mode","_Fragment","ApiShow","show","DBConnectionEdit","form","useForm","other","setOther","username","setUsername","setPassword","dbhost","setDbhost","dbname","setDbname","dialect","setDialect","logdata","setLogData","create_conn","result","TextInput","source","defaultValue","helperText","fullWidth","handleOpen","size","handleClose","container","FormLabel","RadioGroup","FormControlLabel","control","Radio","err","alert","test_conn","change","undefined","msg","disabled","className","classes","DBConnection","console","log","api_url","href","ApiURL","ApiAdminHome","useGetList","pagination","page","perPage","apis","map","api","MyComp","SampleColumnField","_ref","attribute","EmployeeLabel","_employee$attributes","_employee$attributes2","employee","instance","attributes","FirstName","LastName","CustomerLabel","_customer$attributes","_customer$attributes2","customer","CompanyName","ContactName","UserPasswordField","PasswordInput","CustomTab"],"sourceRoot":""}