[metadata]
name = cyc_pep_perm
version = 0.1.2
description = Python package to predict membrane permeability of cyclic peptides.
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/schwallergroup/CycPepPerm
download_url = https://github.com/schwallergroup/CycPepPerm/releases
project_urls = 
	Tracker = https://github.com/schwallergroup/CycPepPerm/issues
	Source = https://github.com/schwallergroup/CycPepPerm
	Documentation = https://cyc_pep_perm.readthedocs.io
author = Rebecca M Neeser
author_email = rebecca.neeser@epfl.ch
maintainer = Rebecca M Neeser
maintainer_email = rebecca.neeser@epfl.ch
license = MIT
license_files = 
	LICENSE
classifiers = 
	Development Status :: 1 - Planning
	Environment :: Console
	Intended Audience :: Developers
	License :: OSI Approved :: MIT License
	Operating System :: OS Independent
	Framework :: Pytest
	Framework :: tox
	Framework :: Sphinx
	Programming Language :: Python
	Programming Language :: Python :: 3.8
	Programming Language :: Python :: 3 :: Only
	Topic :: Scientific/Engineering :: Chemistry
	Topic :: Scientific/Engineering :: Artificial Intelligence
	Topic :: Scientific/Engineering :: Physics
keywords = 
	snekpack
	cookiecutter
	chemistry
	ai
	ml
	deep-learning

[options]
install_requires = 
	tox
	more_itertools
	tqdm
	click
	more_click
	pandas
	numpy
	scikit-learn==1.0.2
	mordred
	rdkit
	pandas_ods_reader
	xgboost
	shap
	matplotlib
zip_safe = false
include_package_data = True
python_requires = >=3.8
packages = find:
package_dir = 
	= src

[options.packages.find]
where = src

[options.extras_require]
tests = 
	pytest
	coverage
docs = 
	sphinx
	sphinx-rtd-theme
	sphinx-click
	sphinx_automodapi

[options.entry_points]
console_scripts = 
	cyc_pep_perm = cyc_pep_perm.cli:main

[doc8]
max-line-length = 120

[coverage:run]
branch = True
source = cyc_pep_perm
omit = 
	tests/*
	docs/*
	data/*

[coverage:paths]
source = 
	src/cyc_pep_perm
	.tox/*/lib/python*/site-packages/cyc_pep_perm

[coverage:report]
show_missing = True
exclude_lines = 
	pragma: no cover
	raise NotImplementedError
	if __name__ == "__main__":
	if TYPE_CHECKING:
	def __str__
	def __repr__

[darglint]
docstring_style = sphinx
strictness = short

[egg_info]
tag_build = 
tag_date = 0

