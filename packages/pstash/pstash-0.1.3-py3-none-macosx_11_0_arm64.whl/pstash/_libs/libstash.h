/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "export.go"

#include "cfunc.h"
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// stash_setLogLevel sets the log level for the stash library. Possible values are: trace, debug, info, warn, error, fatal, panic.
//
extern Result stash_setLogLevel(char* level);
extern Result stash_test(char* nick);

// stash_newIdentity creates a new identity with the specified nick. An identity is a key pair used for encryption and signing, and a nick name for human readable identification.
// An identity is made of two fields ID and Private. ID is a concatenation of the nick name and the public key of the key pair. Private is the private key of the key pair.
//
extern Result stash_newIdentity(char* nick);

// stash_nick returns the nick name of the specified identity.
//
extern Result stash_nick(char* identity);

// stash_castID casts the specified string to an Identity ID.
//
extern Result stash_castID(char* id);
extern Result stash_decodeKeys(char* id);

// stash_openDB opens a new database connection to the specified URL.Stash library requires a database connection to store safe and file system data. The function returns a handle to the database connection.
//
extern Result stash_openDB(char* url);

// stash_closeDB closes the specified database connection.
//
extern Result stash_closeDB(unsigned long long dbH);

// stash_createStash creates a new safe with the specified identity, URL and configuration. A safe is a secure storage for keys and files. The function returns a handle to the stash.
//
extern Result stash_createStash(unsigned long long dbH, char* identity, char* url, char* config);

// stash_openStash opens an existing safe with the specified identity and URL. The function returns a handle to the stash.
//
extern Result stash_openStash(unsigned long long dbH, char* identity, char* url);

// stash_closeStash closes the specified stash.
//
extern Result stash_closeStash(unsigned long long safeH);

// stash_createGroup applies the specified change to the specified group. The change can be add, remove or update users identified by their IDs.
// The function returns all the groups in the safe after the change.
//
extern Result stash_updateGroup(unsigned long long safeH, char* groupName, long change, char* users);

// stash_getGroups returns all the groups in the specified stash. It is a map of group names to a list of identity IDs.
//
extern Result stash_getGroups(unsigned long long safeH);

// stash_getKeys returns all the keys in the specified group. The function returns a list of keys sorted by their creation time.
//
extern Result stash_getKeys(unsigned long long safeH, char* groupName, long expectedMinimumLenght);

// stash_openFS opens a file system in the specified stash. The function returns a handle to the file system.
//
extern Result stash_openFS(unsigned long long safeH);

// stash_closeFS closes the specified file system.
//
extern Result stash_closeFS(unsigned long long fsH);

// stash_list returns a list of files in the specified path in the file system. The function returns a list of file information.
//
extern Result stash_list(unsigned long long fsH, char* path, char* options);

// stash_stat returns the information of the specified file in the file system. The function returns the file information.
//
extern Result stash_stat(unsigned long long fsH, char* path);

// stash_putFile puts the specified file in the local filesystem to the specified path in the file system. The function returns the file information.
//
extern Result stash_putFile(unsigned long long fsH, char* dest, char* src, char* options);

// stash_putData puts the specified data to the specified path in the file system. The function returns the file information.
//
extern Result stash_putData(unsigned long long fsH, char* dest, Data data, char* options);

// stash_getFile gets the specified file in the file system and saves it to the specified destination in the local filesystem. The function returns the file information.
//
extern Result stash_getFile(unsigned long long fsH, char* src, char* dest, char* options);

// stash_getData gets the specified data in the file system. The function returns the data.
//
extern Result stash_getData(unsigned long long fsH, char* src, char* options);

// stash_delete deletes the specified file in the file system.
//
extern Result stash_delete(unsigned long long fsH, char* path);

// stash_rename renames the specified file in the file system.
//
extern Result stash_rename(unsigned long long fsH, char* oldPath, char* newPath);

// stash_openDatabase opens a new database connection to the specified safe using the specified group name and DDLs. The group name defines the users that can access the database.
// The DDLs is a map of version to DDL. The DDL is a string that defines the database schema and should use conditional statements to create or update tables.
// The function returns a handle to the database connection.
//
extern Result stash_openDatabase(unsigned long long safeH, char* groupName, char* ddls);

// stash_closeDatabase closes the specified database connection.
//
extern Result stash_closeDatabase(unsigned long long dbH);

// stash_exec executes the specified SQL statement with the specified arguments in the database. The function returns the number of rows affected.
//
extern Result stash_exec(unsigned long long dbH, char* query, char* args);

// stash_query executes the specified SQL query with the specified arguments in the database. The function returns a handle to the result set.
//
extern Result stash_query(unsigned long long dbH, char* key, char* args);

// stash_nextRow returns the next row in the result set. The function returns the values of the row as a list.
//
extern Result stash_nextRow(unsigned long long rowsH);

// stash_closeRows closes the specified result set.
//
extern Result stash_closeRows(unsigned long long rowsH);

// stash_sync synchronizes the database with the stash. The function returns the number of updates.
//
extern Result stash_sync(unsigned long long dbH);

// stash_cancel cancels the current database operation
//
extern Result stash_cancel(unsigned long long dbH);

// stash_openComm opens a point to point communication channel for the specified stash.
//
extern Result stash_openComm(unsigned long long safeH);

// stash_rewind rewinds the communication channel to the specified message ID. When calling receive, only messages with a higher ID will be received.
//
extern Result stash_rewind(unsigned long long commH, char* dest, unsigned long long messageID);

// stash_send sends a message to the specified user.
//
extern Result stash_send(unsigned long long commH, char* userId, char* message);

// stash_broadcast broadcasts a message to the specified group.
//
extern Result stash_broadcast(unsigned long long commH, char* groupName, char* message);

// stash_receive receives messages from the communication channel that match the specified filter. Filter is either a user ID or a group name.
// When filter is empty, all messages are received.
//
extern Result stash_receive(unsigned long long commH, char* filter);

// stash_download downloads a file attached to a message to the specified destination in the local filesystem.
//
extern Result stash_download(unsigned long long commH, char* message, char* dest);

#ifdef __cplusplus
}
#endif
