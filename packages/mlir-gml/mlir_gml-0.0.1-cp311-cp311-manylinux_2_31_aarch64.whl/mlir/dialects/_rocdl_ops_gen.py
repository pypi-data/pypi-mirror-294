
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_result_or_value as _get_op_result_or_value,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "rocdl"

@_ods_cext.register_operation(_Dialect)
class BallotOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ballot"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, pred, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(pred))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def pred(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ballot(res, pred, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BallotOp(res=res, pred=pred, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

def barrier(*, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(BarrierOp(loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BlockDimXOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.dim.x"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_dim_x(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BlockDimXOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BlockDimYOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.dim.y"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_dim_y(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BlockDimYOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BlockDimZOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.dim.z"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_dim_z(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BlockDimZOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BlockIdXOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.id.x"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_id_x(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BlockIdXOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BlockIdYOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.id.y"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_id_y(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BlockIdYOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BlockIdZOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.id.z"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_id_z(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BlockIdZOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CvtF32Bf8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.f32.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(srcA))
    operands.append(_get_op_result_or_value(byteSel))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_f32_bf8(res, src_a, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CvtF32Bf8Op(res=res, srcA=src_a, byteSel=byte_sel, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CvtF32Fp8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.f32.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(srcA))
    operands.append(_get_op_result_or_value(byteSel))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_f32_fp8(res, src_a, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CvtF32Fp8Op(res=res, srcA=src_a, byteSel=byte_sel, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CvtPkBf8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.pk.bf8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, old, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(srcA))
    operands.append(_get_op_result_or_value(srcB))
    operands.append(_get_op_result_or_value(old))
    operands.append(_get_op_result_or_value(wordSel))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def old(self):
    return self.operation.operands[2]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_pk_bf8_f32(res, src_a, src_b, old, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CvtPkBf8F32Op(res=res, srcA=src_a, srcB=src_b, old=old, wordSel=word_sel, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CvtPkFp8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.pk.fp8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, old, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(srcA))
    operands.append(_get_op_result_or_value(srcB))
    operands.append(_get_op_result_or_value(old))
    operands.append(_get_op_result_or_value(wordSel))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def old(self):
    return self.operation.operands[2]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_pk_fp8_f32(res, src_a, src_b, old, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CvtPkFp8F32Op(res=res, srcA=src_a, srcB=src_b, old=old, wordSel=word_sel, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CvtSrBf8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.sr.bf8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, old, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(srcA))
    operands.append(_get_op_result_or_value(srcB))
    operands.append(_get_op_result_or_value(old))
    operands.append(_get_op_result_or_value(byteSel))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def old(self):
    return self.operation.operands[2]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_sr_bf8_f32(res, src_a, src_b, old, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CvtSrBf8F32Op(res=res, srcA=src_a, srcB=src_b, old=old, byteSel=byte_sel, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CvtSrFp8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.sr.fp8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, old, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(srcA))
    operands.append(_get_op_result_or_value(srcB))
    operands.append(_get_op_result_or_value(old))
    operands.append(_get_op_result_or_value(byteSel))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def old(self):
    return self.operation.operands[2]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_sr_fp8_f32(res, src_a, src_b, old, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CvtSrFp8F32Op(res=res, srcA=src_a, srcB=src_b, old=old, byteSel=byte_sel, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class DsBpermuteOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ds_bpermute"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, index, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(index))
    operands.append(_get_op_result_or_value(src))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def index(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ds_bpermute(res, index, src, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(DsBpermuteOp(res=res, index=index, src=src, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class DsSwizzleOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ds_swizzle"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(offset))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def offset(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ds_swizzle(res, src, offset, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(DsSwizzleOp(res=res, src=src, offset=offset, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class GridDimXOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.grid.dim.x"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def grid_dim_x(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(GridDimXOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class GridDimYOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.grid.dim.y"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def grid_dim_y(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(GridDimYOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class GridDimZOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.grid.dim.z"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def grid_dim_z(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(GridDimZOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class MakeBufferRsrcOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.make.buffer.rsrc"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, base, stride, numRecords, flags, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(base))
    operands.append(_get_op_result_or_value(stride))
    operands.append(_get_op_result_or_value(numRecords))
    operands.append(_get_op_result_or_value(flags))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def base(self):
    return self.operation.operands[0]

  @builtins.property
  def stride(self):
    return self.operation.operands[1]

  @builtins.property
  def numRecords(self):
    return self.operation.operands[2]

  @builtins.property
  def flags(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def make_buffer_rsrc(res, base, stride, num_records, flags, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(MakeBufferRsrcOp(res=res, base=base, stride=stride, numRecords=num_records, flags=flags, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class MbcntHiOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mbcnt.hi"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, in0, in1, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(in0))
    operands.append(_get_op_result_or_value(in1))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def in0(self):
    return self.operation.operands[0]

  @builtins.property
  def in1(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mbcnt_hi(res, in0, in1, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(MbcntHiOp(res=res, in0=in0, in1=in1, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class MbcntLoOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mbcnt.lo"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, in0, in1, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(in0))
    operands.append(_get_op_result_or_value(in1))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def in0(self):
    return self.operation.operands[0]

  @builtins.property
  def in1(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mbcnt_lo(res, in0, in1, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(MbcntLoOp(res=res, in0=in0, in1=in1, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class MubufLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.buffer.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, rsrc, vindex, offset, glc, slc, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(vindex))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(glc))
    operands.append(_get_op_result_or_value(slc))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rsrc(self):
    return self.operation.operands[0]

  @builtins.property
  def vindex(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def glc(self):
    return self.operation.operands[3]

  @builtins.property
  def slc(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def buffer_load(res, rsrc, vindex, offset, glc, slc, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(MubufLoadOp(res=res, rsrc=rsrc, vindex=vindex, offset=offset, glc=glc, slc=slc, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class MubufStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.buffer.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, vindex, offset, glc, slc, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(vindex))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(glc))
    operands.append(_get_op_result_or_value(slc))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def vindex(self):
    return self.operation.operands[2]

  @builtins.property
  def offset(self):
    return self.operation.operands[3]

  @builtins.property
  def glc(self):
    return self.operation.operands[4]

  @builtins.property
  def slc(self):
    return self.operation.operands[5]

def buffer_store(vdata, rsrc, vindex, offset, glc, slc, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(MubufStoreOp(vdata=vdata, rsrc=rsrc, vindex=vindex, offset=offset, glc=glc, slc=slc, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicCmpSwap(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.cmpswap"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, cmp, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(cmp))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def cmp(self):
    return self.operation.operands[1]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[2]

  @builtins.property
  def offset(self):
    return self.operation.operands[3]

  @builtins.property
  def soffset(self):
    return self.operation.operands[4]

  @builtins.property
  def aux(self):
    return self.operation.operands[5]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def raw_buffer_atomic_cmpswap(res, src, cmp, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(RawBufferAtomicCmpSwap(res=res, src=src, cmp=cmp, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicFAddOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.fadd"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_atomic_fadd(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawBufferAtomicFAddOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicFMaxOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.fmax"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_atomic_fmax(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawBufferAtomicFMaxOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicSMaxOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.smax"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_atomic_smax(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawBufferAtomicSMaxOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicUMinOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.umin"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_atomic_umin(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawBufferAtomicUMinOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawBufferLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rsrc(self):
    return self.operation.operands[0]

  @builtins.property
  def offset(self):
    return self.operation.operands[1]

  @builtins.property
  def soffset(self):
    return self.operation.operands[2]

  @builtins.property
  def aux(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def raw_buffer_load(res, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(RawBufferLoadOp(res=res, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawBufferStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_store(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawBufferStoreOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicCmpSwap(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.cmpswap"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, cmp, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(src))
    operands.append(_get_op_result_or_value(cmp))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def cmp(self):
    return self.operation.operands[1]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[2]

  @builtins.property
  def offset(self):
    return self.operation.operands[3]

  @builtins.property
  def soffset(self):
    return self.operation.operands[4]

  @builtins.property
  def aux(self):
    return self.operation.operands[5]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def raw_ptr_buffer_atomic_cmpswap(res, src, cmp, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(RawPtrBufferAtomicCmpSwap(res=res, src=src, cmp=cmp, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicFaddOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.fadd"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_atomic_fadd(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawPtrBufferAtomicFaddOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicFmaxOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.fmax"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_atomic_fmax(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawPtrBufferAtomicFmaxOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicSmaxOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.smax"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_atomic_smax(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawPtrBufferAtomicSmaxOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicUminOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.umin"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_atomic_umin(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawPtrBufferAtomicUminOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rsrc(self):
    return self.operation.operands[0]

  @builtins.property
  def offset(self):
    return self.operation.operands[1]

  @builtins.property
  def soffset(self):
    return self.operation.operands[2]

  @builtins.property
  def aux(self):
    return self.operation.operands[3]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def raw_ptr_buffer_load(res, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(RawPtrBufferLoadOp(res=res, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(vdata))
    operands.append(_get_op_result_or_value(rsrc))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(soffset))
    operands.append(_get_op_result_or_value(aux))
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_store(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(RawPtrBufferStoreOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SBarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.s.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

def s_barrier(*, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(SBarrierOp(loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SchedBarrier(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.sched.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, mask, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["mask"] = (mask if (
    isinstance(mask, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(mask, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def mask(self):
    return self.operation.attributes["mask"]

  @mask.setter
  def mask(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mask"] = value

def sched_barrier(mask, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(SchedBarrier(mask=mask, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SetPrioOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.s.setprio"

  _ODS_REGIONS = (0, True)

  def __init__(self, priority, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["priority"] = (priority if (
    isinstance(priority, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I16Attr')) else
      _ods_ir.AttrBuilder.get('I16Attr')(priority, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def priority(self):
    return self.operation.attributes["priority"]

  @priority.setter
  def priority(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["priority"] = value

def s_setprio(priority, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(SetPrioOp(priority=priority, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ThreadIdXOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workitem.id.x"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workitem_id_x(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ThreadIdXOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ThreadIdYOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workitem.id.y"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workitem_id_y(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ThreadIdYOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ThreadIdZOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workitem.id.z"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workitem_id_z(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ThreadIdZOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class WaitcntOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.waitcnt"

  _ODS_REGIONS = (0, True)

  def __init__(self, bitfield, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["bitfield"] = (bitfield if (
    isinstance(bitfield, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(bitfield, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def bitfield(self):
    return self.operation.attributes["bitfield"]

  @bitfield.setter
  def bitfield(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["bitfield"] = value

def waitcnt(bitfield, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(WaitcntOp(bitfield=bitfield, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_4x4x1f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.4x4x1f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_4x4x1f32(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_4x4x1f32(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_4x4x2bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.4x4x2bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_4x4x2bf16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_4x4x2bf16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_4x4x4bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.4x4x4bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_4x4x4bf16_1k(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_4x4x4bf16_1k(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_4x4x4f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.4x4x4f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_4x4x4f16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_4x4x4f16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x1f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x1f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x1f32(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x1f32(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x2bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x2bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x2bf16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x2bf16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x4bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x4bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x4bf16_1k(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x4bf16_1k(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x4f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x4f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x4f16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x4f16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x4f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x4f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x4f32(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x4f32(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x8_xf32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x8.xf32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x8_xf32(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x8_xf32(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x8bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x8bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x8bf16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x8bf16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x16bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x16bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x16bf16_1k(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x16bf16_1k(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x16f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x16f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x16f16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x16f16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_bf8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.bf8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_bf8_bf8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x32_bf8_bf8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_bf8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.bf8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_bf8_fp8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x32_bf8_fp8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_fp8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.fp8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_fp8_bf8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x32_fp8_bf8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_fp8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.fp8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_fp8_fp8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_16x16x32_fp8_fp8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x1f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x1f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x1f32(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x1f32(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x2bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x2bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x2bf16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x2bf16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x2f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x2f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x2f32(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x2f32(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x4_xf32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x4.xf32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x4_xf32(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x4_xf32(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x4bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x4bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x4bf16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x4bf16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x4bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x4bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x4bf16_1k(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x4bf16_1k(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x4f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x4f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x4f16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x4f16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x8bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x8bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x8bf16_1k(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x8bf16_1k(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x8f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x8f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x8f16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x8f16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_bf8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.bf8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_bf8_bf8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x16_bf8_bf8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_bf8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.bf8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_bf8_fp8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x16_bf8_fp8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_fp8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.fp8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_fp8_bf8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x16_fp8_bf8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_fp8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.fp8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_fp8_fp8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f32_32x32x16_fp8_fp8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f64_4x4x4f64(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f64.4x4x4f64"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f64_4x4x4f64(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f64_4x4x4f64(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_f64_16x16x4f64(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f64.16x16x4f64"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f64_16x16x4f64(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_f64_16x16x4f64(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_i32_4x4x4i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.4x4x4i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_4x4x4i8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_i32_4x4x4i8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_i32_16x16x4i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.16x16x4i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_16x16x4i8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_i32_16x16x4i8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_i32_16x16x16i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.16x16x16i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_16x16x16i8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_i32_16x16x16i8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_i32_16x16x32_i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.16x16x32.i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_16x16x32_i8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_i32_16x16x32_i8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_i32_32x32x4i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.32x32x4i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_32x32x4i8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_i32_32x32x4i8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_i32_32x32x8i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.32x32x8i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_32x32x8i8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_i32_32x32x8i8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class mfma_i32_32x32x16_i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.32x32x16.i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_32x32x16_i8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(mfma_i32_32x32x16_i8(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class wmma_bf16_16x16x16_bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.bf16.16x16x16.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_bf16_16x16x16_bf16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(wmma_bf16_16x16x16_bf16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class wmma_f16_16x16x16_f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f16.16x16x16.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f16_16x16x16_f16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(wmma_f16_16x16x16_f16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class wmma_f32_16x16x16_bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f32.16x16x16.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f32_16x16x16_bf16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(wmma_f32_16x16x16_bf16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class wmma_f32_16x16x16_f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f32.16x16x16.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f32_16x16x16_f16(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(wmma_f32_16x16x16_f16(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class wmma_i32_16x16x16_iu4(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.i32.16x16x16.iu4"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_i32_16x16x16_iu4(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(wmma_i32_16x16x16_iu4(res=res, args=args, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class wmma_i32_16x16x16_iu8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.i32.16x16x16.iu8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_i32_16x16x16_iu8(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(wmma_i32_16x16x16_iu8(res=res, args=args, loc=loc, ip=ip))
