
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class MFMAPermB(IntEnum):
    """The possible permutations of the lanes storing B available in an MFMA"""

    none = 0
    bcast_first_32 = 1
    bcast_second_32 = 2
    rotate_16_right = 3
    bcast_first_16 = 4
    bcast_second_16 = 5
    bcast_third_16 = 6
    bcast_fourth_16 = 7

    def __str__(self):
        if self is MFMAPermB.none:
            return "none"
        if self is MFMAPermB.bcast_first_32:
            return "bcast_first_32"
        if self is MFMAPermB.bcast_second_32:
            return "bcast_second_32"
        if self is MFMAPermB.rotate_16_right:
            return "rotate_16_right"
        if self is MFMAPermB.bcast_first_16:
            return "bcast_first_16"
        if self is MFMAPermB.bcast_second_16:
            return "bcast_second_16"
        if self is MFMAPermB.bcast_third_16:
            return "bcast_third_16"
        if self is MFMAPermB.bcast_fourth_16:
            return "bcast_fourth_16"
        raise ValueError("Unknown MFMAPermB enum entry.")



@register_attribute_builder("AMDGPU_MFMAPermB")
def _amdgpu_mfmapermb(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

@register_attribute_builder("AMDGPU_MFMAPermBAttr")
def _amdgpu_mfmapermbattr(x, context):
    return _ods_ir.Attribute.parse(f'#amdgpu<mfma_perm_b {str(x)}>', context=context)

