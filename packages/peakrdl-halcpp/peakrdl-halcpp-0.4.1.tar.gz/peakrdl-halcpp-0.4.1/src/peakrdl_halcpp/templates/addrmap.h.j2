{# Get the header for the generate file (e.g, date and time of generation, by whom) #}
{{ halutils.generate_file_header() }}

{#- Add the header guards #}
#ifndef __{{ halnode.orig_type_name_hal|upper }}_H_
#define __{{ halnode.orig_type_name_hal|upper }}_H_

#include <stdint.h>
#include "include/halcpp_base.h"

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wundefined-var-template"
#endif

{# Include the child addrmap nodes #}
{% for child_addrmap in halnode.halchildren(children_type=HalAddrmapNode, skip_buses=skip_buses, unique_orig_type=True) %}
#include "{{ halutils.get_include_file(child_addrmap) }}"
{% endfor -%}

{#- Don't create a namespace if it is empty -#}
{% if not halnode.is_bus %}
namespace {{ halnode.orig_type_name }}_nm
{
    {#- Enum with same name are not duplicated -#}
    {%- set seen_enum_names = [] -%}

    {# ======== 1. Generate the registers ======== #}
    {% for r in halnode.halchildren(children_type=HalRegNode, skip_buses=skip_buses, unique_orig_type=True) %}

    {# ======== 1.a Generate the enumeration class ======== #}
    {% for f in r.halchildren(children_type=HalFieldNode, skip_buses=skip_buses) %}
    {% set has_enum, enum_name, enum_strings, enum_values, enum_desc, const_width = f.get_enums() %}
    {% if has_enum and enum_name not in seen_enum_names %}
    {# Add enum_name to seen_enum_names set #}
    {% set _ = seen_enum_names.append(enum_name) %}
    class {{ enum_name }}
    {
    public:
    {% for  s, v, d in enum_strings|zip(enum_values, enum_desc) %}
        static const halcpp::Const<{{ const_width }}, {{ v }}> {{ s }}; // {{ d }}
    {% endfor %}
    };
    {% endif %}
    {% endfor %}

    {# ======== 1.b Generate the register class ======== #}
    {{ r.get_docstring() | indent(4)}}
    {{ r.get_template_line() }}
    class {{ r.orig_type_name|upper }} : public halcpp::{{ r.cpp_access_type }}{{ r.get_cls_tmpl_params() }}
    {
    public:
        using TYPE = {{ r.orig_type_name|upper }}{{ r.get_cls_tmpl_params() }};

    {# Add the fields to the register #}
    {% for f in r.halchildren(children_type=HalFieldNode, skip_buses=skip_buses) %}
        static halcpp::{{ f.cpp_access_type }}<{{ f.low }}, {{ f.high }}, TYPE> {{ f.inst_name }};
    {% endfor %}
    {# Inherit the overloaded '=' operator from the base class if register can be write from software #}
    {% if r.has_sw_writable %}

        using halcpp::{{ r.cpp_access_type }}{{ r.get_cls_tmpl_params() }}::operator=;
    {% endif %}
    };
    {% endfor %}

    {# ======== 2. Generate the registers from the register files ======== #}
    {% for rf in halnode.halchildren(children_type=HalRegfileNode, skip_buses=skip_buses) %}
    {% for r in rf.halchildren(children_type=HalRegNode, skip_buses=skip_buses) %}

    {# ======== 2.a Generate the enumeration class ======== #}
    {% for f in r.halchildren(children_type=HalFieldNode, skip_buses=skip_buses) %}
    {% set has_enum, enum_name, enum_strings, enum_values, enum_desc, const_width = f.get_enums() %}
    {% if has_enum and enum_name not in seen_enum_names %}
    {# Add enum_name to seen_enum_names set #}
    {% set _ = seen_enum_names.append(enum_name) %}
    class {{ enum_name }}
    {
    public:
    {% for  s, v, d in enum_strings|zip(enum_values, enum_desc) %}
        static const halcpp::Const<{{ const_width }}, {{ v }}> {{ s }}; // {{ d }}
    {% endfor %}
    };
    {% endif %}
    {% endfor %}

    {# ======== 2.b Generate the register class ======== #}
    {{ r.get_docstring() | indent(4)}}
    {{ r.get_template_line() }}
    class {{ r.orig_type_name|upper }} : public halcpp::{{ r.cpp_access_type }}{{ r.get_cls_tmpl_params() }}
    {
    public:
        using TYPE = {{ r.orig_type_name|upper }}{{ r.get_cls_tmpl_params() }};

    {# Add the fields to the register #}
    {% for f in r.halchildren(children_type=HalFieldNode, skip_buses=skip_buses) %}
        static halcpp::{{ f.cpp_access_type }}<{{ f.low }}, {{ f.high }}, TYPE> {{ f.inst_name }};
    {% endfor %}
    {# Inherit the overloaded '=' operator from the base class if register can be write from software #}
    {% if r.has_sw_writable %}

        using halcpp::{{ r.cpp_access_type }}{{ r.get_cls_tmpl_params() }}::operator=;
    {% endif %}
    };
    {% endfor %}
    {% endfor %}

    {# ======== 3. Generate the register file classes ======== #}
    {% for rf in halnode.haldescendants(descendants_type=HalRegfileNode, in_post_order=True, skip_buses=skip_buses) %}
    {{ rf.get_docstring() }}
    {{ rf.get_template_line() }}
    class {{ rf.orig_type_name|upper }} : public halcpp::{{ rf.cpp_access_type }}{{ rf.get_cls_tmpl_params()}}
    {
    public:
        using TYPE = {{ rf.orig_type_name|upper }}{{ rf.get_cls_tmpl_params() }};

    {% for c in rf.halchildren((HalRegNode, HalRegfileNode), skip_buses=skip_buses) %}
        static {{ c.orig_type_name|upper }}<0x{{ "%0x"|format(c.address_offset|int) }}, {{ c.width }}, TYPE> {{ c.inst_name }};
    {% endfor %}
    };
    {% endfor %}

    {# ======== 4. Generate the memory classes ======== #}
    {% for m in halnode.halchildren(children_type=HalMemNode, skip_buses=skip_buses, unique_orig_type=True) %}
    {{ m.get_template_line() }}
    class {{ m.parent.orig_type_name|upper }} : public halcpp::MemNode{{ m.get_cls_tmpl_params() }}
    {

    };
    {% endfor %}
}
{% endif %}

{# ======== 5. Generate the top HAL class of an addrmap component ======== #}
{{ halnode.get_docstring() }}
{{ halnode.get_template_line() }}
class {{ halnode.orig_type_name_hal|upper }} : public AddrmapNode<BASE, PARENT_TYPE>
{
public:
    using TYPE = {{ halnode.orig_type_name_hal|upper () }}{{ halnode.get_cls_tmpl_params() }};

{% for c in halnode.halchildren(skip_buses=skip_buses) %}
    {% if c.__class__.__name__ == "HalRegNode" and c.is_array %}
    static halcpp::RegArrayNode<{{ halnode.orig_type_name }}_nm::{{ c.orig_type_name|upper }}, 0x{{ "%0x"|format(c.address_offset|int) }}, {{ c.width }}, {{ c.array_stride }}, TYPE , {{ c.array_dimensions|join(', ') }}> {{ c.inst_name }};
    {% elif c.__class__.__name__ == "HalRegNode" %}
    static {{ halnode.orig_type_name }}_nm::{{ c.orig_type_name|upper }}<0x{{ "%0x"|format(c.address_offset|int) }}, {{ c.width }}, TYPE> {{ c.inst_name }};
    {% elif c.__class__.__name__ == "HalRegfileNode" and c.is_array %}
    static halcpp::RegfileArrayNode<{{ halnode.orig_type_name }}_nm::{{ c.orig_type_name|upper }}, 0x{{ "%0x"|format(c.address_offset|int) }}, {{ c.array_stride }}, TYPE , {{ c.array_dimensions|join(', ') }}> {{ c.inst_name }};
    {% elif c.__class__.__name__ == "HalRegfileNode" %}
    static {{ halnode.orig_type_name }}_nm::{{ c.orig_type_name|upper }}<0x{{ "%0x"|format(c.address_offset|int) }}, TYPE> {{ c.inst_name }};
    {% elif c.__class__.__name__ == "HalMemNode" %}
    static {{ halnode.orig_type_name }}_nm::{{ c.parent.orig_type_name|upper }}<0x{{ "%0x"|format(c.address_offset|int) }}, {{ c.size }}, TYPE> {{ c.inst_name }};
    {% else %}
    static {{ halutils.get_extern(c)|upper }}<0x{{ "%0x"|format(c.address_offset|int) }}, TYPE> {{ c.inst_name }};
    {% endif %}
{% endfor %}
};

#endif // !__{{ halnode.orig_type_name_hal|upper }}_H_

