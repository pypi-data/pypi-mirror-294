"""
    EMIL CustomerService

    The EMIL CustomerService API description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: kontakt@emil.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from eis.customers.api_client import ApiClient, Endpoint as _Endpoint
from eis.customers.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from eis.customers.model.create_presigned_post_response_class import CreatePresignedPostResponseClass
from eis.customers.model.get_policy_response_class import GetPolicyResponseClass
from eis.customers.model.list_policies_response_class import ListPoliciesResponseClass
from eis.customers.model.request_policy_update_request_dto import RequestPolicyUpdateRequestDto
from eis.customers.model.request_policy_update_response_class import RequestPolicyUpdateResponseClass
from eis.customers.model.terminate_customer_policy_request_dto import TerminateCustomerPolicyRequestDto
from eis.customers.model.terminate_customer_policy_response_class import TerminateCustomerPolicyResponseClass
from eis.customers.model.upload_customer_policy_documents_request_dto import UploadCustomerPolicyDocumentsRequestDto
from eis.customers.model.withdraw_customer_policy_response_class import WithdrawCustomerPolicyResponseClass


class PoliciesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_customer_policy_data_by_date_endpoint = _Endpoint(
            settings={
                'response_type': (GetPolicyResponseClass,),
                'auth': [],
                'endpoint_path': '/v1/customers/{customerCode}/policies/{policyCode}/current-version',
                'operation_id': 'get_customer_policy_data_by_date',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'policy_code',
                    'customer_code',
                    'timeslice_date',
                    'authorization',
                ],
                'required': [
                    'policy_code',
                    'customer_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'policy_code':
                        (str,),
                    'customer_code':
                        (str,),
                    'timeslice_date':
                        (str,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'policy_code': 'policyCode',
                    'customer_code': 'customerCode',
                    'timeslice_date': 'timesliceDate',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'policy_code': 'path',
                    'customer_code': 'path',
                    'timeslice_date': 'query',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_policy_endpoint = _Endpoint(
            settings={
                'response_type': (GetPolicyResponseClass,),
                'auth': [],
                'endpoint_path': '/v1/customers/{customerCode}/policies/{policyCode}',
                'operation_id': 'get_policy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'policy_code',
                    'customer_code',
                    'expand',
                    'authorization',
                ],
                'required': [
                    'policy_code',
                    'customer_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'policy_code':
                        (str,),
                    'customer_code':
                        (str,),
                    'expand':
                        (str,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'policy_code': 'policyCode',
                    'customer_code': 'customerCode',
                    'expand': 'expand',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'policy_code': 'path',
                    'customer_code': 'path',
                    'expand': 'query',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_policies_endpoint = _Endpoint(
            settings={
                'response_type': (ListPoliciesResponseClass,),
                'auth': [],
                'endpoint_path': '/v1/customers/{customerCode}/policies',
                'operation_id': 'list_policies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_code',
                    'page_size',
                    'page_token',
                    'filter',
                    'filters',
                    'search',
                    'order',
                    'expand',
                    'authorization',
                ],
                'required': [
                    'customer_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_code':
                        (str,),
                    'page_size':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'page_token':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filters':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'search':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'order':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'expand':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'customer_code': 'customerCode',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'filter': 'filter',
                    'filters': 'filters',
                    'search': 'search',
                    'order': 'order',
                    'expand': 'expand',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'customer_code': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                    'filter': 'query',
                    'filters': 'query',
                    'search': 'query',
                    'order': 'query',
                    'expand': 'query',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.request_policy_update_endpoint = _Endpoint(
            settings={
                'response_type': (RequestPolicyUpdateResponseClass,),
                'auth': [],
                'endpoint_path': '/v1/customers/{customerCode}/policies/{policyCode}/request-update',
                'operation_id': 'request_policy_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'policy_code',
                    'customer_code',
                    'request_policy_update_request_dto',
                    'authorization',
                ],
                'required': [
                    'policy_code',
                    'customer_code',
                    'request_policy_update_request_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'policy_code':
                        (str,),
                    'customer_code':
                        (str,),
                    'request_policy_update_request_dto':
                        (RequestPolicyUpdateRequestDto,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'policy_code': 'policyCode',
                    'customer_code': 'customerCode',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'policy_code': 'path',
                    'customer_code': 'path',
                    'request_policy_update_request_dto': 'body',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.terminate_customer_policy_endpoint = _Endpoint(
            settings={
                'response_type': (TerminateCustomerPolicyResponseClass,),
                'auth': [],
                'endpoint_path': '/v1/customers/{customerCode}/policies/{policyCode}/terminate',
                'operation_id': 'terminate_customer_policy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'policy_code',
                    'customer_code',
                    'terminate_customer_policy_request_dto',
                    'authorization',
                ],
                'required': [
                    'policy_code',
                    'customer_code',
                    'terminate_customer_policy_request_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'policy_code':
                        (str,),
                    'customer_code':
                        (str,),
                    'terminate_customer_policy_request_dto':
                        (TerminateCustomerPolicyRequestDto,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'policy_code': 'policyCode',
                    'customer_code': 'customerCode',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'policy_code': 'path',
                    'customer_code': 'path',
                    'terminate_customer_policy_request_dto': 'body',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.upload_customer_policy_documents_endpoint = _Endpoint(
            settings={
                'response_type': (CreatePresignedPostResponseClass,),
                'auth': [],
                'endpoint_path': '/v1/customers/{customerCode}/policies/{policyCode}/documents',
                'operation_id': 'upload_customer_policy_documents',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_code',
                    'policy_code',
                    'upload_customer_policy_documents_request_dto',
                ],
                'required': [
                    'customer_code',
                    'policy_code',
                    'upload_customer_policy_documents_request_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_code':
                        (str,),
                    'policy_code':
                        (str,),
                    'upload_customer_policy_documents_request_dto':
                        (UploadCustomerPolicyDocumentsRequestDto,),
                },
                'attribute_map': {
                    'customer_code': 'customerCode',
                    'policy_code': 'policyCode',
                },
                'location_map': {
                    'customer_code': 'path',
                    'policy_code': 'path',
                    'upload_customer_policy_documents_request_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.withdraw_customer_policy_endpoint = _Endpoint(
            settings={
                'response_type': (WithdrawCustomerPolicyResponseClass,),
                'auth': [],
                'endpoint_path': '/v1/customers/{customerCode}/policies/{policyCode}/withdraw',
                'operation_id': 'withdraw_customer_policy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'policy_code',
                    'customer_code',
                    'authorization',
                ],
                'required': [
                    'policy_code',
                    'customer_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'policy_code':
                        (str,),
                    'customer_code':
                        (str,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'policy_code': 'policyCode',
                    'customer_code': 'customerCode',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'policy_code': 'path',
                    'customer_code': 'path',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_customer_policy_data_by_date(
        self,
        policy_code,
        customer_code,
        **kwargs
    ):
        """Get current version details  # noqa: E501

        Get detailed policy that belongs to a customer;        the details are filtered to return only the current       version and the interval timeline that the provided date is included.       If the date is not specified, the system will return the whole timeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_customer_policy_data_by_date(policy_code, customer_code, async_req=True)
        >>> result = thread.get()

        Args:
            policy_code (str): The policy code.
            customer_code (str): The customer code or \"me\" for the currently logged in customer.

        Keyword Args:
            timeslice_date (str): This date is used to filter data of the policy, to select the appropriate timeslice.       If no date is specified, the system returns all the timeslices.. [optional]
            authorization (str): Bearer Token: provided by the login endpoint under the name accessToken.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetPolicyResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['policy_code'] = \
            policy_code
        kwargs['customer_code'] = \
            customer_code
        return self.get_customer_policy_data_by_date_endpoint.call_with_http_info(**kwargs)

    def get_policy(
        self,
        policy_code,
        customer_code,
        **kwargs
    ):
        """Get policy details  # noqa: E501

        Get detailed policy that belongs to a customer; the details can be expanded using expand query parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_policy(policy_code, customer_code, async_req=True)
        >>> result = thread.get()

        Args:
            policy_code (str): The policy code.
            customer_code (str): The customer code or \"me\" for the currently logged in customer.

        Keyword Args:
            expand (str): Fields to expand response by - [versions, premiumItems]. [optional]
            authorization (str): Bearer Token: provided by the login endpoint under the name accessToken.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetPolicyResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['policy_code'] = \
            policy_code
        kwargs['customer_code'] = \
            customer_code
        return self.get_policy_endpoint.call_with_http_info(**kwargs)

    def list_policies(
        self,
        customer_code,
        **kwargs
    ):
        """List policies  # noqa: E501

        List all the policies that belong to a customer, the policies can be filtered by policy code, policy number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_policies(customer_code, async_req=True)
        >>> result = thread.get()

        Args:
            customer_code (str): The customer code or \"me\" for the currently logged in customer.

        Keyword Args:
            page_size (bool, date, datetime, dict, float, int, list, str, none_type): A limit on the number of objects to be returned.     Limit ranges between 1 and 100. Default: 10.. [optional]
            page_token (bool, date, datetime, dict, float, int, list, str, none_type): A cursor for use in pagination.     pageToken is an ID that defines your place in the list.     For instance, if you make a list request and receive 100 objects and pageToken=1,     your subsequent call can include pageToken=2 in order to fetch the next page of the list.. [optional]
            filter (bool, date, datetime, dict, float, int, list, str, none_type): Filter the response by one or multiple fields.     In general, fetching filtered responses will conserve bandwidth and reduce response time.. [optional]
            filters (bool, date, datetime, dict, float, int, list, str, none_type): Filter the response by one or multiple fields.     In general, fetching filtered responses will conserve bandwidth and reduce response time.. [optional]
            search (bool, date, datetime, dict, float, int, list, str, none_type): Search the list by any field. For instance, if you want to search by code     add code=xxx in order to fetch the result.. [optional]
            order (bool, date, datetime, dict, float, int, list, str, none_type): The order parameter determines how the results should be sorted according to a specified field.     It functions similarly to an SQL ORDER BY.     Sorting can be performed in either ascending (ASC) or descending (DESC) order.     Default: ASC.. [optional]
            expand (bool, date, datetime, dict, float, int, list, str, none_type): Use this parameter to fetch additional information about the list items.     The expand query parameter increases the set of fields that appear in the response in     addition to the default ones.     Expanding resources can reduce the number of API calls required to accomplish a task.     However, use this with parsimony as some expanded fields can drastically increase payload size.. [optional]
            authorization (str): Bearer Token: provided by the login endpoint under the name accessToken.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListPoliciesResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['customer_code'] = \
            customer_code
        return self.list_policies_endpoint.call_with_http_info(**kwargs)

    def request_policy_update(
        self,
        policy_code,
        customer_code,
        request_policy_update_request_dto,
        **kwargs
    ):
        """Request policy update  # noqa: E501

        Request to update an existing policy by customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.request_policy_update(policy_code, customer_code, request_policy_update_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            policy_code (str): The code of the policy that the customer wants to update.
            customer_code (str): The customer code or \"me\" for the currently logged in customer.
            request_policy_update_request_dto (RequestPolicyUpdateRequestDto):

        Keyword Args:
            authorization (str): Bearer Token: provided by the login endpoint under the name accessToken.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RequestPolicyUpdateResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['policy_code'] = \
            policy_code
        kwargs['customer_code'] = \
            customer_code
        kwargs['request_policy_update_request_dto'] = \
            request_policy_update_request_dto
        return self.request_policy_update_endpoint.call_with_http_info(**kwargs)

    def terminate_customer_policy(
        self,
        policy_code,
        customer_code,
        terminate_customer_policy_request_dto,
        **kwargs
    ):
        """Terminate a policy  # noqa: E501

        Request to terminate an existing policy by customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.terminate_customer_policy(policy_code, customer_code, terminate_customer_policy_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            policy_code (str): The code of the policy that the customer wants to terminate.
            customer_code (str): The customer code or \"me\" for the currently logged in customer.
            terminate_customer_policy_request_dto (TerminateCustomerPolicyRequestDto):

        Keyword Args:
            authorization (str): Bearer Token: provided by the login endpoint under the name accessToken.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TerminateCustomerPolicyResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['policy_code'] = \
            policy_code
        kwargs['customer_code'] = \
            customer_code
        kwargs['terminate_customer_policy_request_dto'] = \
            terminate_customer_policy_request_dto
        return self.terminate_customer_policy_endpoint.call_with_http_info(**kwargs)

    def upload_customer_policy_documents(
        self,
        customer_code,
        policy_code,
        upload_customer_policy_documents_request_dto,
        **kwargs
    ):
        """Upload policy documents  # noqa: E501

        API to upload and attach documents to a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_customer_policy_documents(customer_code, policy_code, upload_customer_policy_documents_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            customer_code (str):
            policy_code (str): The policy code to identify a policy.
            upload_customer_policy_documents_request_dto (UploadCustomerPolicyDocumentsRequestDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreatePresignedPostResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['customer_code'] = \
            customer_code
        kwargs['policy_code'] = \
            policy_code
        kwargs['upload_customer_policy_documents_request_dto'] = \
            upload_customer_policy_documents_request_dto
        return self.upload_customer_policy_documents_endpoint.call_with_http_info(**kwargs)

    def withdraw_customer_policy(
        self,
        policy_code,
        customer_code,
        **kwargs
    ):
        """Withdraw the policy  # noqa: E501

        Withdraw policy by customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.withdraw_customer_policy(policy_code, customer_code, async_req=True)
        >>> result = thread.get()

        Args:
            policy_code (str): The code of the policy that the customer wants to withdraw.
            customer_code (str): The customer code or \"me\" for the currently logged in customer.

        Keyword Args:
            authorization (str): Bearer Token: provided by the login endpoint under the name accessToken.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WithdrawCustomerPolicyResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['policy_code'] = \
            policy_code
        kwargs['customer_code'] = \
            customer_code
        return self.withdraw_customer_policy_endpoint.call_with_http_info(**kwargs)

