# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import organization_pb2 as organization__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in organization_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrganizationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOrganization = channel.unary_unary(
                '/batchx.organization.OrganizationService/GetOrganization',
                request_serializer=organization__pb2.GetOrganizationRequest.SerializeToString,
                response_deserializer=organization__pb2.GetOrganizationResponse.FromString,
                _registered_method=True)
        self.UpdateOrganization = channel.unary_unary(
                '/batchx.organization.OrganizationService/UpdateOrganization',
                request_serializer=organization__pb2.UpdateOrganizationRequest.SerializeToString,
                response_deserializer=organization__pb2.UpdateOrganizationResponse.FromString,
                _registered_method=True)
        self.CreateOrganization = channel.unary_unary(
                '/batchx.organization.OrganizationService/CreateOrganization',
                request_serializer=organization__pb2.CreateOrganizationRequest.SerializeToString,
                response_deserializer=organization__pb2.CreateOrganizationResponse.FromString,
                _registered_method=True)
        self.InviteMember = channel.unary_unary(
                '/batchx.organization.OrganizationService/InviteMember',
                request_serializer=organization__pb2.InviteMemberRequest.SerializeToString,
                response_deserializer=organization__pb2.InviteMemberResponse.FromString,
                _registered_method=True)
        self.HandleInvitation = channel.unary_unary(
                '/batchx.organization.OrganizationService/HandleInvitation',
                request_serializer=organization__pb2.HandleInvitationRequest.SerializeToString,
                response_deserializer=organization__pb2.HandleInvitationResponse.FromString,
                _registered_method=True)
        self.ListOrganizationInvitations = channel.unary_unary(
                '/batchx.organization.OrganizationService/ListOrganizationInvitations',
                request_serializer=organization__pb2.ListOrganizationInvitationsRequest.SerializeToString,
                response_deserializer=organization__pb2.ListOrganizationInvitationsResponse.FromString,
                _registered_method=True)
        self.ListUserInvitations = channel.unary_unary(
                '/batchx.organization.OrganizationService/ListUserInvitations',
                request_serializer=organization__pb2.ListUserInvitationsRequest.SerializeToString,
                response_deserializer=organization__pb2.ListUserInvitationsResponse.FromString,
                _registered_method=True)
        self.DeleteInvitation = channel.unary_unary(
                '/batchx.organization.OrganizationService/DeleteInvitation',
                request_serializer=organization__pb2.DeleteInvitationRequest.SerializeToString,
                response_deserializer=organization__pb2.DeleteInvitationResponse.FromString,
                _registered_method=True)
        self.DeleteMembership = channel.unary_unary(
                '/batchx.organization.OrganizationService/DeleteMembership',
                request_serializer=organization__pb2.DeleteMembershipRequest.SerializeToString,
                response_deserializer=organization__pb2.DeleteMembershipResponse.FromString,
                _registered_method=True)


class OrganizationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InviteMember(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleInvitation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOrganizationInvitations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUserInvitations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteInvitation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMembership(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrganizationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrganization,
                    request_deserializer=organization__pb2.GetOrganizationRequest.FromString,
                    response_serializer=organization__pb2.GetOrganizationResponse.SerializeToString,
            ),
            'UpdateOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrganization,
                    request_deserializer=organization__pb2.UpdateOrganizationRequest.FromString,
                    response_serializer=organization__pb2.UpdateOrganizationResponse.SerializeToString,
            ),
            'CreateOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrganization,
                    request_deserializer=organization__pb2.CreateOrganizationRequest.FromString,
                    response_serializer=organization__pb2.CreateOrganizationResponse.SerializeToString,
            ),
            'InviteMember': grpc.unary_unary_rpc_method_handler(
                    servicer.InviteMember,
                    request_deserializer=organization__pb2.InviteMemberRequest.FromString,
                    response_serializer=organization__pb2.InviteMemberResponse.SerializeToString,
            ),
            'HandleInvitation': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleInvitation,
                    request_deserializer=organization__pb2.HandleInvitationRequest.FromString,
                    response_serializer=organization__pb2.HandleInvitationResponse.SerializeToString,
            ),
            'ListOrganizationInvitations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOrganizationInvitations,
                    request_deserializer=organization__pb2.ListOrganizationInvitationsRequest.FromString,
                    response_serializer=organization__pb2.ListOrganizationInvitationsResponse.SerializeToString,
            ),
            'ListUserInvitations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUserInvitations,
                    request_deserializer=organization__pb2.ListUserInvitationsRequest.FromString,
                    response_serializer=organization__pb2.ListUserInvitationsResponse.SerializeToString,
            ),
            'DeleteInvitation': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteInvitation,
                    request_deserializer=organization__pb2.DeleteInvitationRequest.FromString,
                    response_serializer=organization__pb2.DeleteInvitationResponse.SerializeToString,
            ),
            'DeleteMembership': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMembership,
                    request_deserializer=organization__pb2.DeleteMembershipRequest.FromString,
                    response_serializer=organization__pb2.DeleteMembershipResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'batchx.organization.OrganizationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('batchx.organization.OrganizationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrganizationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/GetOrganization',
            organization__pb2.GetOrganizationRequest.SerializeToString,
            organization__pb2.GetOrganizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/UpdateOrganization',
            organization__pb2.UpdateOrganizationRequest.SerializeToString,
            organization__pb2.UpdateOrganizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/CreateOrganization',
            organization__pb2.CreateOrganizationRequest.SerializeToString,
            organization__pb2.CreateOrganizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InviteMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/InviteMember',
            organization__pb2.InviteMemberRequest.SerializeToString,
            organization__pb2.InviteMemberResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HandleInvitation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/HandleInvitation',
            organization__pb2.HandleInvitationRequest.SerializeToString,
            organization__pb2.HandleInvitationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListOrganizationInvitations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/ListOrganizationInvitations',
            organization__pb2.ListOrganizationInvitationsRequest.SerializeToString,
            organization__pb2.ListOrganizationInvitationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUserInvitations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/ListUserInvitations',
            organization__pb2.ListUserInvitationsRequest.SerializeToString,
            organization__pb2.ListUserInvitationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteInvitation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/DeleteInvitation',
            organization__pb2.DeleteInvitationRequest.SerializeToString,
            organization__pb2.DeleteInvitationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMembership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.organization.OrganizationService/DeleteMembership',
            organization__pb2.DeleteMembershipRequest.SerializeToString,
            organization__pb2.DeleteMembershipResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
