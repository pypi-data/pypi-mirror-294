# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import filesystem_pb2 as filesystem__pb2
from . import log_pb2 as log__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in filesystem_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FilesystemServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFile = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/GetFile',
                request_serializer=filesystem__pb2.GetFileRequest.SerializeToString,
                response_deserializer=filesystem__pb2.GetFileResponse.FromString,
                _registered_method=True)
        self.UploadPresigned = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/UploadPresigned',
                request_serializer=filesystem__pb2.UploadPresignedRequest.SerializeToString,
                response_deserializer=filesystem__pb2.UploadPresignedResponse.FromString,
                _registered_method=True)
        self.ReportUploadStatus = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/ReportUploadStatus',
                request_serializer=filesystem__pb2.ReportUploadStatusRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ReportUploadStatusResponse.FromString,
                _registered_method=True)
        self.CancelUpload = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/CancelUpload',
                request_serializer=filesystem__pb2.CancelUploadRequest.SerializeToString,
                response_deserializer=filesystem__pb2.CancelUploadResponse.FromString,
                _registered_method=True)
        self.CompleteUpload = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/CompleteUpload',
                request_serializer=filesystem__pb2.CompleteUploadRequest.SerializeToString,
                response_deserializer=filesystem__pb2.CompleteUploadResponse.FromString,
                _registered_method=True)
        self.DownloadPresigned = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/DownloadPresigned',
                request_serializer=filesystem__pb2.DownloadPresignedRequest.SerializeToString,
                response_deserializer=filesystem__pb2.DownloadPresignedResponse.FromString,
                _registered_method=True)
        self.DeleteFile = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/DeleteFile',
                request_serializer=filesystem__pb2.DeleteFileRequest.SerializeToString,
                response_deserializer=filesystem__pb2.DeleteFileResponse.FromString,
                _registered_method=True)
        self.ListFolder = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/ListFolder',
                request_serializer=filesystem__pb2.ListFolderRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ListFolderResponse.FromString,
                _registered_method=True)
        self.ListBlobs = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/ListBlobs',
                request_serializer=filesystem__pb2.ListBlobsRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ListBlobsResponse.FromString,
                _registered_method=True)
        self.GetBlob = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/GetBlob',
                request_serializer=filesystem__pb2.GetBlobRequest.SerializeToString,
                response_deserializer=filesystem__pb2.GetBlobResponse.FromString,
                _registered_method=True)
        self.SetBlobStatus = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/SetBlobStatus',
                request_serializer=filesystem__pb2.SetBlobStatusRequest.SerializeToString,
                response_deserializer=filesystem__pb2.SetBlobStatusResponse.FromString,
                _registered_method=True)
        self.ListBlobPointers = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/ListBlobPointers',
                request_serializer=filesystem__pb2.ListBlobPointersRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ListBlobPointersResponse.FromString,
                _registered_method=True)
        self.Copy = channel.unary_stream(
                '/batchx.filesystem.FilesystemService/Copy',
                request_serializer=filesystem__pb2.CopyRequest.SerializeToString,
                response_deserializer=log__pb2.LogRecord.FromString,
                _registered_method=True)
        self.ShareFile = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/ShareFile',
                request_serializer=filesystem__pb2.ShareFileRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ShareFileResponse.FromString,
                _registered_method=True)
        self.AddS3Bucket = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/AddS3Bucket',
                request_serializer=filesystem__pb2.AddS3BucketRequest.SerializeToString,
                response_deserializer=filesystem__pb2.AddS3BucketResponse.FromString,
                _registered_method=True)
        self.ListS3Buckets = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/ListS3Buckets',
                request_serializer=filesystem__pb2.ListS3BucketsRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ListS3BucketsResponse.FromString,
                _registered_method=True)
        self.RemoveS3Bucket = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/RemoveS3Bucket',
                request_serializer=filesystem__pb2.RemoveS3BucketRequest.SerializeToString,
                response_deserializer=filesystem__pb2.RemoveS3BucketResponse.FromString,
                _registered_method=True)
        self.ListS3BucketFolder = channel.unary_unary(
                '/batchx.filesystem.FilesystemService/ListS3BucketFolder',
                request_serializer=filesystem__pb2.ListS3BucketFolderRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ListS3BucketFolderResponse.FromString,
                _registered_method=True)


class FilesystemServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadPresigned(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportUploadStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadPresigned(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFolder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBlobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBlobStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBlobPointers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Copy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShareFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddS3Bucket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListS3Buckets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveS3Bucket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListS3BucketFolder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FilesystemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=filesystem__pb2.GetFileRequest.FromString,
                    response_serializer=filesystem__pb2.GetFileResponse.SerializeToString,
            ),
            'UploadPresigned': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadPresigned,
                    request_deserializer=filesystem__pb2.UploadPresignedRequest.FromString,
                    response_serializer=filesystem__pb2.UploadPresignedResponse.SerializeToString,
            ),
            'ReportUploadStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportUploadStatus,
                    request_deserializer=filesystem__pb2.ReportUploadStatusRequest.FromString,
                    response_serializer=filesystem__pb2.ReportUploadStatusResponse.SerializeToString,
            ),
            'CancelUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelUpload,
                    request_deserializer=filesystem__pb2.CancelUploadRequest.FromString,
                    response_serializer=filesystem__pb2.CancelUploadResponse.SerializeToString,
            ),
            'CompleteUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteUpload,
                    request_deserializer=filesystem__pb2.CompleteUploadRequest.FromString,
                    response_serializer=filesystem__pb2.CompleteUploadResponse.SerializeToString,
            ),
            'DownloadPresigned': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadPresigned,
                    request_deserializer=filesystem__pb2.DownloadPresignedRequest.FromString,
                    response_serializer=filesystem__pb2.DownloadPresignedResponse.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=filesystem__pb2.DeleteFileRequest.FromString,
                    response_serializer=filesystem__pb2.DeleteFileResponse.SerializeToString,
            ),
            'ListFolder': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFolder,
                    request_deserializer=filesystem__pb2.ListFolderRequest.FromString,
                    response_serializer=filesystem__pb2.ListFolderResponse.SerializeToString,
            ),
            'ListBlobs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBlobs,
                    request_deserializer=filesystem__pb2.ListBlobsRequest.FromString,
                    response_serializer=filesystem__pb2.ListBlobsResponse.SerializeToString,
            ),
            'GetBlob': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlob,
                    request_deserializer=filesystem__pb2.GetBlobRequest.FromString,
                    response_serializer=filesystem__pb2.GetBlobResponse.SerializeToString,
            ),
            'SetBlobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBlobStatus,
                    request_deserializer=filesystem__pb2.SetBlobStatusRequest.FromString,
                    response_serializer=filesystem__pb2.SetBlobStatusResponse.SerializeToString,
            ),
            'ListBlobPointers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBlobPointers,
                    request_deserializer=filesystem__pb2.ListBlobPointersRequest.FromString,
                    response_serializer=filesystem__pb2.ListBlobPointersResponse.SerializeToString,
            ),
            'Copy': grpc.unary_stream_rpc_method_handler(
                    servicer.Copy,
                    request_deserializer=filesystem__pb2.CopyRequest.FromString,
                    response_serializer=log__pb2.LogRecord.SerializeToString,
            ),
            'ShareFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ShareFile,
                    request_deserializer=filesystem__pb2.ShareFileRequest.FromString,
                    response_serializer=filesystem__pb2.ShareFileResponse.SerializeToString,
            ),
            'AddS3Bucket': grpc.unary_unary_rpc_method_handler(
                    servicer.AddS3Bucket,
                    request_deserializer=filesystem__pb2.AddS3BucketRequest.FromString,
                    response_serializer=filesystem__pb2.AddS3BucketResponse.SerializeToString,
            ),
            'ListS3Buckets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListS3Buckets,
                    request_deserializer=filesystem__pb2.ListS3BucketsRequest.FromString,
                    response_serializer=filesystem__pb2.ListS3BucketsResponse.SerializeToString,
            ),
            'RemoveS3Bucket': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveS3Bucket,
                    request_deserializer=filesystem__pb2.RemoveS3BucketRequest.FromString,
                    response_serializer=filesystem__pb2.RemoveS3BucketResponse.SerializeToString,
            ),
            'ListS3BucketFolder': grpc.unary_unary_rpc_method_handler(
                    servicer.ListS3BucketFolder,
                    request_deserializer=filesystem__pb2.ListS3BucketFolderRequest.FromString,
                    response_serializer=filesystem__pb2.ListS3BucketFolderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'batchx.filesystem.FilesystemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('batchx.filesystem.FilesystemService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FilesystemService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/GetFile',
            filesystem__pb2.GetFileRequest.SerializeToString,
            filesystem__pb2.GetFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadPresigned(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/UploadPresigned',
            filesystem__pb2.UploadPresignedRequest.SerializeToString,
            filesystem__pb2.UploadPresignedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportUploadStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/ReportUploadStatus',
            filesystem__pb2.ReportUploadStatusRequest.SerializeToString,
            filesystem__pb2.ReportUploadStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/CancelUpload',
            filesystem__pb2.CancelUploadRequest.SerializeToString,
            filesystem__pb2.CancelUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CompleteUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/CompleteUpload',
            filesystem__pb2.CompleteUploadRequest.SerializeToString,
            filesystem__pb2.CompleteUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadPresigned(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/DownloadPresigned',
            filesystem__pb2.DownloadPresignedRequest.SerializeToString,
            filesystem__pb2.DownloadPresignedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/DeleteFile',
            filesystem__pb2.DeleteFileRequest.SerializeToString,
            filesystem__pb2.DeleteFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFolder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/ListFolder',
            filesystem__pb2.ListFolderRequest.SerializeToString,
            filesystem__pb2.ListFolderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListBlobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/ListBlobs',
            filesystem__pb2.ListBlobsRequest.SerializeToString,
            filesystem__pb2.ListBlobsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/GetBlob',
            filesystem__pb2.GetBlobRequest.SerializeToString,
            filesystem__pb2.GetBlobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetBlobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/SetBlobStatus',
            filesystem__pb2.SetBlobStatusRequest.SerializeToString,
            filesystem__pb2.SetBlobStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListBlobPointers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/ListBlobPointers',
            filesystem__pb2.ListBlobPointersRequest.SerializeToString,
            filesystem__pb2.ListBlobPointersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Copy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/batchx.filesystem.FilesystemService/Copy',
            filesystem__pb2.CopyRequest.SerializeToString,
            log__pb2.LogRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShareFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/ShareFile',
            filesystem__pb2.ShareFileRequest.SerializeToString,
            filesystem__pb2.ShareFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddS3Bucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/AddS3Bucket',
            filesystem__pb2.AddS3BucketRequest.SerializeToString,
            filesystem__pb2.AddS3BucketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListS3Buckets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/ListS3Buckets',
            filesystem__pb2.ListS3BucketsRequest.SerializeToString,
            filesystem__pb2.ListS3BucketsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveS3Bucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/RemoveS3Bucket',
            filesystem__pb2.RemoveS3BucketRequest.SerializeToString,
            filesystem__pb2.RemoveS3BucketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListS3BucketFolder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/batchx.filesystem.FilesystemService/ListS3BucketFolder',
            filesystem__pb2.ListS3BucketFolderRequest.SerializeToString,
            filesystem__pb2.ListS3BucketFolderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
