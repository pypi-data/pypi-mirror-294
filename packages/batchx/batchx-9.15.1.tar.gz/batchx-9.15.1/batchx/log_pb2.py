# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: log.proto
# Protobuf Python Version: 5.27.2
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    27,
    2,
    '',
    'log.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\tlog.proto\x12\nbatchx.log\"\xb4\x01\n\tLogRecord\x12 \n\x05level\x18\x01 \x01(\x0e\x32\x11.batchx.log.Level\x12\x11\n\tts_millis\x18\x02 \x01(\x03\x12\x0f\n\x07message\x18\x03 \x01(\t\x12,\n\x06source\x18\x04 \x01(\x0e\x32\x1c.batchx.log.LogRecord.Source\"3\n\x06Source\x12\x12\n\x0eUNKNOWN_SOURCE\x10\x00\x12\x06\n\x02\x42X\x10\x01\x12\r\n\tCONTAINER\x10\x02*a\n\x05Level\x12\x15\n\x11UNKNOWN_LOG_LEVEL\x10\x00\x12\t\n\x05TRACE\x10\x01\x12\t\n\x05\x44\x45\x42UG\x10\x02\x12\x08\n\x04INFO\x10\x03\x12\x0b\n\x07WARNING\x10\x04\x12\t\n\x05\x45RROR\x10\x05\x12\t\n\x05QUIET\x10\x06\x42\x1b\n\x0fio.batchx.protoB\x08LogProtob\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'log_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\017io.batchx.protoB\010LogProto'
  _globals['_LEVEL']._serialized_start=208
  _globals['_LEVEL']._serialized_end=305
  _globals['_LOGRECORD']._serialized_start=26
  _globals['_LOGRECORD']._serialized_end=206
  _globals['_LOGRECORD_SOURCE']._serialized_start=155
  _globals['_LOGRECORD_SOURCE']._serialized_end=206
# @@protoc_insertion_point(module_scope)
