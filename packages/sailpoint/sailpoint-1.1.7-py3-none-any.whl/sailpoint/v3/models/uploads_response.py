# coding: utf-8

"""
    Identity Security Cloud V3 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UploadsResponse(BaseModel):
    """
    UploadsResponse
    """ # noqa: E501
    job_id: StrictStr = Field(description="Unique id assigned to this job.", alias="jobId")
    status: StrictStr = Field(description="Status of the job.")
    type: StrictStr = Field(description="Type of the job, either Backup or Draft.")
    tenant: Optional[StrictStr] = Field(default=None, description="The name of the tenant performing the upload")
    requester_name: Optional[StrictStr] = Field(default=None, description="The name of the requester.", alias="requesterName")
    created: datetime = Field(description="The time the job was started.")
    modified: datetime = Field(description="The time of the last update to the job.")
    name: Optional[StrictStr] = Field(default=None, description="The name assigned to the upload file in the request body.")
    user_can_delete: Optional[StrictBool] = Field(default=True, description="Is the job a regular backup job, if so is the user allowed to delete the backup file. Since this is an upload job it remains as false.", alias="userCanDelete")
    is_partial: Optional[StrictBool] = Field(default=False, description="Is the job a regular backup job, if so is it partial. Since this is an upload job it remains as false.", alias="isPartial")
    backup_type: Optional[StrictStr] = Field(default=None, description="What kind of backup is this being treated as.", alias="backupType")
    hydration_status: Optional[StrictStr] = Field(default=None, description="have the objects contained in the upload file been hydrated.", alias="hydrationStatus")
    __properties: ClassVar[List[str]] = ["jobId", "status", "type", "tenant", "requesterName", "created", "modified", "name", "userCanDelete", "isPartial", "backupType", "hydrationStatus"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'FAILED']):
            raise ValueError("must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'FAILED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BACKUP', 'DRAFT']):
            raise ValueError("must be one of enum values ('BACKUP', 'DRAFT')")
        return value

    @field_validator('backup_type')
    def backup_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPLOADED', 'AUTOMATED', 'MANUAL']):
            raise ValueError("must be one of enum values ('UPLOADED', 'AUTOMATED', 'MANUAL')")
        return value

    @field_validator('hydration_status')
    def hydration_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HYDRATED', 'NOT_HYDRATED']):
            raise ValueError("must be one of enum values ('HYDRATED', 'NOT_HYDRATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UploadsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UploadsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobId": obj.get("jobId"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "tenant": obj.get("tenant"),
            "requesterName": obj.get("requesterName"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "name": obj.get("name"),
            "userCanDelete": obj.get("userCanDelete") if obj.get("userCanDelete") is not None else True,
            "isPartial": obj.get("isPartial") if obj.get("isPartial") is not None else False,
            "backupType": obj.get("backupType"),
            "hydrationStatus": obj.get("hydrationStatus")
        })
        return _obj


