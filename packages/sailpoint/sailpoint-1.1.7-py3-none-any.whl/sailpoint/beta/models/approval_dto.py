# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.beta.models.approval_identity import ApprovalIdentity
from typing import Optional, Set
from typing_extensions import Self

class ApprovalDto(BaseModel):
    """
    Payload for changing the fields of an approval.
    """ # noqa: E501
    comments: Optional[Dict[str, Any]] = Field(default=None, description="Object representation of a comment on the approval")
    approved_by: Optional[List[ApprovalIdentity]] = Field(default=None, description="An array of identities who have approved the approval", alias="approvedBy")
    rejected_by: Optional[List[ApprovalIdentity]] = Field(default=None, description="An array of identities who have rejected the approval", alias="rejectedBy")
    reassign_from: Optional[ApprovalIdentity] = Field(default=None, alias="reassignFrom")
    reassign_to: Optional[ApprovalIdentity] = Field(default=None, alias="reassignTo")
    additional_attributes: Optional[Dict[str, Any]] = Field(default=None, description="Any additional attributes that the approval request may need", alias="additionalAttributes")
    __properties: ClassVar[List[str]] = ["comments", "approvedBy", "rejectedBy", "reassignFrom", "reassignTo", "additionalAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApprovalDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in approved_by (list)
        _items = []
        if self.approved_by:
            for _item_approved_by in self.approved_by:
                if _item_approved_by:
                    _items.append(_item_approved_by.to_dict())
            _dict['approvedBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rejected_by (list)
        _items = []
        if self.rejected_by:
            for _item_rejected_by in self.rejected_by:
                if _item_rejected_by:
                    _items.append(_item_rejected_by.to_dict())
            _dict['rejectedBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of reassign_from
        if self.reassign_from:
            _dict['reassignFrom'] = self.reassign_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reassign_to
        if self.reassign_to:
            _dict['reassignTo'] = self.reassign_to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApprovalDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "approvedBy": [ApprovalIdentity.from_dict(_item) for _item in obj["approvedBy"]] if obj.get("approvedBy") is not None else None,
            "rejectedBy": [ApprovalIdentity.from_dict(_item) for _item in obj["rejectedBy"]] if obj.get("rejectedBy") is not None else None,
            "reassignFrom": ApprovalIdentity.from_dict(obj["reassignFrom"]) if obj.get("reassignFrom") is not None else None,
            "reassignTo": ApprovalIdentity.from_dict(obj["reassignTo"]) if obj.get("reassignTo") is not None else None,
            "additionalAttributes": obj.get("additionalAttributes")
        })
        return _obj


