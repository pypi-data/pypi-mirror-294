# coding: utf-8

"""
    HCX API

    The HCX REST API. Please see https://api.ncloud-docs.com/docs/ai-naver-clovastudio-summary for more details.

    The version of the OpenAPI document: 24.1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from pyhcx.models.completion_ai_filter import CompletionAIFilter
from typing import Optional, Set
from typing_extensions import Self

class CompletionResult(BaseModel):
    """
    CompletionResult
    """ # noqa: E501
    text: StrictStr
    stop_reason: Optional[StrictStr] = Field(default=None, alias="stopReason")
    input_text: Optional[StrictStr] = Field(default=None, alias="inputText")
    input_length: Optional[StrictInt] = Field(default=None, alias="inputLength")
    input_tokens: Optional[List[StrictStr]] = Field(default=None, alias="inputTokens")
    output_text: Optional[StrictStr] = Field(default=None, alias="outputText")
    output_length: Optional[StrictInt] = Field(default=None, alias="outputLength")
    output_tokens: Optional[List[StrictStr]] = Field(default=None, alias="outputTokens")
    probs: Optional[List[Union[StrictFloat, StrictInt]]] = None
    ok: Optional[StrictBool] = None
    ai_filter: Optional[List[CompletionAIFilter]] = Field(default=None, alias="aiFilter")
    __properties: ClassVar[List[str]] = ["text", "stopReason", "inputText", "inputLength", "inputTokens", "outputText", "outputLength", "outputTokens", "probs", "ok", "aiFilter"]

    @field_validator('stop_reason')
    def stop_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['length', 'end_token', 'stop_before']):
            raise ValueError("must be one of enum values ('length', 'end_token', 'stop_before')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompletionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ai_filter (list)
        _items = []
        if self.ai_filter:
            for _item in self.ai_filter:
                if _item:
                    _items.append(_item.to_dict())
            _dict['aiFilter'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompletionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "stopReason": obj.get("stopReason"),
            "inputText": obj.get("inputText"),
            "inputLength": obj.get("inputLength"),
            "inputTokens": obj.get("inputTokens"),
            "outputText": obj.get("outputText"),
            "outputLength": obj.get("outputLength"),
            "outputTokens": obj.get("outputTokens"),
            "probs": obj.get("probs"),
            "ok": obj.get("ok"),
            "aiFilter": [CompletionAIFilter.from_dict(_item) for _item in obj["aiFilter"]] if obj.get("aiFilter") is not None else None
        })
        return _obj


