# coding: utf-8

"""
    HCX API

    The HCX REST API. Please see https://api.ncloud-docs.com/docs/ai-naver-clovastudio-summary for more details.

    The version of the OpenAPI document: 24.1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateSegmentationRequest(BaseModel):
    """
    CreateSegmentationRequest
    """ # noqa: E501
    text: StrictStr
    alpha: Optional[Union[Annotated[float, Field(le=1.5, strict=True, ge=-1.5)], Annotated[int, Field(le=1, strict=True, ge=-1)]]] = -100
    seg_cnt: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=None, alias="segCnt")
    post_process: Optional[StrictBool] = Field(default=False, alias="postProcess")
    post_process_max_size: Optional[Annotated[int, Field(le=3000, strict=True, ge=1)]] = Field(default=1000, alias="postProcessMaxSize")
    post_process_min_size: Optional[Annotated[int, Field(le=3000, strict=True, ge=0)]] = Field(default=300, alias="postProcessMinSize")
    __properties: ClassVar[List[str]] = ["text", "alpha", "segCnt", "postProcess", "postProcessMaxSize", "postProcessMinSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSegmentationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if alpha (nullable) is None
        # and model_fields_set contains the field
        if self.alpha is None and "alpha" in self.model_fields_set:
            _dict['alpha'] = None

        # set to None if seg_cnt (nullable) is None
        # and model_fields_set contains the field
        if self.seg_cnt is None and "seg_cnt" in self.model_fields_set:
            _dict['segCnt'] = None

        # set to None if post_process (nullable) is None
        # and model_fields_set contains the field
        if self.post_process is None and "post_process" in self.model_fields_set:
            _dict['postProcess'] = None

        # set to None if post_process_max_size (nullable) is None
        # and model_fields_set contains the field
        if self.post_process_max_size is None and "post_process_max_size" in self.model_fields_set:
            _dict['postProcessMaxSize'] = None

        # set to None if post_process_min_size (nullable) is None
        # and model_fields_set contains the field
        if self.post_process_min_size is None and "post_process_min_size" in self.model_fields_set:
            _dict['postProcessMinSize'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSegmentationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "alpha": obj.get("alpha") if obj.get("alpha") is not None else -100,
            "segCnt": obj.get("segCnt"),
            "postProcess": obj.get("postProcess") if obj.get("postProcess") is not None else False,
            "postProcessMaxSize": obj.get("postProcessMaxSize") if obj.get("postProcessMaxSize") is not None else 1000,
            "postProcessMinSize": obj.get("postProcessMinSize") if obj.get("postProcessMinSize") is not None else 300
        })
        return _obj


