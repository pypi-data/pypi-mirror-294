"""Dataclasses for all structs in the IAToken contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name
# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments
# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import
# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return
from __future__ import annotations

from dataclasses import dataclass

from eth_typing import ABIComponentIndexed, ABIEvent

Approval = ABIEvent(
    anonymous=False,
    inputs=[
        ABIComponentIndexed(indexed=True, name="owner", type="address"),
        ABIComponentIndexed(indexed=True, name="spender", type="address"),
        ABIComponentIndexed(indexed=False, name="value", type="uint256"),
    ],
    name="Approval",
    type="event",
)

BalanceTransfer = ABIEvent(
    anonymous=False,
    inputs=[
        ABIComponentIndexed(indexed=True, name="from", type="address"),
        ABIComponentIndexed(indexed=True, name="to", type="address"),
        ABIComponentIndexed(indexed=False, name="value", type="uint256"),
        ABIComponentIndexed(indexed=False, name="index", type="uint256"),
    ],
    name="BalanceTransfer",
    type="event",
)

Burn = ABIEvent(
    anonymous=False,
    inputs=[
        ABIComponentIndexed(indexed=True, name="from", type="address"),
        ABIComponentIndexed(indexed=True, name="target", type="address"),
        ABIComponentIndexed(indexed=False, name="value", type="uint256"),
        ABIComponentIndexed(
            indexed=False, name="balanceIncrease", type="uint256"
        ),
        ABIComponentIndexed(indexed=False, name="index", type="uint256"),
    ],
    name="Burn",
    type="event",
)

Initialized = ABIEvent(
    anonymous=False,
    inputs=[
        ABIComponentIndexed(
            indexed=True, name="underlyingAsset", type="address"
        ),
        ABIComponentIndexed(indexed=True, name="pool", type="address"),
        ABIComponentIndexed(indexed=False, name="treasury", type="address"),
        ABIComponentIndexed(
            indexed=False, name="incentivesController", type="address"
        ),
        ABIComponentIndexed(indexed=False, name="aTokenDecimals", type="uint8"),
        ABIComponentIndexed(indexed=False, name="aTokenName", type="string"),
        ABIComponentIndexed(indexed=False, name="aTokenSymbol", type="string"),
        ABIComponentIndexed(indexed=False, name="params", type="bytes"),
    ],
    name="Initialized",
    type="event",
)

Mint = ABIEvent(
    anonymous=False,
    inputs=[
        ABIComponentIndexed(indexed=True, name="caller", type="address"),
        ABIComponentIndexed(indexed=True, name="onBehalfOf", type="address"),
        ABIComponentIndexed(indexed=False, name="value", type="uint256"),
        ABIComponentIndexed(
            indexed=False, name="balanceIncrease", type="uint256"
        ),
        ABIComponentIndexed(indexed=False, name="index", type="uint256"),
    ],
    name="Mint",
    type="event",
)

Transfer = ABIEvent(
    anonymous=False,
    inputs=[
        ABIComponentIndexed(indexed=True, name="from", type="address"),
        ABIComponentIndexed(indexed=True, name="to", type="address"),
        ABIComponentIndexed(indexed=False, name="value", type="uint256"),
    ],
    name="Transfer",
    type="event",
)


@dataclass
class ErrorInfo:
    """Custom contract error information."""

    name: str
    selector: str
    signature: str
    inputs: list[ErrorParams]


@dataclass
class ErrorParams:
    """Parameter info for custom contract errors."""

    name: str
    solidity_type: str
    python_type: str
