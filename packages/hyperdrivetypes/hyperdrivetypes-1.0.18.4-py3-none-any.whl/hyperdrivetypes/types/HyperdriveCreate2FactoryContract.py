"""A web3.py Contract class for the HyperdriveCreate2Factory contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, TxParams

from .utilities import (
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)

structs = {}


class HyperdriveCreate2FactoryDeployContractFunction0(ContractFunction):
    """ContractFunction for the deploy method."""

    def __call__(self, salt: bytes, creationCode: bytes, initializationCode: bytes) -> HyperdriveCreate2FactoryDeployContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(creationCode), dataclass_to_tuple(initializationCode))  # type: ignore
        return cast(HyperdriveCreate2FactoryDeployContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCreate2FactoryDeployContractFunction1(ContractFunction):
    """ContractFunction for the deploy method."""

    def __call__(self, salt: bytes, creationCode: bytes) -> HyperdriveCreate2FactoryDeployContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(creationCode))  # type: ignore
        return cast(HyperdriveCreate2FactoryDeployContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCreate2FactoryDeployContractFunction(ContractFunction):
    """ContractFunction for the deploy method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, salt: bytes, creationCode: bytes, initializationCode: bytes) -> HyperdriveCreate2FactoryDeployContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, salt: bytes, creationCode: bytes) -> HyperdriveCreate2FactoryDeployContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> HyperdriveCreate2FactoryDeployContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class HyperdriveCreate2FactoryGetDeployedContractFunction(ContractFunction):
    """ContractFunction for the getDeployed method."""

    def __call__(self, salt: bytes, bytecodeHash: bytes) -> HyperdriveCreate2FactoryGetDeployedContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(salt), dataclass_to_tuple(bytecodeHash)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCreate2FactoryContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveCreate2Factory contract."""

    deploy: HyperdriveCreate2FactoryDeployContractFunction

    getDeployed: HyperdriveCreate2FactoryGetDeployedContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deploy = HyperdriveCreate2FactoryDeployContractFunction.factory(
            "deploy",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deploy",
        )
        self.getDeployed = (
            HyperdriveCreate2FactoryGetDeployedContractFunction.factory(
                "getDeployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="getDeployed",
            )
        )


class HyperdriveCreate2FactoryCreate2EmptyBytecodeContractError:
    """ContractError for Create2EmptyBytecode."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveCreate2FactoryCreate2EmptyBytecodeContractError",
    ) -> None:
        self.selector = "0x4ca249dc"
        self.signature = "Create2EmptyBytecode()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveCreate2FactoryCreate2EmptyBytecodeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivecreate2factory_abi
                if item.get("name") == "Create2EmptyBytecode"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveCreate2FactoryCreate2EmptyBytecodeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivecreate2factory_abi
                if item.get("name") == "Create2EmptyBytecode"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveCreate2FactoryCreate2FailedDeploymentContractError:
    """ContractError for Create2FailedDeployment."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveCreate2FactoryCreate2FailedDeploymentContractError",
    ) -> None:
        self.selector = "0x741752c2"
        self.signature = "Create2FailedDeployment()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveCreate2FactoryCreate2FailedDeploymentContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivecreate2factory_abi
                if item.get("name") == "Create2FailedDeployment"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type[
            "HyperdriveCreate2FactoryCreate2FailedDeploymentContractError"
        ],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivecreate2factory_abi
                if item.get("name") == "Create2FailedDeployment"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveCreate2FactoryCreate2InsufficientBalanceContractError:
    """ContractError for Create2InsufficientBalance."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveCreate2FactoryCreate2InsufficientBalanceContractError",
    ) -> None:
        self.selector = "0xe4bbecac"
        self.signature = "Create2InsufficientBalance(uint256,uint256)"

    def decode_error_data(  # type: ignore
        self: "HyperdriveCreate2FactoryCreate2InsufficientBalanceContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivecreate2factory_abi
                if item.get("name") == "Create2InsufficientBalance"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type[
            "HyperdriveCreate2FactoryCreate2InsufficientBalanceContractError"
        ],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivecreate2factory_abi
                if item.get("name") == "Create2InsufficientBalance"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveCreate2FactoryContractErrors:
    """ContractErrors for the HyperdriveCreate2Factory contract."""

    Create2EmptyBytecode: (
        HyperdriveCreate2FactoryCreate2EmptyBytecodeContractError
    )

    Create2FailedDeployment: (
        HyperdriveCreate2FactoryCreate2FailedDeploymentContractError
    )

    Create2InsufficientBalance: (
        HyperdriveCreate2FactoryCreate2InsufficientBalanceContractError
    )

    def __init__(
        self,
    ) -> None:
        self.Create2EmptyBytecode = (
            HyperdriveCreate2FactoryCreate2EmptyBytecodeContractError()
        )
        self.Create2FailedDeployment = (
            HyperdriveCreate2FactoryCreate2FailedDeploymentContractError()
        )
        self.Create2InsufficientBalance = (
            HyperdriveCreate2FactoryCreate2InsufficientBalanceContractError()
        )

        self._all = [
            self.Create2EmptyBytecode,
            self.Create2FailedDeployment,
            self.Create2InsufficientBalance,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"HyperdriveCreate2Factory does not have a selector matching {selector}"
        )


hyperdrivecreate2factory_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "deploy",
            "inputs": [
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_creationCode",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_initializationCode",
                    "type": "bytes",
                    "internalType": "bytes",
                },
            ],
            "outputs": [
                {
                    "name": "deployed",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deploy",
            "inputs": [
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_creationCode",
                    "type": "bytes",
                    "internalType": "bytes",
                },
            ],
            "outputs": [
                {
                    "name": "deployed",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "getDeployed",
            "inputs": [
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_bytecodeHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {"type": "error", "name": "Create2EmptyBytecode", "inputs": []},
        {"type": "error", "name": "Create2FailedDeployment", "inputs": []},
        {
            "type": "error",
            "name": "Create2InsufficientBalance",
            "inputs": [
                {
                    "name": "balance",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "needed",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
        },
    ],
)


class HyperdriveCreate2FactoryContract(Contract):
    """A web3.py Contract class for the HyperdriveCreate2Factory contract."""

    abi: ABI = hyperdrivecreate2factory_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b50610402806100206000396000f3fe6080604052600436106100345760003560e01c806319cdeff11461003957806391352f7c14610068578063cdcb760a14610088575b600080fd5b61004c6100473660046102c7565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b34801561007457600080fd5b5061004c610083366004610334565b61015d565b61004c610096366004610356565b610169565b60006100a8348585610172565b90506000816001600160a01b0316836040516100c4919061039d565b6000604051808303816000865af19150503d8060008114610101576040519150601f19603f3d011682016040523d82523d6000602084013e610106565b606091505b50509050806101545760405162461bcd60e51b81526020600482015260156024820152742320a4a622a22fa4a724aa24a0a624ad20aa24a7a760591b60448201526064015b60405180910390fd5b505b9392505050565b600061015683836101f2565b60006101563484845b60008347101561019e5760405163392efb2b60e21b81524760048201526024810185905260440161014b565b81516000036101c057604051631328927760e21b815260040160405180910390fd5b8282516020840186f590506001600160a01b03811661015657604051633a0ba96160e11b815260040160405180910390fd5b60006101568383306000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261024b57600080fd5b813567ffffffffffffffff8082111561026657610266610224565b604051601f8301601f19908116603f0116810190828211818310171561028e5761028e610224565b816040528381528660208588010111156102a757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156102dc57600080fd5b83359250602084013567ffffffffffffffff808211156102fb57600080fd5b6103078783880161023a565b9350604086013591508082111561031d57600080fd5b5061032a8682870161023a565b9150509250925092565b6000806040838503121561034757600080fd5b50508035926020909101359150565b6000806040838503121561036957600080fd5b82359150602083013567ffffffffffffffff81111561038757600080fd5b6103938582860161023a565b9150509250929050565b6000825160005b818110156103be57602081860181015185830152016103a4565b50600092019182525091905056fea2646970667358221220c0bf3131819e98e464059518cec154c7a6941d94ab379629fef65128c2fb2e8764736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = HyperdriveCreate2FactoryContractFunctions(hyperdrivecreate2factory_abi, self.w3, address)  # type: ignore

            self.errors = HyperdriveCreate2FactoryContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    errors: HyperdriveCreate2FactoryContractErrors = (
        HyperdriveCreate2FactoryContractErrors()
    )

    functions: HyperdriveCreate2FactoryContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveCreate2FactoryContractFunctions(
            hyperdrivecreate2factory_abi, w3, None
        )
        contract.errors = HyperdriveCreate2FactoryContractErrors()

        return contract
