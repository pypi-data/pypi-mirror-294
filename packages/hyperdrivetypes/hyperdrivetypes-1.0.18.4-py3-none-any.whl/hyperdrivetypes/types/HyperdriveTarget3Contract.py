"""A web3.py Contract class for the HyperdriveTarget3 contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import (
    ABI,
    ABIFunction,
    BlockIdentifier,
    CallOverride,
    EventData,
    TxParams,
)

from .IHyperdriveTypes import Options
from .utilities import (
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)

structs = {
    "Options": Options,
}


class HyperdriveTarget3AddLiquidityContractFunction(ContractFunction):
    """ContractFunction for the addLiquidity method."""

    def __call__(self, contribution: int, minLpSharePrice: int, minApr: int, maxApr: int, options: Options) -> HyperdriveTarget3AddLiquidityContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(minLpSharePrice),
            dataclass_to_tuple(minApr),
            dataclass_to_tuple(maxApr),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveTarget3InitializeContractFunction(ContractFunction):
    """ContractFunction for the initialize method."""

    def __call__(self, contribution: int, apr: int, options: Options) -> HyperdriveTarget3InitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(apr),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveTarget3ContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveTarget3 contract."""

    addLiquidity: HyperdriveTarget3AddLiquidityContractFunction

    initialize: HyperdriveTarget3InitializeContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addLiquidity = (
            HyperdriveTarget3AddLiquidityContractFunction.factory(
                "addLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="addLiquidity",
            )
        )
        self.initialize = HyperdriveTarget3InitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="initialize",
        )


class HyperdriveTarget3AddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3AddLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3AddLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3AddLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3AddLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3ApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3ApprovalContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3ApprovalContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3ApprovalContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3ApprovalContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3ApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3ApprovalForAllContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3ApprovalForAllContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3ApprovalForAllContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3ApprovalForAllContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3CloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3CloseLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3CloseLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3CloseLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3CloseLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3CloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3CloseShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3CloseShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3CloseShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3CloseShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3CollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3CollectGovernanceFeeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3CollectGovernanceFeeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3CollectGovernanceFeeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3CollectGovernanceFeeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3CreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3CreateCheckpointContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3CreateCheckpointContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3CreateCheckpointContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3CreateCheckpointContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3InitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3InitializeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3InitializeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3InitializeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3InitializeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3OpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3OpenLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3OpenLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3OpenLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3OpenLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3OpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3OpenShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3OpenShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3OpenShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3OpenShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3PauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3PauseStatusUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3PauseStatusUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3PauseStatusUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3PauseStatusUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3RedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3RedeemWithdrawalSharesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3RedeemWithdrawalSharesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3RedeemWithdrawalSharesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3RedeemWithdrawalSharesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3RemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3RemoveLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3RemoveLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3RemoveLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3RemoveLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3SweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3SweepContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3SweepContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3SweepContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3SweepContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3TransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveTarget3TransferSingleContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveTarget3TransferSingleContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveTarget3TransferSingleContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveTarget3TransferSingleContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveTarget3ContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveTarget3 contract."""

    AddLiquidity: HyperdriveTarget3AddLiquidityContractEvent

    Approval: HyperdriveTarget3ApprovalContractEvent

    ApprovalForAll: HyperdriveTarget3ApprovalForAllContractEvent

    CloseLong: HyperdriveTarget3CloseLongContractEvent

    CloseShort: HyperdriveTarget3CloseShortContractEvent

    CollectGovernanceFee: HyperdriveTarget3CollectGovernanceFeeContractEvent

    CreateCheckpoint: HyperdriveTarget3CreateCheckpointContractEvent

    Initialize: HyperdriveTarget3InitializeContractEvent

    OpenLong: HyperdriveTarget3OpenLongContractEvent

    OpenShort: HyperdriveTarget3OpenShortContractEvent

    PauseStatusUpdated: HyperdriveTarget3PauseStatusUpdatedContractEvent

    RedeemWithdrawalShares: HyperdriveTarget3RedeemWithdrawalSharesContractEvent

    RemoveLiquidity: HyperdriveTarget3RemoveLiquidityContractEvent

    Sweep: HyperdriveTarget3SweepContractEvent

    TransferSingle: HyperdriveTarget3TransferSingleContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            HyperdriveTarget3AddLiquidityContractEvent,
            HyperdriveTarget3AddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            HyperdriveTarget3ApprovalContractEvent,
            HyperdriveTarget3ApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            HyperdriveTarget3ApprovalForAllContractEvent,
            HyperdriveTarget3ApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            HyperdriveTarget3CloseLongContractEvent,
            HyperdriveTarget3CloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            HyperdriveTarget3CloseShortContractEvent,
            HyperdriveTarget3CloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            HyperdriveTarget3CollectGovernanceFeeContractEvent,
            HyperdriveTarget3CollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            HyperdriveTarget3CreateCheckpointContractEvent,
            HyperdriveTarget3CreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Initialize = cast(
            HyperdriveTarget3InitializeContractEvent,
            HyperdriveTarget3InitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            HyperdriveTarget3OpenLongContractEvent,
            HyperdriveTarget3OpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            HyperdriveTarget3OpenShortContractEvent,
            HyperdriveTarget3OpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            HyperdriveTarget3PauseStatusUpdatedContractEvent,
            HyperdriveTarget3PauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            HyperdriveTarget3RedeemWithdrawalSharesContractEvent,
            HyperdriveTarget3RedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            HyperdriveTarget3RemoveLiquidityContractEvent,
            HyperdriveTarget3RemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            HyperdriveTarget3SweepContractEvent,
            HyperdriveTarget3SweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            HyperdriveTarget3TransferSingleContractEvent,
            HyperdriveTarget3TransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )


class HyperdriveTarget3BelowMinimumContributionContractError:
    """ContractError for BelowMinimumContribution."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3BelowMinimumContributionContractError",
    ) -> None:
        self.selector = "0xabed41c4"
        self.signature = "BelowMinimumContribution()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3BelowMinimumContributionContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "BelowMinimumContribution"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3BelowMinimumContributionContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "BelowMinimumContribution"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3CircuitBreakerTriggeredContractError:
    """ContractError for CircuitBreakerTriggered."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3CircuitBreakerTriggeredContractError",
    ) -> None:
        self.selector = "0x2a958098"
        self.signature = "CircuitBreakerTriggered()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3CircuitBreakerTriggeredContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "CircuitBreakerTriggered"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3CircuitBreakerTriggeredContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "CircuitBreakerTriggered"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3DecreasedPresentValueWhenAddingLiquidityContractError:
    """ContractError for DecreasedPresentValueWhenAddingLiquidity."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3DecreasedPresentValueWhenAddingLiquidityContractError",
    ) -> None:
        self.selector = "0x309b2a42"
        self.signature = "DecreasedPresentValueWhenAddingLiquidity()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3DecreasedPresentValueWhenAddingLiquidityContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name")
                == "DecreasedPresentValueWhenAddingLiquidity"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type[
            "HyperdriveTarget3DecreasedPresentValueWhenAddingLiquidityContractError"
        ],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name")
                == "DecreasedPresentValueWhenAddingLiquidity"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3DistributeExcessIdleFailedContractError:
    """ContractError for DistributeExcessIdleFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3DistributeExcessIdleFailedContractError",
    ) -> None:
        self.selector = "0x8bdf918d"
        self.signature = "DistributeExcessIdleFailed()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3DistributeExcessIdleFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "DistributeExcessIdleFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3DistributeExcessIdleFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "DistributeExcessIdleFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3ExpInvalidExponentContractError:
    """ContractError for ExpInvalidExponent."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3ExpInvalidExponentContractError",
    ) -> None:
        self.selector = "0x73a2d6b1"
        self.signature = "ExpInvalidExponent()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3ExpInvalidExponentContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "ExpInvalidExponent"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3ExpInvalidExponentContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "ExpInvalidExponent"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3InsufficientLiquidityContractError:
    """ContractError for InsufficientLiquidity."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3InsufficientLiquidityContractError",
    ) -> None:
        self.selector = "0xbb55fd27"
        self.signature = "InsufficientLiquidity()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3InsufficientLiquidityContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "InsufficientLiquidity"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3InsufficientLiquidityContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "InsufficientLiquidity"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3InvalidAprContractError:
    """ContractError for InvalidApr."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3InvalidAprContractError",
    ) -> None:
        self.selector = "0x76c22a22"
        self.signature = "InvalidApr()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3InvalidAprContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "InvalidApr"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3InvalidAprContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "InvalidApr"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3InvalidEffectiveShareReservesContractError:
    """ContractError for InvalidEffectiveShareReserves."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3InvalidEffectiveShareReservesContractError",
    ) -> None:
        self.selector = "0x85bd2ac4"
        self.signature = "InvalidEffectiveShareReserves()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3InvalidEffectiveShareReservesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "InvalidEffectiveShareReserves"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type[
            "HyperdriveTarget3InvalidEffectiveShareReservesContractError"
        ],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "InvalidEffectiveShareReserves"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3InvalidTimestampContractError:
    """ContractError for InvalidTimestamp."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3InvalidTimestampContractError",
    ) -> None:
        self.selector = "0xb7d09497"
        self.signature = "InvalidTimestamp()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3InvalidTimestampContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "InvalidTimestamp"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3InvalidTimestampContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "InvalidTimestamp"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3LnInvalidInputContractError:
    """ContractError for LnInvalidInput."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3LnInvalidInputContractError",
    ) -> None:
        self.selector = "0xe61b4975"
        self.signature = "LnInvalidInput()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3LnInvalidInputContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "LnInvalidInput"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3LnInvalidInputContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "LnInvalidInput"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3MinimumTransactionAmountContractError:
    """ContractError for MinimumTransactionAmount."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3MinimumTransactionAmountContractError",
    ) -> None:
        self.selector = "0x423bbb46"
        self.signature = "MinimumTransactionAmount()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3MinimumTransactionAmountContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "MinimumTransactionAmount"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3MinimumTransactionAmountContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "MinimumTransactionAmount"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3OutputLimitContractError:
    """ContractError for OutputLimit."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3OutputLimitContractError",
    ) -> None:
        self.selector = "0xc9726517"
        self.signature = "OutputLimit()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3OutputLimitContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "OutputLimit"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3OutputLimitContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "OutputLimit"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3PoolAlreadyInitializedContractError:
    """ContractError for PoolAlreadyInitialized."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3PoolAlreadyInitializedContractError",
    ) -> None:
        self.selector = "0x7983c051"
        self.signature = "PoolAlreadyInitialized()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3PoolAlreadyInitializedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "PoolAlreadyInitialized"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3PoolAlreadyInitializedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "PoolAlreadyInitialized"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3PoolIsPausedContractError:
    """ContractError for PoolIsPaused."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3PoolIsPausedContractError",
    ) -> None:
        self.selector = "0x21081abf"
        self.signature = "PoolIsPaused()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3PoolIsPausedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "PoolIsPaused"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3PoolIsPausedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "PoolIsPaused"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3ReentrancyGuardReentrantCallContractError:
    """ContractError for ReentrancyGuardReentrantCall."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3ReentrancyGuardReentrantCallContractError",
    ) -> None:
        self.selector = "0x3ee5aeb5"
        self.signature = "ReentrancyGuardReentrantCall()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3ReentrancyGuardReentrantCallContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "ReentrancyGuardReentrantCall"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3ReentrancyGuardReentrantCallContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "ReentrancyGuardReentrantCall"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3RestrictedZeroAddressContractError:
    """ContractError for RestrictedZeroAddress."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3RestrictedZeroAddressContractError",
    ) -> None:
        self.selector = "0xf0dd15fd"
        self.signature = "RestrictedZeroAddress()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3RestrictedZeroAddressContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "RestrictedZeroAddress"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3RestrictedZeroAddressContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "RestrictedZeroAddress"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3TransferFailedContractError:
    """ContractError for TransferFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3TransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3TransferFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "TransferFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3TransferFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "TransferFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3UnsafeCastToInt128ContractError:
    """ContractError for UnsafeCastToInt128."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3UnsafeCastToInt128ContractError",
    ) -> None:
        self.selector = "0xa5353be5"
        self.signature = "UnsafeCastToInt128()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3UnsafeCastToInt128ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UnsafeCastToInt128"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3UnsafeCastToInt128ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UnsafeCastToInt128"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3UnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3UnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3UnsafeCastToInt256ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UnsafeCastToInt256"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3UnsafeCastToInt256ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UnsafeCastToInt256"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3UnsafeCastToUint112ContractError:
    """ContractError for UnsafeCastToUint112."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3UnsafeCastToUint112ContractError",
    ) -> None:
        self.selector = "0x10d62a2e"
        self.signature = "UnsafeCastToUint112()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3UnsafeCastToUint112ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UnsafeCastToUint112"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3UnsafeCastToUint112ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UnsafeCastToUint112"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3UnsafeCastToUint128ContractError:
    """ContractError for UnsafeCastToUint128."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3UnsafeCastToUint128ContractError",
    ) -> None:
        self.selector = "0x1e15f2a2"
        self.signature = "UnsafeCastToUint128()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3UnsafeCastToUint128ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UnsafeCastToUint128"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3UnsafeCastToUint128ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UnsafeCastToUint128"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3UpdateLiquidityFailedContractError:
    """ContractError for UpdateLiquidityFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveTarget3UpdateLiquidityFailedContractError",
    ) -> None:
        self.selector = "0x5044b7f5"
        self.signature = "UpdateLiquidityFailed()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveTarget3UpdateLiquidityFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UpdateLiquidityFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveTarget3UpdateLiquidityFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivetarget3_abi
                if item.get("name") == "UpdateLiquidityFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveTarget3ContractErrors:
    """ContractErrors for the HyperdriveTarget3 contract."""

    BelowMinimumContribution: (
        HyperdriveTarget3BelowMinimumContributionContractError
    )

    CircuitBreakerTriggered: (
        HyperdriveTarget3CircuitBreakerTriggeredContractError
    )

    DecreasedPresentValueWhenAddingLiquidity: (
        HyperdriveTarget3DecreasedPresentValueWhenAddingLiquidityContractError
    )

    DistributeExcessIdleFailed: (
        HyperdriveTarget3DistributeExcessIdleFailedContractError
    )

    ExpInvalidExponent: HyperdriveTarget3ExpInvalidExponentContractError

    InsufficientLiquidity: HyperdriveTarget3InsufficientLiquidityContractError

    InvalidApr: HyperdriveTarget3InvalidAprContractError

    InvalidEffectiveShareReserves: (
        HyperdriveTarget3InvalidEffectiveShareReservesContractError
    )

    InvalidTimestamp: HyperdriveTarget3InvalidTimestampContractError

    LnInvalidInput: HyperdriveTarget3LnInvalidInputContractError

    MinimumTransactionAmount: (
        HyperdriveTarget3MinimumTransactionAmountContractError
    )

    OutputLimit: HyperdriveTarget3OutputLimitContractError

    PoolAlreadyInitialized: HyperdriveTarget3PoolAlreadyInitializedContractError

    PoolIsPaused: HyperdriveTarget3PoolIsPausedContractError

    ReentrancyGuardReentrantCall: (
        HyperdriveTarget3ReentrancyGuardReentrantCallContractError
    )

    RestrictedZeroAddress: HyperdriveTarget3RestrictedZeroAddressContractError

    TransferFailed: HyperdriveTarget3TransferFailedContractError

    UnsafeCastToInt128: HyperdriveTarget3UnsafeCastToInt128ContractError

    UnsafeCastToInt256: HyperdriveTarget3UnsafeCastToInt256ContractError

    UnsafeCastToUint112: HyperdriveTarget3UnsafeCastToUint112ContractError

    UnsafeCastToUint128: HyperdriveTarget3UnsafeCastToUint128ContractError

    UpdateLiquidityFailed: HyperdriveTarget3UpdateLiquidityFailedContractError

    def __init__(
        self,
    ) -> None:
        self.BelowMinimumContribution = (
            HyperdriveTarget3BelowMinimumContributionContractError()
        )
        self.CircuitBreakerTriggered = (
            HyperdriveTarget3CircuitBreakerTriggeredContractError()
        )
        self.DecreasedPresentValueWhenAddingLiquidity = (
            HyperdriveTarget3DecreasedPresentValueWhenAddingLiquidityContractError()
        )
        self.DistributeExcessIdleFailed = (
            HyperdriveTarget3DistributeExcessIdleFailedContractError()
        )
        self.ExpInvalidExponent = (
            HyperdriveTarget3ExpInvalidExponentContractError()
        )
        self.InsufficientLiquidity = (
            HyperdriveTarget3InsufficientLiquidityContractError()
        )
        self.InvalidApr = HyperdriveTarget3InvalidAprContractError()
        self.InvalidEffectiveShareReserves = (
            HyperdriveTarget3InvalidEffectiveShareReservesContractError()
        )
        self.InvalidTimestamp = HyperdriveTarget3InvalidTimestampContractError()
        self.LnInvalidInput = HyperdriveTarget3LnInvalidInputContractError()
        self.MinimumTransactionAmount = (
            HyperdriveTarget3MinimumTransactionAmountContractError()
        )
        self.OutputLimit = HyperdriveTarget3OutputLimitContractError()
        self.PoolAlreadyInitialized = (
            HyperdriveTarget3PoolAlreadyInitializedContractError()
        )
        self.PoolIsPaused = HyperdriveTarget3PoolIsPausedContractError()
        self.ReentrancyGuardReentrantCall = (
            HyperdriveTarget3ReentrancyGuardReentrantCallContractError()
        )
        self.RestrictedZeroAddress = (
            HyperdriveTarget3RestrictedZeroAddressContractError()
        )
        self.TransferFailed = HyperdriveTarget3TransferFailedContractError()
        self.UnsafeCastToInt128 = (
            HyperdriveTarget3UnsafeCastToInt128ContractError()
        )
        self.UnsafeCastToInt256 = (
            HyperdriveTarget3UnsafeCastToInt256ContractError()
        )
        self.UnsafeCastToUint112 = (
            HyperdriveTarget3UnsafeCastToUint112ContractError()
        )
        self.UnsafeCastToUint128 = (
            HyperdriveTarget3UnsafeCastToUint128ContractError()
        )
        self.UpdateLiquidityFailed = (
            HyperdriveTarget3UpdateLiquidityFailedContractError()
        )

        self._all = [
            self.BelowMinimumContribution,
            self.CircuitBreakerTriggered,
            self.DecreasedPresentValueWhenAddingLiquidity,
            self.DistributeExcessIdleFailed,
            self.ExpInvalidExponent,
            self.InsufficientLiquidity,
            self.InvalidApr,
            self.InvalidEffectiveShareReserves,
            self.InvalidTimestamp,
            self.LnInvalidInput,
            self.MinimumTransactionAmount,
            self.OutputLimit,
            self.PoolAlreadyInitialized,
            self.PoolIsPaused,
            self.ReentrancyGuardReentrantCall,
            self.RestrictedZeroAddress,
            self.TransferFailed,
            self.UnsafeCastToInt128,
            self.UnsafeCastToInt256,
            self.UnsafeCastToUint112,
            self.UnsafeCastToUint128,
            self.UpdateLiquidityFailed,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"HyperdriveTarget3 does not have a selector matching {selector}"
        )


hyperdrivetarget3_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "addLiquidity",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minLpSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minApr",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_maxApr",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "payable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "BelowMinimumContribution", "inputs": []},
        {"type": "error", "name": "CircuitBreakerTriggered", "inputs": []},
        {
            "type": "error",
            "name": "DecreasedPresentValueWhenAddingLiquidity",
            "inputs": [],
        },
        {"type": "error", "name": "DistributeExcessIdleFailed", "inputs": []},
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "InsufficientLiquidity", "inputs": []},
        {"type": "error", "name": "InvalidApr", "inputs": []},
        {
            "type": "error",
            "name": "InvalidEffectiveShareReserves",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "MinimumTransactionAmount", "inputs": []},
        {"type": "error", "name": "OutputLimit", "inputs": []},
        {"type": "error", "name": "PoolAlreadyInitialized", "inputs": []},
        {"type": "error", "name": "PoolIsPaused", "inputs": []},
        {"type": "error", "name": "ReentrancyGuardReentrantCall", "inputs": []},
        {"type": "error", "name": "RestrictedZeroAddress", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt128", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint112", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint128", "inputs": []},
        {"type": "error", "name": "UpdateLiquidityFailed", "inputs": []},
    ],
)


class HyperdriveTarget3Contract(Contract):
    """A web3.py Contract class for the HyperdriveTarget3 contract."""

    abi: ABI = hyperdrivetarget3_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = HyperdriveTarget3ContractFunctions(hyperdrivetarget3_abi, self.w3, address)  # type: ignore
            self.events = HyperdriveTarget3ContractEvents(hyperdrivetarget3_abi, self.w3, address)  # type: ignore
            self.errors = HyperdriveTarget3ContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: HyperdriveTarget3ContractEvents

    errors: HyperdriveTarget3ContractErrors = HyperdriveTarget3ContractErrors()

    functions: HyperdriveTarget3ContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveTarget3ContractFunctions(
            hyperdrivetarget3_abi, w3, None
        )
        contract.errors = HyperdriveTarget3ContractErrors()

        return contract
