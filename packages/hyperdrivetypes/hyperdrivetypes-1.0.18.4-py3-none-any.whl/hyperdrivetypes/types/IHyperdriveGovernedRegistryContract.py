"""A web3.py Contract class for the IHyperdriveGovernedRegistry contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import (
    ABI,
    ABIFunction,
    BlockIdentifier,
    CallOverride,
    EventData,
    TxParams,
)

from .IHyperdriveRegistryTypes import (
    FactoryInfo,
    FactoryInfoWithMetadata,
    InstanceInfo,
    InstanceInfoWithMetadata,
)
from .utilities import (
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)

structs = {
    "FactoryInfo": FactoryInfo,
    "FactoryInfoWithMetadata": FactoryInfoWithMetadata,
    "InstanceInfo": InstanceInfo,
    "InstanceInfoWithMetadata": InstanceInfoWithMetadata,
}


class IHyperdriveGovernedRegistryAdminContractFunction(ContractFunction):
    """ContractFunction for the admin method."""

    def __call__(self) -> IHyperdriveGovernedRegistryAdminContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryGetFactoriesInRangeContractFunction(
    ContractFunction
):
    """ContractFunction for the getFactoriesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> IHyperdriveGovernedRegistryGetFactoriesInRangeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryGetFactoryAtIndexContractFunction(
    ContractFunction
):
    """ContractFunction for the getFactoryAtIndex method."""

    def __call__(self, index: int) -> IHyperdriveGovernedRegistryGetFactoryAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryGetFactoryInfoContractFunction(
    ContractFunction
):
    """ContractFunction for the getFactoryInfo method."""

    def __call__(self, factory: str) -> IHyperdriveGovernedRegistryGetFactoryInfoContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> FactoryInfo:
        """returns FactoryInfo."""
        # Define the expected return types from the smart contract call

        return_types = FactoryInfo

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            FactoryInfo,
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveGovernedRegistryGetFactoryInfoWithMetadataContractFunction(
    ContractFunction
):
    """ContractFunction for the getFactoryInfoWithMetadata method."""

    def __call__(self, factory: str) -> IHyperdriveGovernedRegistryGetFactoryInfoWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> FactoryInfoWithMetadata:
        """returns FactoryInfoWithMetadata."""
        # Define the expected return types from the smart contract call

        return_types = FactoryInfoWithMetadata

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            FactoryInfoWithMetadata,
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveGovernedRegistryGetFactoryInfosContractFunction(
    ContractFunction
):
    """ContractFunction for the getFactoryInfos method."""

    def __call__(self, factories: list[str]) -> IHyperdriveGovernedRegistryGetFactoryInfosContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factories))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FactoryInfo]:
        """returns list[FactoryInfo]."""
        # Define the expected return types from the smart contract call

        return_types = list[FactoryInfo]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[FactoryInfo],
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveGovernedRegistryGetFactoryInfosWithMetadataContractFunction(
    ContractFunction
):
    """ContractFunction for the getFactoryInfosWithMetadata method."""

    def __call__(self, factories: list[str]) -> IHyperdriveGovernedRegistryGetFactoryInfosWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factories))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FactoryInfoWithMetadata]:
        """returns list[FactoryInfoWithMetadata]."""
        # Define the expected return types from the smart contract call

        return_types = list[FactoryInfoWithMetadata]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[FactoryInfoWithMetadata],
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveGovernedRegistryGetInstanceAtIndexContractFunction(
    ContractFunction
):
    """ContractFunction for the getInstanceAtIndex method."""

    def __call__(self, index: int) -> IHyperdriveGovernedRegistryGetInstanceAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryGetInstanceInfoContractFunction(
    ContractFunction
):
    """ContractFunction for the getInstanceInfo method."""

    def __call__(self, instance: str) -> IHyperdriveGovernedRegistryGetInstanceInfoContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> InstanceInfo:
        """returns InstanceInfo."""
        # Define the expected return types from the smart contract call

        return_types = InstanceInfo

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            InstanceInfo,
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveGovernedRegistryGetInstanceInfoWithMetadataContractFunction(
    ContractFunction
):
    """ContractFunction for the getInstanceInfoWithMetadata method."""

    def __call__(self, instance: str) -> IHyperdriveGovernedRegistryGetInstanceInfoWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> InstanceInfoWithMetadata:
        """returns InstanceInfoWithMetadata."""
        # Define the expected return types from the smart contract call

        return_types = InstanceInfoWithMetadata

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            InstanceInfoWithMetadata,
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveGovernedRegistryGetInstanceInfosContractFunction(
    ContractFunction
):
    """ContractFunction for the getInstanceInfos method."""

    def __call__(self, instances: list[str]) -> IHyperdriveGovernedRegistryGetInstanceInfosContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instances))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[InstanceInfo]:
        """returns list[InstanceInfo]."""
        # Define the expected return types from the smart contract call

        return_types = list[InstanceInfo]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[InstanceInfo],
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveGovernedRegistryGetInstanceInfosWithMetadataContractFunction(
    ContractFunction
):
    """ContractFunction for the getInstanceInfosWithMetadata method."""

    def __call__(self, instances: list[str]) -> IHyperdriveGovernedRegistryGetInstanceInfosWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instances))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[InstanceInfoWithMetadata]:
        """returns list[InstanceInfoWithMetadata]."""
        # Define the expected return types from the smart contract call

        return_types = list[InstanceInfoWithMetadata]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[InstanceInfoWithMetadata],
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveGovernedRegistryGetInstancesInRangeContractFunction(
    ContractFunction
):
    """ContractFunction for the getInstancesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> IHyperdriveGovernedRegistryGetInstancesInRangeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryGetNumberOfFactoriesContractFunction(
    ContractFunction
):
    """ContractFunction for the getNumberOfFactories method."""

    def __call__(self) -> IHyperdriveGovernedRegistryGetNumberOfFactoriesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryGetNumberOfInstancesContractFunction(
    ContractFunction
):
    """ContractFunction for the getNumberOfInstances method."""

    def __call__(self) -> IHyperdriveGovernedRegistryGetNumberOfInstancesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryKindContractFunction(ContractFunction):
    """ContractFunction for the kind method."""

    def __call__(self) -> IHyperdriveGovernedRegistryKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> IHyperdriveGovernedRegistryNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistrySetFactoryInfoContractFunction(
    ContractFunction
):
    """ContractFunction for the setFactoryInfo method."""

    def __call__(self, factories: list[str], data: list[int]) -> IHyperdriveGovernedRegistrySetFactoryInfoContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(factories), dataclass_to_tuple(data)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveGovernedRegistrySetInstanceInfoContractFunction(
    ContractFunction
):
    """ContractFunction for the setInstanceInfo method."""

    def __call__(self, instances: list[str], data: list[int], factories: list[str]) -> IHyperdriveGovernedRegistrySetInstanceInfoContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(instances),
            dataclass_to_tuple(data),
            dataclass_to_tuple(factories),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveGovernedRegistryUpdateAdminContractFunction(ContractFunction):
    """ContractFunction for the updateAdmin method."""

    def __call__(self, admin: str) -> IHyperdriveGovernedRegistryUpdateAdminContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(admin))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IHyperdriveGovernedRegistryVersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> IHyperdriveGovernedRegistryVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveGovernedRegistryContractFunctions(ContractFunctions):
    """ContractFunctions for the IHyperdriveGovernedRegistry contract."""

    admin: IHyperdriveGovernedRegistryAdminContractFunction

    getFactoriesInRange: (
        IHyperdriveGovernedRegistryGetFactoriesInRangeContractFunction
    )

    getFactoryAtIndex: (
        IHyperdriveGovernedRegistryGetFactoryAtIndexContractFunction
    )

    getFactoryInfo: IHyperdriveGovernedRegistryGetFactoryInfoContractFunction

    getFactoryInfoWithMetadata: (
        IHyperdriveGovernedRegistryGetFactoryInfoWithMetadataContractFunction
    )

    getFactoryInfos: IHyperdriveGovernedRegistryGetFactoryInfosContractFunction

    getFactoryInfosWithMetadata: (
        IHyperdriveGovernedRegistryGetFactoryInfosWithMetadataContractFunction
    )

    getInstanceAtIndex: (
        IHyperdriveGovernedRegistryGetInstanceAtIndexContractFunction
    )

    getInstanceInfo: IHyperdriveGovernedRegistryGetInstanceInfoContractFunction

    getInstanceInfoWithMetadata: (
        IHyperdriveGovernedRegistryGetInstanceInfoWithMetadataContractFunction
    )

    getInstanceInfos: (
        IHyperdriveGovernedRegistryGetInstanceInfosContractFunction
    )

    getInstanceInfosWithMetadata: (
        IHyperdriveGovernedRegistryGetInstanceInfosWithMetadataContractFunction
    )

    getInstancesInRange: (
        IHyperdriveGovernedRegistryGetInstancesInRangeContractFunction
    )

    getNumberOfFactories: (
        IHyperdriveGovernedRegistryGetNumberOfFactoriesContractFunction
    )

    getNumberOfInstances: (
        IHyperdriveGovernedRegistryGetNumberOfInstancesContractFunction
    )

    kind: IHyperdriveGovernedRegistryKindContractFunction

    name: IHyperdriveGovernedRegistryNameContractFunction

    setFactoryInfo: IHyperdriveGovernedRegistrySetFactoryInfoContractFunction

    setInstanceInfo: IHyperdriveGovernedRegistrySetInstanceInfoContractFunction

    updateAdmin: IHyperdriveGovernedRegistryUpdateAdminContractFunction

    version: IHyperdriveGovernedRegistryVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.admin = IHyperdriveGovernedRegistryAdminContractFunction.factory(
            "admin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="admin",
        )
        self.getFactoriesInRange = IHyperdriveGovernedRegistryGetFactoriesInRangeContractFunction.factory(
            "getFactoriesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoriesInRange",
        )
        self.getFactoryAtIndex = IHyperdriveGovernedRegistryGetFactoryAtIndexContractFunction.factory(
            "getFactoryAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoryAtIndex",
        )
        self.getFactoryInfo = (
            IHyperdriveGovernedRegistryGetFactoryInfoContractFunction.factory(
                "getFactoryInfo",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="getFactoryInfo",
            )
        )
        self.getFactoryInfoWithMetadata = IHyperdriveGovernedRegistryGetFactoryInfoWithMetadataContractFunction.factory(
            "getFactoryInfoWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoryInfoWithMetadata",
        )
        self.getFactoryInfos = (
            IHyperdriveGovernedRegistryGetFactoryInfosContractFunction.factory(
                "getFactoryInfos",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="getFactoryInfos",
            )
        )
        self.getFactoryInfosWithMetadata = IHyperdriveGovernedRegistryGetFactoryInfosWithMetadataContractFunction.factory(
            "getFactoryInfosWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoryInfosWithMetadata",
        )
        self.getInstanceAtIndex = IHyperdriveGovernedRegistryGetInstanceAtIndexContractFunction.factory(
            "getInstanceAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceAtIndex",
        )
        self.getInstanceInfo = (
            IHyperdriveGovernedRegistryGetInstanceInfoContractFunction.factory(
                "getInstanceInfo",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="getInstanceInfo",
            )
        )
        self.getInstanceInfoWithMetadata = IHyperdriveGovernedRegistryGetInstanceInfoWithMetadataContractFunction.factory(
            "getInstanceInfoWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceInfoWithMetadata",
        )
        self.getInstanceInfos = (
            IHyperdriveGovernedRegistryGetInstanceInfosContractFunction.factory(
                "getInstanceInfos",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="getInstanceInfos",
            )
        )
        self.getInstanceInfosWithMetadata = IHyperdriveGovernedRegistryGetInstanceInfosWithMetadataContractFunction.factory(
            "getInstanceInfosWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceInfosWithMetadata",
        )
        self.getInstancesInRange = IHyperdriveGovernedRegistryGetInstancesInRangeContractFunction.factory(
            "getInstancesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstancesInRange",
        )
        self.getNumberOfFactories = IHyperdriveGovernedRegistryGetNumberOfFactoriesContractFunction.factory(
            "getNumberOfFactories",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfFactories",
        )
        self.getNumberOfInstances = IHyperdriveGovernedRegistryGetNumberOfInstancesContractFunction.factory(
            "getNumberOfInstances",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfInstances",
        )
        self.kind = IHyperdriveGovernedRegistryKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="kind",
        )
        self.name = IHyperdriveGovernedRegistryNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="name",
        )
        self.setFactoryInfo = (
            IHyperdriveGovernedRegistrySetFactoryInfoContractFunction.factory(
                "setFactoryInfo",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="setFactoryInfo",
            )
        )
        self.setInstanceInfo = (
            IHyperdriveGovernedRegistrySetInstanceInfoContractFunction.factory(
                "setInstanceInfo",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="setInstanceInfo",
            )
        )
        self.updateAdmin = (
            IHyperdriveGovernedRegistryUpdateAdminContractFunction.factory(
                "updateAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="updateAdmin",
            )
        )
        self.version = (
            IHyperdriveGovernedRegistryVersionContractFunction.factory(
                "version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="version",
            )
        )


class IHyperdriveGovernedRegistryAdminUpdatedContractEvent(ContractEvent):
    """ContractEvent for AdminUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IHyperdriveGovernedRegistryAdminUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IHyperdriveGovernedRegistryAdminUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "IHyperdriveGovernedRegistryAdminUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IHyperdriveGovernedRegistryAdminUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveGovernedRegistryFactoryInfoUpdatedContractEvent(ContractEvent):
    """ContractEvent for FactoryInfoUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IHyperdriveGovernedRegistryFactoryInfoUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IHyperdriveGovernedRegistryFactoryInfoUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "IHyperdriveGovernedRegistryFactoryInfoUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IHyperdriveGovernedRegistryFactoryInfoUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveGovernedRegistryInstanceInfoUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for InstanceInfoUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IHyperdriveGovernedRegistryInstanceInfoUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type[
            "IHyperdriveGovernedRegistryInstanceInfoUpdatedContractEvent"
        ],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "IHyperdriveGovernedRegistryInstanceInfoUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type[
            "IHyperdriveGovernedRegistryInstanceInfoUpdatedContractEvent"
        ],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveGovernedRegistryContractEvents(ContractEvents):
    """ContractEvents for the IHyperdriveGovernedRegistry contract."""

    AdminUpdated: IHyperdriveGovernedRegistryAdminUpdatedContractEvent

    FactoryInfoUpdated: (
        IHyperdriveGovernedRegistryFactoryInfoUpdatedContractEvent
    )

    InstanceInfoUpdated: (
        IHyperdriveGovernedRegistryInstanceInfoUpdatedContractEvent
    )

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AdminUpdated = cast(
            IHyperdriveGovernedRegistryAdminUpdatedContractEvent,
            IHyperdriveGovernedRegistryAdminUpdatedContractEvent.factory(
                "AdminUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AdminUpdated",
            ),
        )
        self.FactoryInfoUpdated = cast(
            IHyperdriveGovernedRegistryFactoryInfoUpdatedContractEvent,
            IHyperdriveGovernedRegistryFactoryInfoUpdatedContractEvent.factory(
                "FactoryInfoUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="FactoryInfoUpdated",
            ),
        )
        self.InstanceInfoUpdated = cast(
            IHyperdriveGovernedRegistryInstanceInfoUpdatedContractEvent,
            IHyperdriveGovernedRegistryInstanceInfoUpdatedContractEvent.factory(
                "InstanceInfoUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="InstanceInfoUpdated",
            ),
        )


class IHyperdriveGovernedRegistryEndIndexTooLargeContractError:
    """ContractError for EndIndexTooLarge."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IHyperdriveGovernedRegistryEndIndexTooLargeContractError",
    ) -> None:
        self.selector = "0xe0f7becb"
        self.signature = "EndIndexTooLarge()"

    def decode_error_data(  # type: ignore
        self: "IHyperdriveGovernedRegistryEndIndexTooLargeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "EndIndexTooLarge"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IHyperdriveGovernedRegistryEndIndexTooLargeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "EndIndexTooLarge"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IHyperdriveGovernedRegistryInputLengthMismatchContractError:
    """ContractError for InputLengthMismatch."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IHyperdriveGovernedRegistryInputLengthMismatchContractError",
    ) -> None:
        self.selector = "0xaaad13f7"
        self.signature = "InputLengthMismatch()"

    def decode_error_data(  # type: ignore
        self: "IHyperdriveGovernedRegistryInputLengthMismatchContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "InputLengthMismatch"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type[
            "IHyperdriveGovernedRegistryInputLengthMismatchContractError"
        ],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "InputLengthMismatch"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IHyperdriveGovernedRegistryInvalidFactoryContractError:
    """ContractError for InvalidFactory."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IHyperdriveGovernedRegistryInvalidFactoryContractError",
    ) -> None:
        self.selector = "0x7a44db95"
        self.signature = "InvalidFactory()"

    def decode_error_data(  # type: ignore
        self: "IHyperdriveGovernedRegistryInvalidFactoryContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "InvalidFactory"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IHyperdriveGovernedRegistryInvalidFactoryContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "InvalidFactory"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IHyperdriveGovernedRegistryInvalidIndexesContractError:
    """ContractError for InvalidIndexes."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IHyperdriveGovernedRegistryInvalidIndexesContractError",
    ) -> None:
        self.selector = "0x764e6b56"
        self.signature = "InvalidIndexes()"

    def decode_error_data(  # type: ignore
        self: "IHyperdriveGovernedRegistryInvalidIndexesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "InvalidIndexes"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IHyperdriveGovernedRegistryInvalidIndexesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "InvalidIndexes"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IHyperdriveGovernedRegistryUnauthorizedContractError:
    """ContractError for Unauthorized."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IHyperdriveGovernedRegistryUnauthorizedContractError",
    ) -> None:
        self.selector = "0x82b42900"
        self.signature = "Unauthorized()"

    def decode_error_data(  # type: ignore
        self: "IHyperdriveGovernedRegistryUnauthorizedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "Unauthorized"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IHyperdriveGovernedRegistryUnauthorizedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ihyperdrivegovernedregistry_abi
                if item.get("name") == "Unauthorized"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IHyperdriveGovernedRegistryContractErrors:
    """ContractErrors for the IHyperdriveGovernedRegistry contract."""

    EndIndexTooLarge: IHyperdriveGovernedRegistryEndIndexTooLargeContractError

    InputLengthMismatch: (
        IHyperdriveGovernedRegistryInputLengthMismatchContractError
    )

    InvalidFactory: IHyperdriveGovernedRegistryInvalidFactoryContractError

    InvalidIndexes: IHyperdriveGovernedRegistryInvalidIndexesContractError

    Unauthorized: IHyperdriveGovernedRegistryUnauthorizedContractError

    def __init__(
        self,
    ) -> None:
        self.EndIndexTooLarge = (
            IHyperdriveGovernedRegistryEndIndexTooLargeContractError()
        )
        self.InputLengthMismatch = (
            IHyperdriveGovernedRegistryInputLengthMismatchContractError()
        )
        self.InvalidFactory = (
            IHyperdriveGovernedRegistryInvalidFactoryContractError()
        )
        self.InvalidIndexes = (
            IHyperdriveGovernedRegistryInvalidIndexesContractError()
        )
        self.Unauthorized = (
            IHyperdriveGovernedRegistryUnauthorizedContractError()
        )

        self._all = [
            self.EndIndexTooLarge,
            self.InputLengthMismatch,
            self.InvalidFactory,
            self.InvalidIndexes,
            self.Unauthorized,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"IHyperdriveGovernedRegistry does not have a selector matching {selector}"
        )


ihyperdrivegovernedregistry_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "admin",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoriesInRange",
            "inputs": [
                {
                    "name": "_startIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_endIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryAtIndex",
            "inputs": [
                {"name": "_index", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfo",
            "inputs": [
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfo",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        }
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfoWithMetadata",
            "inputs": [
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfoWithMetadata",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfos",
            "inputs": [
                {
                    "name": "__factories",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfo[]",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        }
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfosWithMetadata",
            "inputs": [
                {
                    "name": "__factories",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfoWithMetadata[]",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [
                {"name": "_index", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfo",
            "inputs": [
                {
                    "name": "_instance",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfo",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "factory",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfoWithMetadata",
            "inputs": [
                {
                    "name": "_instance",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfoWithMetadata",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "factory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfos",
            "inputs": [
                {
                    "name": "__instances",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfo[]",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "factory",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfosWithMetadata",
            "inputs": [
                {
                    "name": "__instances",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfoWithMetadata[]",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "factory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {
                    "name": "_startIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_endIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfFactories",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setFactoryInfo",
            "inputs": [
                {
                    "name": "__factories",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "_data",
                    "type": "uint128[]",
                    "internalType": "uint128[]",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setInstanceInfo",
            "inputs": [
                {
                    "name": "__instances",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "_data",
                    "type": "uint128[]",
                    "internalType": "uint128[]",
                },
                {
                    "name": "__factories",
                    "type": "address[]",
                    "internalType": "address[]",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateAdmin",
            "inputs": [
                {"name": "_admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "event",
            "name": "AdminUpdated",
            "inputs": [
                {
                    "name": "admin",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FactoryInfoUpdated",
            "inputs": [
                {
                    "name": "factory",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "data",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "InstanceInfoUpdated",
            "inputs": [
                {
                    "name": "instance",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "data",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "factory",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "EndIndexTooLarge", "inputs": []},
        {"type": "error", "name": "InputLengthMismatch", "inputs": []},
        {"type": "error", "name": "InvalidFactory", "inputs": []},
        {"type": "error", "name": "InvalidIndexes", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
    ],
)


class IHyperdriveGovernedRegistryContract(Contract):
    """A web3.py Contract class for the IHyperdriveGovernedRegistry contract."""

    abi: ABI = ihyperdrivegovernedregistry_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = IHyperdriveGovernedRegistryContractFunctions(ihyperdrivegovernedregistry_abi, self.w3, address)  # type: ignore
            self.events = IHyperdriveGovernedRegistryContractEvents(ihyperdrivegovernedregistry_abi, self.w3, address)  # type: ignore
            self.errors = IHyperdriveGovernedRegistryContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: IHyperdriveGovernedRegistryContractEvents

    errors: IHyperdriveGovernedRegistryContractErrors = (
        IHyperdriveGovernedRegistryContractErrors()
    )

    functions: IHyperdriveGovernedRegistryContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IHyperdriveGovernedRegistryContractFunctions(
            ihyperdrivegovernedregistry_abi, w3, None
        )
        contract.errors = IHyperdriveGovernedRegistryContractErrors()

        return contract
