"""A web3.py Contract class for the DeployerCoordinatorTest contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast, overload

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import (
    ABI,
    ABIFunction,
    BlockIdentifier,
    CallOverride,
    EventData,
    TxParams,
)

from .StdInvariantTypes import FuzzInterface, FuzzSelector
from .utilities import (
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)

structs = {
    "FuzzSelector": FuzzSelector,
    "FuzzInterface": FuzzInterface,
}


class DeployerCoordinatorTestIS_TESTContractFunction(ContractFunction):
    """ContractFunction for the IS_TEST method."""

    def __call__(self) -> DeployerCoordinatorTestIS_TESTContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestCreateUserContractFunction(ContractFunction):
    """ContractFunction for the createUser method."""

    def __call__(self, name: str) -> DeployerCoordinatorTestCreateUserContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(name))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestExcludeArtifactsContractFunction(ContractFunction):
    """ContractFunction for the excludeArtifacts method."""

    def __call__(self) -> DeployerCoordinatorTestExcludeArtifactsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestExcludeContractsContractFunction(ContractFunction):
    """ContractFunction for the excludeContracts method."""

    def __call__(self) -> DeployerCoordinatorTestExcludeContractsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestExcludeSendersContractFunction(ContractFunction):
    """ContractFunction for the excludeSenders method."""

    def __call__(self) -> DeployerCoordinatorTestExcludeSendersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestFailedContractFunction(ContractFunction):
    """ContractFunction for the failed method."""

    def __call__(self) -> DeployerCoordinatorTestFailedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestSetUpContractFunction(ContractFunction):
    """ContractFunction for the setUp method."""

    def __call__(self) -> DeployerCoordinatorTestSetUpContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTargetArtifactSelectorsContractFunction(
    ContractFunction
):
    """ContractFunction for the targetArtifactSelectors method."""

    def __call__(self) -> DeployerCoordinatorTestTargetArtifactSelectorsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FuzzSelector]:
        """returns list[FuzzSelector]."""
        # Define the expected return types from the smart contract call

        return_types = list[FuzzSelector]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class DeployerCoordinatorTestTargetArtifactsContractFunction(ContractFunction):
    """ContractFunction for the targetArtifacts method."""

    def __call__(self) -> DeployerCoordinatorTestTargetArtifactsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestTargetContractsContractFunction(ContractFunction):
    """ContractFunction for the targetContracts method."""

    def __call__(self) -> DeployerCoordinatorTestTargetContractsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestTargetInterfacesContractFunction(ContractFunction):
    """ContractFunction for the targetInterfaces method."""

    def __call__(self) -> DeployerCoordinatorTestTargetInterfacesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FuzzInterface]:
        """returns list[FuzzInterface]."""
        # Define the expected return types from the smart contract call

        return_types = list[FuzzInterface]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class DeployerCoordinatorTestTargetSelectorsContractFunction(ContractFunction):
    """ContractFunction for the targetSelectors method."""

    def __call__(self) -> DeployerCoordinatorTestTargetSelectorsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FuzzSelector]:
        """returns list[FuzzSelector]."""
        # Define the expected return types from the smart contract call

        return_types = list[FuzzSelector]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class DeployerCoordinatorTestTargetSendersContractFunction(ContractFunction):
    """ContractFunction for the targetSenders method."""

    def __call__(self) -> DeployerCoordinatorTestTargetSendersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_deploymentAlreadyExists method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_deploymentDoesNotExist method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidCheckPoolConfigTarget0 method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidCheckPoolConfigTarget1 method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidSender method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_invalidTargetIndex method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_mismatchedConfig method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_mismatchedExtraData method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target1AlreadyDeployed method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target2AlreadyDeployed method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target3AlreadyDeployed method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_failure_target4AlreadyDeployed method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deployTarget_successContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deployTarget_success method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deployTarget_successContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_deploymentDoesNotExist method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_hyperdriveAlreadyDeployed method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget1 method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget2 method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget3 method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_incompleteDeploymentTarget4 method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_invalidCheckPoolConfig method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_invalidSender method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_mismatchedConfig method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_failure_mismatchedExtraData method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_deploy_successContractFunction(
    ContractFunction
):
    """ContractFunction for the test_deploy_success method."""

    def __call__(self) -> DeployerCoordinatorTestTest_deploy_successContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction(
    ContractFunction
):
    """ContractFunction for the test_initialize_failure_checkMessageValue method."""

    def __call__(self) -> DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction(
    ContractFunction
):
    """ContractFunction for the test_initialize_failure_hyperdriveIsNotDeployed method."""

    def __call__(self) -> DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction(
    ContractFunction
):
    """ContractFunction for the test_initialize_failure_invalidSender method."""

    def __call__(self) -> DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction(
    ContractFunction
):
    """ContractFunction for the test_initialize_success_asBase method."""

    def __call__(self) -> DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction(
    ContractFunction
):
    """ContractFunction for the test_initialize_success_asShares method."""

    def __call__(self) -> DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class DeployerCoordinatorTestWhaleTransferContractFunction0(ContractFunction):
    """ContractFunction for the whaleTransfer method."""

    def __call__(self, whale: str, token: str, to: str) -> DeployerCoordinatorTestWhaleTransferContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(whale), dataclass_to_tuple(token), dataclass_to_tuple(to))  # type: ignore
        return cast(DeployerCoordinatorTestWhaleTransferContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestWhaleTransferContractFunction1(ContractFunction):
    """ContractFunction for the whaleTransfer method."""

    def __call__(self, whale: str, token: str, amount: int, to: str) -> DeployerCoordinatorTestWhaleTransferContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(whale), dataclass_to_tuple(token), dataclass_to_tuple(amount), dataclass_to_tuple(to))  # type: ignore
        return cast(DeployerCoordinatorTestWhaleTransferContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class DeployerCoordinatorTestWhaleTransferContractFunction(ContractFunction):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, whale: str, token: str, to: str) -> DeployerCoordinatorTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> DeployerCoordinatorTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> DeployerCoordinatorTestWhaleTransferContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class DeployerCoordinatorTestContractFunctions(ContractFunctions):
    """ContractFunctions for the DeployerCoordinatorTest contract."""

    IS_TEST: DeployerCoordinatorTestIS_TESTContractFunction

    createUser: DeployerCoordinatorTestCreateUserContractFunction

    excludeArtifacts: DeployerCoordinatorTestExcludeArtifactsContractFunction

    excludeContracts: DeployerCoordinatorTestExcludeContractsContractFunction

    excludeSenders: DeployerCoordinatorTestExcludeSendersContractFunction

    failed: DeployerCoordinatorTestFailedContractFunction

    setUp: DeployerCoordinatorTestSetUpContractFunction

    targetArtifactSelectors: (
        DeployerCoordinatorTestTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: DeployerCoordinatorTestTargetArtifactsContractFunction

    targetContracts: DeployerCoordinatorTestTargetContractsContractFunction

    targetInterfaces: DeployerCoordinatorTestTargetInterfacesContractFunction

    targetSelectors: DeployerCoordinatorTestTargetSelectorsContractFunction

    targetSenders: DeployerCoordinatorTestTargetSendersContractFunction

    test_deployTarget_failure_deploymentAlreadyExists: DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction

    test_deployTarget_failure_deploymentDoesNotExist: DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction

    test_deployTarget_failure_invalidCheckPoolConfigTarget0: DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction

    test_deployTarget_failure_invalidCheckPoolConfigTarget1: DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction

    test_deployTarget_failure_invalidSender: DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction

    test_deployTarget_failure_invalidTargetIndex: DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction

    test_deployTarget_failure_mismatchedConfig: DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction

    test_deployTarget_failure_mismatchedExtraData: DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction

    test_deployTarget_failure_target1AlreadyDeployed: DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction

    test_deployTarget_failure_target2AlreadyDeployed: DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction

    test_deployTarget_failure_target3AlreadyDeployed: DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction

    test_deployTarget_failure_target4AlreadyDeployed: DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction

    test_deployTarget_success: (
        DeployerCoordinatorTestTest_deployTarget_successContractFunction
    )

    test_deploy_failure_deploymentDoesNotExist: DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction

    test_deploy_failure_hyperdriveAlreadyDeployed: DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction

    test_deploy_failure_incompleteDeploymentTarget1: DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction

    test_deploy_failure_incompleteDeploymentTarget2: DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction

    test_deploy_failure_incompleteDeploymentTarget3: DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction

    test_deploy_failure_incompleteDeploymentTarget4: DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction

    test_deploy_failure_invalidCheckPoolConfig: DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction

    test_deploy_failure_invalidSender: (
        DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction
    )

    test_deploy_failure_mismatchedConfig: DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction

    test_deploy_failure_mismatchedExtraData: DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction

    test_deploy_success: (
        DeployerCoordinatorTestTest_deploy_successContractFunction
    )

    test_initialize_failure_checkMessageValue: DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction

    test_initialize_failure_hyperdriveIsNotDeployed: DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction

    test_initialize_failure_invalidSender: DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction

    test_initialize_success_asBase: (
        DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction
    )

    test_initialize_success_asShares: (
        DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction
    )

    whaleTransfer: DeployerCoordinatorTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = DeployerCoordinatorTestIS_TESTContractFunction.factory(
            "IS_TEST",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="IS_TEST",
        )
        self.createUser = (
            DeployerCoordinatorTestCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="createUser",
            )
        )
        self.excludeArtifacts = (
            DeployerCoordinatorTestExcludeArtifactsContractFunction.factory(
                "excludeArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="excludeArtifacts",
            )
        )
        self.excludeContracts = (
            DeployerCoordinatorTestExcludeContractsContractFunction.factory(
                "excludeContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="excludeContracts",
            )
        )
        self.excludeSenders = (
            DeployerCoordinatorTestExcludeSendersContractFunction.factory(
                "excludeSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="excludeSenders",
            )
        )
        self.failed = DeployerCoordinatorTestFailedContractFunction.factory(
            "failed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="failed",
        )
        self.setUp = DeployerCoordinatorTestSetUpContractFunction.factory(
            "setUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setUp",
        )
        self.targetArtifactSelectors = DeployerCoordinatorTestTargetArtifactSelectorsContractFunction.factory(
            "targetArtifactSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="targetArtifactSelectors",
        )
        self.targetArtifacts = (
            DeployerCoordinatorTestTargetArtifactsContractFunction.factory(
                "targetArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="targetArtifacts",
            )
        )
        self.targetContracts = (
            DeployerCoordinatorTestTargetContractsContractFunction.factory(
                "targetContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="targetContracts",
            )
        )
        self.targetInterfaces = (
            DeployerCoordinatorTestTargetInterfacesContractFunction.factory(
                "targetInterfaces",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="targetInterfaces",
            )
        )
        self.targetSelectors = (
            DeployerCoordinatorTestTargetSelectorsContractFunction.factory(
                "targetSelectors",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="targetSelectors",
            )
        )
        self.targetSenders = (
            DeployerCoordinatorTestTargetSendersContractFunction.factory(
                "targetSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="targetSenders",
            )
        )
        self.test_deployTarget_failure_deploymentAlreadyExists = DeployerCoordinatorTestTest_deployTarget_failure_deploymentAlreadyExistsContractFunction.factory(
            "test_deployTarget_failure_deploymentAlreadyExists",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_deploymentAlreadyExists",
        )
        self.test_deployTarget_failure_deploymentDoesNotExist = DeployerCoordinatorTestTest_deployTarget_failure_deploymentDoesNotExistContractFunction.factory(
            "test_deployTarget_failure_deploymentDoesNotExist",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_deploymentDoesNotExist",
        )
        self.test_deployTarget_failure_invalidCheckPoolConfigTarget0 = DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget0ContractFunction.factory(
            "test_deployTarget_failure_invalidCheckPoolConfigTarget0",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_invalidCheckPoolConfigTarget0",
        )
        self.test_deployTarget_failure_invalidCheckPoolConfigTarget1 = DeployerCoordinatorTestTest_deployTarget_failure_invalidCheckPoolConfigTarget1ContractFunction.factory(
            "test_deployTarget_failure_invalidCheckPoolConfigTarget1",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_invalidCheckPoolConfigTarget1",
        )
        self.test_deployTarget_failure_invalidSender = DeployerCoordinatorTestTest_deployTarget_failure_invalidSenderContractFunction.factory(
            "test_deployTarget_failure_invalidSender",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_invalidSender",
        )
        self.test_deployTarget_failure_invalidTargetIndex = DeployerCoordinatorTestTest_deployTarget_failure_invalidTargetIndexContractFunction.factory(
            "test_deployTarget_failure_invalidTargetIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_invalidTargetIndex",
        )
        self.test_deployTarget_failure_mismatchedConfig = DeployerCoordinatorTestTest_deployTarget_failure_mismatchedConfigContractFunction.factory(
            "test_deployTarget_failure_mismatchedConfig",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_mismatchedConfig",
        )
        self.test_deployTarget_failure_mismatchedExtraData = DeployerCoordinatorTestTest_deployTarget_failure_mismatchedExtraDataContractFunction.factory(
            "test_deployTarget_failure_mismatchedExtraData",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_mismatchedExtraData",
        )
        self.test_deployTarget_failure_target1AlreadyDeployed = DeployerCoordinatorTestTest_deployTarget_failure_target1AlreadyDeployedContractFunction.factory(
            "test_deployTarget_failure_target1AlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_target1AlreadyDeployed",
        )
        self.test_deployTarget_failure_target2AlreadyDeployed = DeployerCoordinatorTestTest_deployTarget_failure_target2AlreadyDeployedContractFunction.factory(
            "test_deployTarget_failure_target2AlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_target2AlreadyDeployed",
        )
        self.test_deployTarget_failure_target3AlreadyDeployed = DeployerCoordinatorTestTest_deployTarget_failure_target3AlreadyDeployedContractFunction.factory(
            "test_deployTarget_failure_target3AlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_target3AlreadyDeployed",
        )
        self.test_deployTarget_failure_target4AlreadyDeployed = DeployerCoordinatorTestTest_deployTarget_failure_target4AlreadyDeployedContractFunction.factory(
            "test_deployTarget_failure_target4AlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_failure_target4AlreadyDeployed",
        )
        self.test_deployTarget_success = DeployerCoordinatorTestTest_deployTarget_successContractFunction.factory(
            "test_deployTarget_success",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deployTarget_success",
        )
        self.test_deploy_failure_deploymentDoesNotExist = DeployerCoordinatorTestTest_deploy_failure_deploymentDoesNotExistContractFunction.factory(
            "test_deploy_failure_deploymentDoesNotExist",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_deploymentDoesNotExist",
        )
        self.test_deploy_failure_hyperdriveAlreadyDeployed = DeployerCoordinatorTestTest_deploy_failure_hyperdriveAlreadyDeployedContractFunction.factory(
            "test_deploy_failure_hyperdriveAlreadyDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_hyperdriveAlreadyDeployed",
        )
        self.test_deploy_failure_incompleteDeploymentTarget1 = DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget1ContractFunction.factory(
            "test_deploy_failure_incompleteDeploymentTarget1",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_incompleteDeploymentTarget1",
        )
        self.test_deploy_failure_incompleteDeploymentTarget2 = DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget2ContractFunction.factory(
            "test_deploy_failure_incompleteDeploymentTarget2",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_incompleteDeploymentTarget2",
        )
        self.test_deploy_failure_incompleteDeploymentTarget3 = DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget3ContractFunction.factory(
            "test_deploy_failure_incompleteDeploymentTarget3",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_incompleteDeploymentTarget3",
        )
        self.test_deploy_failure_incompleteDeploymentTarget4 = DeployerCoordinatorTestTest_deploy_failure_incompleteDeploymentTarget4ContractFunction.factory(
            "test_deploy_failure_incompleteDeploymentTarget4",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_incompleteDeploymentTarget4",
        )
        self.test_deploy_failure_invalidCheckPoolConfig = DeployerCoordinatorTestTest_deploy_failure_invalidCheckPoolConfigContractFunction.factory(
            "test_deploy_failure_invalidCheckPoolConfig",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_invalidCheckPoolConfig",
        )
        self.test_deploy_failure_invalidSender = DeployerCoordinatorTestTest_deploy_failure_invalidSenderContractFunction.factory(
            "test_deploy_failure_invalidSender",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_invalidSender",
        )
        self.test_deploy_failure_mismatchedConfig = DeployerCoordinatorTestTest_deploy_failure_mismatchedConfigContractFunction.factory(
            "test_deploy_failure_mismatchedConfig",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_mismatchedConfig",
        )
        self.test_deploy_failure_mismatchedExtraData = DeployerCoordinatorTestTest_deploy_failure_mismatchedExtraDataContractFunction.factory(
            "test_deploy_failure_mismatchedExtraData",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_deploy_failure_mismatchedExtraData",
        )
        self.test_deploy_success = (
            DeployerCoordinatorTestTest_deploy_successContractFunction.factory(
                "test_deploy_success",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="test_deploy_success",
            )
        )
        self.test_initialize_failure_checkMessageValue = DeployerCoordinatorTestTest_initialize_failure_checkMessageValueContractFunction.factory(
            "test_initialize_failure_checkMessageValue",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_initialize_failure_checkMessageValue",
        )
        self.test_initialize_failure_hyperdriveIsNotDeployed = DeployerCoordinatorTestTest_initialize_failure_hyperdriveIsNotDeployedContractFunction.factory(
            "test_initialize_failure_hyperdriveIsNotDeployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_initialize_failure_hyperdriveIsNotDeployed",
        )
        self.test_initialize_failure_invalidSender = DeployerCoordinatorTestTest_initialize_failure_invalidSenderContractFunction.factory(
            "test_initialize_failure_invalidSender",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_initialize_failure_invalidSender",
        )
        self.test_initialize_success_asBase = DeployerCoordinatorTestTest_initialize_success_asBaseContractFunction.factory(
            "test_initialize_success_asBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_initialize_success_asBase",
        )
        self.test_initialize_success_asShares = DeployerCoordinatorTestTest_initialize_success_asSharesContractFunction.factory(
            "test_initialize_success_asShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="test_initialize_success_asShares",
        )
        self.whaleTransfer = (
            DeployerCoordinatorTestWhaleTransferContractFunction.factory(
                "whaleTransfer",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="whaleTransfer",
            )
        )


class DeployerCoordinatorTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestAddLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestAddLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestAddLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestAddLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestApprovalContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestApprovalContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestApprovalContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestApprovalContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestApprovalForAllContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestApprovalForAllContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestApprovalForAllContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestApprovalForAllContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestCloseLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestCloseLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestCloseLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestCloseLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestCloseShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestCloseShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestCloseShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestCloseShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestCollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestCollectGovernanceFeeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestCollectGovernanceFeeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestCollectGovernanceFeeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestCollectGovernanceFeeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestCreateCheckpointContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestCreateCheckpointContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestCreateCheckpointContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestCreateCheckpointContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestDeployedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestDeployedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestDeployedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestDeployedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestInitializeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestInitializeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestInitializeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestInitializeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestOpenLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestOpenLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestOpenLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestOpenLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestOpenShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestOpenShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestOpenShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestOpenShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestPauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestPauseStatusUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestPauseStatusUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestPauseStatusUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestPauseStatusUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestRemoveLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestRemoveLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestRemoveLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestRemoveLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestSweepContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestSweepContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestSweepContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestSweepContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestTransferSingleContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestTransferSingleContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestTransferSingleContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestTransferSingleContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLogContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLogContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLogContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLogContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_addressContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_addressContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_addressContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_addressContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_arrayContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_arrayContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_arrayContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_arrayContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_bytesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_bytesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_bytesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_bytesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_bytes32ContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_bytes32ContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_bytes32ContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_bytes32ContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_intContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_intContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_intContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_intContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_addressContractEvent(ContractEvent):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_addressContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_addressContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_addressContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_addressContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_arrayContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_arrayContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_arrayContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_arrayContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_bytesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_bytesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_bytesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_bytesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_bytes32ContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_bytes32ContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_bytes32ContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_bytes32ContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_decimal_intContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_decimal_intContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_decimal_intContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_decimal_intContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_decimal_intContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_decimal_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_decimal_uintContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_decimal_uintContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_decimal_uintContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_decimal_uintContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_intContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_intContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_intContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_intContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_stringContractEvent(ContractEvent):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_stringContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_stringContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_stringContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_stringContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_uintContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_uintContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_named_uintContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_named_uintContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_stringContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_stringContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_stringContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_stringContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLog_uintContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_uintContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLog_uintContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLog_uintContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "DeployerCoordinatorTestLogsContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["DeployerCoordinatorTestLogsContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                block_hash=block_hash,
            ),
        )

    def create_filter(  # type: ignore
        self: "DeployerCoordinatorTestLogsContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["DeployerCoordinatorTestLogsContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                fromBlock=fromBlock,
                toBlock=toBlock,
                address=address,
                topics=topics,
            ),
        )


class DeployerCoordinatorTestContractEvents(ContractEvents):
    """ContractEvents for the DeployerCoordinatorTest contract."""

    AddLiquidity: DeployerCoordinatorTestAddLiquidityContractEvent

    Approval: DeployerCoordinatorTestApprovalContractEvent

    ApprovalForAll: DeployerCoordinatorTestApprovalForAllContractEvent

    CloseLong: DeployerCoordinatorTestCloseLongContractEvent

    CloseShort: DeployerCoordinatorTestCloseShortContractEvent

    CollectGovernanceFee: (
        DeployerCoordinatorTestCollectGovernanceFeeContractEvent
    )

    CreateCheckpoint: DeployerCoordinatorTestCreateCheckpointContractEvent

    Deployed: DeployerCoordinatorTestDeployedContractEvent

    Initialize: DeployerCoordinatorTestInitializeContractEvent

    OpenLong: DeployerCoordinatorTestOpenLongContractEvent

    OpenShort: DeployerCoordinatorTestOpenShortContractEvent

    PauseStatusUpdated: DeployerCoordinatorTestPauseStatusUpdatedContractEvent

    RedeemWithdrawalShares: (
        DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent
    )

    RemoveLiquidity: DeployerCoordinatorTestRemoveLiquidityContractEvent

    Sweep: DeployerCoordinatorTestSweepContractEvent

    TransferSingle: DeployerCoordinatorTestTransferSingleContractEvent

    log: DeployerCoordinatorTestLogContractEvent

    log_address: DeployerCoordinatorTestLog_addressContractEvent

    log_array: DeployerCoordinatorTestLog_arrayContractEvent

    log_bytes: DeployerCoordinatorTestLog_bytesContractEvent

    log_bytes32: DeployerCoordinatorTestLog_bytes32ContractEvent

    log_int: DeployerCoordinatorTestLog_intContractEvent

    log_named_address: DeployerCoordinatorTestLog_named_addressContractEvent

    log_named_array: DeployerCoordinatorTestLog_named_arrayContractEvent

    log_named_bytes: DeployerCoordinatorTestLog_named_bytesContractEvent

    log_named_bytes32: DeployerCoordinatorTestLog_named_bytes32ContractEvent

    log_named_decimal_int: (
        DeployerCoordinatorTestLog_named_decimal_intContractEvent
    )

    log_named_decimal_uint: (
        DeployerCoordinatorTestLog_named_decimal_uintContractEvent
    )

    log_named_int: DeployerCoordinatorTestLog_named_intContractEvent

    log_named_string: DeployerCoordinatorTestLog_named_stringContractEvent

    log_named_uint: DeployerCoordinatorTestLog_named_uintContractEvent

    log_string: DeployerCoordinatorTestLog_stringContractEvent

    log_uint: DeployerCoordinatorTestLog_uintContractEvent

    logs: DeployerCoordinatorTestLogsContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            DeployerCoordinatorTestAddLiquidityContractEvent,
            DeployerCoordinatorTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            DeployerCoordinatorTestApprovalContractEvent,
            DeployerCoordinatorTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            DeployerCoordinatorTestApprovalForAllContractEvent,
            DeployerCoordinatorTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            DeployerCoordinatorTestCloseLongContractEvent,
            DeployerCoordinatorTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            DeployerCoordinatorTestCloseShortContractEvent,
            DeployerCoordinatorTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            DeployerCoordinatorTestCollectGovernanceFeeContractEvent,
            DeployerCoordinatorTestCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            DeployerCoordinatorTestCreateCheckpointContractEvent,
            DeployerCoordinatorTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Deployed = cast(
            DeployerCoordinatorTestDeployedContractEvent,
            DeployerCoordinatorTestDeployedContractEvent.factory(
                "Deployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Deployed",
            ),
        )
        self.Initialize = cast(
            DeployerCoordinatorTestInitializeContractEvent,
            DeployerCoordinatorTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            DeployerCoordinatorTestOpenLongContractEvent,
            DeployerCoordinatorTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            DeployerCoordinatorTestOpenShortContractEvent,
            DeployerCoordinatorTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            DeployerCoordinatorTestPauseStatusUpdatedContractEvent,
            DeployerCoordinatorTestPauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent,
            DeployerCoordinatorTestRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            DeployerCoordinatorTestRemoveLiquidityContractEvent,
            DeployerCoordinatorTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            DeployerCoordinatorTestSweepContractEvent,
            DeployerCoordinatorTestSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            DeployerCoordinatorTestTransferSingleContractEvent,
            DeployerCoordinatorTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )
        self.log = cast(
            DeployerCoordinatorTestLogContractEvent,
            DeployerCoordinatorTestLogContractEvent.factory(
                "log",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log",
            ),
        )
        self.log_address = cast(
            DeployerCoordinatorTestLog_addressContractEvent,
            DeployerCoordinatorTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            ),
        )
        self.log_array = cast(
            DeployerCoordinatorTestLog_arrayContractEvent,
            DeployerCoordinatorTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            ),
        )
        self.log_bytes = cast(
            DeployerCoordinatorTestLog_bytesContractEvent,
            DeployerCoordinatorTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            ),
        )
        self.log_bytes32 = cast(
            DeployerCoordinatorTestLog_bytes32ContractEvent,
            DeployerCoordinatorTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            ),
        )
        self.log_int = cast(
            DeployerCoordinatorTestLog_intContractEvent,
            DeployerCoordinatorTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            ),
        )
        self.log_named_address = cast(
            DeployerCoordinatorTestLog_named_addressContractEvent,
            DeployerCoordinatorTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            ),
        )
        self.log_named_array = cast(
            DeployerCoordinatorTestLog_named_arrayContractEvent,
            DeployerCoordinatorTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            ),
        )
        self.log_named_bytes = cast(
            DeployerCoordinatorTestLog_named_bytesContractEvent,
            DeployerCoordinatorTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            ),
        )
        self.log_named_bytes32 = cast(
            DeployerCoordinatorTestLog_named_bytes32ContractEvent,
            DeployerCoordinatorTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            ),
        )
        self.log_named_decimal_int = cast(
            DeployerCoordinatorTestLog_named_decimal_intContractEvent,
            DeployerCoordinatorTestLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            ),
        )
        self.log_named_decimal_uint = cast(
            DeployerCoordinatorTestLog_named_decimal_uintContractEvent,
            DeployerCoordinatorTestLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            ),
        )
        self.log_named_int = cast(
            DeployerCoordinatorTestLog_named_intContractEvent,
            DeployerCoordinatorTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            ),
        )
        self.log_named_string = cast(
            DeployerCoordinatorTestLog_named_stringContractEvent,
            DeployerCoordinatorTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            ),
        )
        self.log_named_uint = cast(
            DeployerCoordinatorTestLog_named_uintContractEvent,
            DeployerCoordinatorTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            ),
        )
        self.log_string = cast(
            DeployerCoordinatorTestLog_stringContractEvent,
            DeployerCoordinatorTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            ),
        )
        self.log_uint = cast(
            DeployerCoordinatorTestLog_uintContractEvent,
            DeployerCoordinatorTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            ),
        )
        self.logs = cast(
            DeployerCoordinatorTestLogsContractEvent,
            DeployerCoordinatorTestLogsContractEvent.factory(
                "logs",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="logs",
            ),
        )


class DeployerCoordinatorTestLnInvalidInputContractError:
    """ContractError for LnInvalidInput."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "DeployerCoordinatorTestLnInvalidInputContractError",
    ) -> None:
        self.selector = "0xe61b4975"
        self.signature = "LnInvalidInput()"

    def decode_error_data(  # type: ignore
        self: "DeployerCoordinatorTestLnInvalidInputContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in deployercoordinatortest_abi
                if item.get("name") == "LnInvalidInput"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["DeployerCoordinatorTestLnInvalidInputContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in deployercoordinatortest_abi
                if item.get("name") == "LnInvalidInput"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class DeployerCoordinatorTestUnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "DeployerCoordinatorTestUnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    def decode_error_data(  # type: ignore
        self: "DeployerCoordinatorTestUnsafeCastToInt256ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in deployercoordinatortest_abi
                if item.get("name") == "UnsafeCastToInt256"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["DeployerCoordinatorTestUnsafeCastToInt256ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in deployercoordinatortest_abi
                if item.get("name") == "UnsafeCastToInt256"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class DeployerCoordinatorTestWhaleBalanceExceededContractError:
    """ContractError for WhaleBalanceExceeded."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "DeployerCoordinatorTestWhaleBalanceExceededContractError",
    ) -> None:
        self.selector = "0xc4649d28"
        self.signature = "WhaleBalanceExceeded()"

    def decode_error_data(  # type: ignore
        self: "DeployerCoordinatorTestWhaleBalanceExceededContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in deployercoordinatortest_abi
                if item.get("name") == "WhaleBalanceExceeded"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["DeployerCoordinatorTestWhaleBalanceExceededContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in deployercoordinatortest_abi
                if item.get("name") == "WhaleBalanceExceeded"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class DeployerCoordinatorTestWhaleIsContractContractError:
    """ContractError for WhaleIsContract."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "DeployerCoordinatorTestWhaleIsContractContractError",
    ) -> None:
        self.selector = "0x98d85a67"
        self.signature = "WhaleIsContract()"

    def decode_error_data(  # type: ignore
        self: "DeployerCoordinatorTestWhaleIsContractContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in deployercoordinatortest_abi
                if item.get("name") == "WhaleIsContract"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["DeployerCoordinatorTestWhaleIsContractContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in deployercoordinatortest_abi
                if item.get("name") == "WhaleIsContract"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class DeployerCoordinatorTestContractErrors:
    """ContractErrors for the DeployerCoordinatorTest contract."""

    LnInvalidInput: DeployerCoordinatorTestLnInvalidInputContractError

    UnsafeCastToInt256: DeployerCoordinatorTestUnsafeCastToInt256ContractError

    WhaleBalanceExceeded: (
        DeployerCoordinatorTestWhaleBalanceExceededContractError
    )

    WhaleIsContract: DeployerCoordinatorTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.LnInvalidInput = (
            DeployerCoordinatorTestLnInvalidInputContractError()
        )
        self.UnsafeCastToInt256 = (
            DeployerCoordinatorTestUnsafeCastToInt256ContractError()
        )
        self.WhaleBalanceExceeded = (
            DeployerCoordinatorTestWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            DeployerCoordinatorTestWhaleIsContractContractError()
        )

        self._all = [
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"DeployerCoordinatorTest does not have a selector matching {selector}"
        )


deployercoordinatortest_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_deploymentAlreadyExists",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_deploymentDoesNotExist",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_invalidCheckPoolConfigTarget0",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_invalidCheckPoolConfigTarget1",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_invalidSender",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_invalidTargetIndex",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_mismatchedConfig",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_mismatchedExtraData",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_target1AlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_target2AlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_target3AlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_failure_target4AlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployTarget_success",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_deploymentDoesNotExist",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_hyperdriveAlreadyDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_incompleteDeploymentTarget1",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_incompleteDeploymentTarget2",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_incompleteDeploymentTarget3",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_incompleteDeploymentTarget4",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_invalidCheckPoolConfig",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_invalidSender",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_mismatchedConfig",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_failure_mismatchedExtraData",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deploy_success",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_failure_checkMessageValue",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_failure_hyperdriveIsNotDeployed",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_failure_invalidSender",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_success_asBase",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_initialize_success_asShares",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class DeployerCoordinatorTestContract(Contract):
    """A web3.py Contract class for the DeployerCoordinatorTest contract."""

    abi: ABI = deployercoordinatortest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = DeployerCoordinatorTestContractFunctions(deployercoordinatortest_abi, self.w3, address)  # type: ignore
            self.events = DeployerCoordinatorTestContractEvents(deployercoordinatortest_abi, self.w3, address)  # type: ignore
            self.errors = DeployerCoordinatorTestContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: DeployerCoordinatorTestContractEvents

    errors: DeployerCoordinatorTestContractErrors = (
        DeployerCoordinatorTestContractErrors()
    )

    functions: DeployerCoordinatorTestContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = DeployerCoordinatorTestContractFunctions(
            deployercoordinatortest_abi, w3, None
        )
        contract.errors = DeployerCoordinatorTestContractErrors()

        return contract
