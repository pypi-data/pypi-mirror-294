"""Dataclasses for all structs in the MorphoBlueTarget2 contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name
# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments
# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import
# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return
from __future__ import annotations

from dataclasses import dataclass

from web3.types import ABIEvent, ABIEventParams

AddLiquidity = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="provider", type="address"),
        ABIEventParams(indexed=False, name="lpAmount", type="uint256"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
        ABIEventParams(indexed=False, name="lpSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="extraData", type="bytes"),
    ],
    name="AddLiquidity",
    type="event",
)

Approval = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="owner", type="address"),
        ABIEventParams(indexed=True, name="spender", type="address"),
        ABIEventParams(indexed=False, name="value", type="uint256"),
    ],
    name="Approval",
    type="event",
)

ApprovalForAll = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="account", type="address"),
        ABIEventParams(indexed=True, name="operator", type="address"),
        ABIEventParams(indexed=False, name="approved", type="bool"),
    ],
    name="ApprovalForAll",
    type="event",
)

CloseLong = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="trader", type="address"),
        ABIEventParams(indexed=True, name="destination", type="address"),
        ABIEventParams(indexed=True, name="assetId", type="uint256"),
        ABIEventParams(indexed=False, name="maturityTime", type="uint256"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
        ABIEventParams(indexed=False, name="bondAmount", type="uint256"),
        ABIEventParams(indexed=False, name="extraData", type="bytes"),
    ],
    name="CloseLong",
    type="event",
)

CloseShort = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="trader", type="address"),
        ABIEventParams(indexed=True, name="destination", type="address"),
        ABIEventParams(indexed=True, name="assetId", type="uint256"),
        ABIEventParams(indexed=False, name="maturityTime", type="uint256"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
        ABIEventParams(indexed=False, name="basePayment", type="uint256"),
        ABIEventParams(indexed=False, name="bondAmount", type="uint256"),
        ABIEventParams(indexed=False, name="extraData", type="bytes"),
    ],
    name="CloseShort",
    type="event",
)

CollectGovernanceFee = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="collector", type="address"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
    ],
    name="CollectGovernanceFee",
    type="event",
)

CreateCheckpoint = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="checkpointTime", type="uint256"),
        ABIEventParams(
            indexed=False, name="checkpointVaultSharePrice", type="uint256"
        ),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="maturedShorts", type="uint256"),
        ABIEventParams(indexed=False, name="maturedLongs", type="uint256"),
        ABIEventParams(indexed=False, name="lpSharePrice", type="uint256"),
    ],
    name="CreateCheckpoint",
    type="event",
)

Initialize = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="provider", type="address"),
        ABIEventParams(indexed=False, name="lpAmount", type="uint256"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
        ABIEventParams(indexed=False, name="apr", type="uint256"),
        ABIEventParams(indexed=False, name="extraData", type="bytes"),
    ],
    name="Initialize",
    type="event",
)

OpenLong = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="trader", type="address"),
        ABIEventParams(indexed=True, name="assetId", type="uint256"),
        ABIEventParams(indexed=False, name="maturityTime", type="uint256"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
        ABIEventParams(indexed=False, name="bondAmount", type="uint256"),
        ABIEventParams(indexed=False, name="extraData", type="bytes"),
    ],
    name="OpenLong",
    type="event",
)

OpenShort = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="trader", type="address"),
        ABIEventParams(indexed=True, name="assetId", type="uint256"),
        ABIEventParams(indexed=False, name="maturityTime", type="uint256"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
        ABIEventParams(indexed=False, name="baseProceeds", type="uint256"),
        ABIEventParams(indexed=False, name="bondAmount", type="uint256"),
        ABIEventParams(indexed=False, name="extraData", type="bytes"),
    ],
    name="OpenShort",
    type="event",
)

PauseStatusUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="isPaused", type="bool"),
    ],
    name="PauseStatusUpdated",
    type="event",
)

RedeemWithdrawalShares = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="provider", type="address"),
        ABIEventParams(indexed=True, name="destination", type="address"),
        ABIEventParams(
            indexed=False, name="withdrawalShareAmount", type="uint256"
        ),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
        ABIEventParams(indexed=False, name="extraData", type="bytes"),
    ],
    name="RedeemWithdrawalShares",
    type="event",
)

RemoveLiquidity = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="provider", type="address"),
        ABIEventParams(indexed=True, name="destination", type="address"),
        ABIEventParams(indexed=False, name="lpAmount", type="uint256"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="vaultSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="asBase", type="bool"),
        ABIEventParams(
            indexed=False, name="withdrawalShareAmount", type="uint256"
        ),
        ABIEventParams(indexed=False, name="lpSharePrice", type="uint256"),
        ABIEventParams(indexed=False, name="extraData", type="bytes"),
    ],
    name="RemoveLiquidity",
    type="event",
)

Sweep = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="collector", type="address"),
        ABIEventParams(indexed=True, name="target", type="address"),
    ],
    name="Sweep",
    type="event",
)

TransferSingle = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="operator", type="address"),
        ABIEventParams(indexed=True, name="from", type="address"),
        ABIEventParams(indexed=True, name="to", type="address"),
        ABIEventParams(indexed=False, name="id", type="uint256"),
        ABIEventParams(indexed=False, name="value", type="uint256"),
    ],
    name="TransferSingle",
    type="event",
)


@dataclass
class ErrorInfo:
    """Custom contract error information."""

    name: str
    selector: str
    signature: str
    inputs: list[ErrorParams]


@dataclass
class ErrorParams:
    """Parameter info for custom contract errors."""

    name: str
    solidity_type: str
    python_type: str


AddressEmptyCodeError = ErrorInfo(
    inputs=[
        ErrorParams(name="target", python_type="str", solidity_type="address"),
    ],
    name="AddressEmptyCode",
    selector="0x9996b315",
    signature="AddressEmptyCode(address)",
)

AddressInsufficientBalanceError = ErrorInfo(
    inputs=[
        ErrorParams(name="account", python_type="str", solidity_type="address"),
    ],
    name="AddressInsufficientBalance",
    selector="0xcd786059",
    signature="AddressInsufficientBalance(address)",
)

DistributeExcessIdleFailedError = ErrorInfo(
    inputs=[],
    name="DistributeExcessIdleFailed",
    selector="0x8bdf918d",
    signature="DistributeExcessIdleFailed()",
)

ExpInvalidExponentError = ErrorInfo(
    inputs=[],
    name="ExpInvalidExponent",
    selector="0x73a2d6b1",
    signature="ExpInvalidExponent()",
)

FailedInnerCallError = ErrorInfo(
    inputs=[],
    name="FailedInnerCall",
    selector="0x1425ea42",
    signature="FailedInnerCall()",
)

InsufficientLiquidityError = ErrorInfo(
    inputs=[],
    name="InsufficientLiquidity",
    selector="0xbb55fd27",
    signature="InsufficientLiquidity()",
)

InvalidTimestampError = ErrorInfo(
    inputs=[],
    name="InvalidTimestamp",
    selector="0xb7d09497",
    signature="InvalidTimestamp()",
)

LnInvalidInputError = ErrorInfo(
    inputs=[],
    name="LnInvalidInput",
    selector="0xe61b4975",
    signature="LnInvalidInput()",
)

MinimumSharePriceError = ErrorInfo(
    inputs=[],
    name="MinimumSharePrice",
    selector="0x42af972b",
    signature="MinimumSharePrice()",
)

MinimumTransactionAmountError = ErrorInfo(
    inputs=[],
    name="MinimumTransactionAmount",
    selector="0x423bbb46",
    signature="MinimumTransactionAmount()",
)

NotPayableError = ErrorInfo(
    inputs=[],
    name="NotPayable",
    selector="0x1574f9f3",
    signature="NotPayable()",
)

OutputLimitError = ErrorInfo(
    inputs=[],
    name="OutputLimit",
    selector="0xc9726517",
    signature="OutputLimit()",
)

PoolIsPausedError = ErrorInfo(
    inputs=[],
    name="PoolIsPaused",
    selector="0x21081abf",
    signature="PoolIsPaused()",
)

ReentrancyGuardReentrantCallError = ErrorInfo(
    inputs=[],
    name="ReentrancyGuardReentrantCall",
    selector="0x3ee5aeb5",
    signature="ReentrancyGuardReentrantCall()",
)

RestrictedZeroAddressError = ErrorInfo(
    inputs=[],
    name="RestrictedZeroAddress",
    selector="0xf0dd15fd",
    signature="RestrictedZeroAddress()",
)

SafeERC20FailedOperationError = ErrorInfo(
    inputs=[
        ErrorParams(name="token", python_type="str", solidity_type="address"),
    ],
    name="SafeERC20FailedOperation",
    selector="0x5274afe7",
    signature="SafeERC20FailedOperation(address)",
)

TransferFailedError = ErrorInfo(
    inputs=[],
    name="TransferFailed",
    selector="0x90b8ec18",
    signature="TransferFailed()",
)

UnsafeCastToInt128Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToInt128",
    selector="0xa5353be5",
    signature="UnsafeCastToInt128()",
)

UnsafeCastToInt256Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToInt256",
    selector="0x72dd4e02",
    signature="UnsafeCastToInt256()",
)

UnsafeCastToUint112Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToUint112",
    selector="0x10d62a2e",
    signature="UnsafeCastToUint112()",
)

UnsafeCastToUint128Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToUint128",
    selector="0x1e15f2a2",
    signature="UnsafeCastToUint128()",
)

UnsupportedTokenError = ErrorInfo(
    inputs=[],
    name="UnsupportedToken",
    selector="0x6a172882",
    signature="UnsupportedToken()",
)
