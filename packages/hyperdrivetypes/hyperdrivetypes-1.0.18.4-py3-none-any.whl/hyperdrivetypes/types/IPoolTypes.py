"""Dataclasses for all structs in the IPool contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name
# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments
# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import
# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return
from __future__ import annotations

from dataclasses import dataclass

from web3.types import ABIEvent, ABIEventParams

BackUnbacked = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=True, name="backer", type="address"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="fee", type="uint256"),
    ],
    name="BackUnbacked",
    type="event",
)

Borrow = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=False, name="user", type="address"),
        ABIEventParams(indexed=True, name="onBehalfOf", type="address"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="interestRateMode", type="uint8"),
        ABIEventParams(indexed=False, name="borrowRate", type="uint256"),
        ABIEventParams(indexed=True, name="referralCode", type="uint16"),
    ],
    name="Borrow",
    type="event",
)

FlashLoan = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="target", type="address"),
        ABIEventParams(indexed=False, name="initiator", type="address"),
        ABIEventParams(indexed=True, name="asset", type="address"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="interestRateMode", type="uint8"),
        ABIEventParams(indexed=False, name="premium", type="uint256"),
        ABIEventParams(indexed=True, name="referralCode", type="uint16"),
    ],
    name="FlashLoan",
    type="event",
)

IsolationModeTotalDebtUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="asset", type="address"),
        ABIEventParams(indexed=False, name="totalDebt", type="uint256"),
    ],
    name="IsolationModeTotalDebtUpdated",
    type="event",
)

LiquidationCall = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="collateralAsset", type="address"),
        ABIEventParams(indexed=True, name="debtAsset", type="address"),
        ABIEventParams(indexed=True, name="user", type="address"),
        ABIEventParams(indexed=False, name="debtToCover", type="uint256"),
        ABIEventParams(
            indexed=False, name="liquidatedCollateralAmount", type="uint256"
        ),
        ABIEventParams(indexed=False, name="liquidator", type="address"),
        ABIEventParams(indexed=False, name="receiveAToken", type="bool"),
    ],
    name="LiquidationCall",
    type="event",
)

MintUnbacked = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=False, name="user", type="address"),
        ABIEventParams(indexed=True, name="onBehalfOf", type="address"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=True, name="referralCode", type="uint16"),
    ],
    name="MintUnbacked",
    type="event",
)

MintedToTreasury = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=False, name="amountMinted", type="uint256"),
    ],
    name="MintedToTreasury",
    type="event",
)

RebalanceStableBorrowRate = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=True, name="user", type="address"),
    ],
    name="RebalanceStableBorrowRate",
    type="event",
)

Repay = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=True, name="user", type="address"),
        ABIEventParams(indexed=True, name="repayer", type="address"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=False, name="useATokens", type="bool"),
    ],
    name="Repay",
    type="event",
)

ReserveDataUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=False, name="liquidityRate", type="uint256"),
        ABIEventParams(indexed=False, name="stableBorrowRate", type="uint256"),
        ABIEventParams(
            indexed=False, name="variableBorrowRate", type="uint256"
        ),
        ABIEventParams(indexed=False, name="liquidityIndex", type="uint256"),
        ABIEventParams(
            indexed=False, name="variableBorrowIndex", type="uint256"
        ),
    ],
    name="ReserveDataUpdated",
    type="event",
)

ReserveUsedAsCollateralDisabled = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=True, name="user", type="address"),
    ],
    name="ReserveUsedAsCollateralDisabled",
    type="event",
)

ReserveUsedAsCollateralEnabled = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=True, name="user", type="address"),
    ],
    name="ReserveUsedAsCollateralEnabled",
    type="event",
)

Supply = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=False, name="user", type="address"),
        ABIEventParams(indexed=True, name="onBehalfOf", type="address"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
        ABIEventParams(indexed=True, name="referralCode", type="uint16"),
    ],
    name="Supply",
    type="event",
)

SwapBorrowRateMode = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=True, name="user", type="address"),
        ABIEventParams(indexed=False, name="interestRateMode", type="uint8"),
    ],
    name="SwapBorrowRateMode",
    type="event",
)

UserEModeSet = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="user", type="address"),
        ABIEventParams(indexed=False, name="categoryId", type="uint8"),
    ],
    name="UserEModeSet",
    type="event",
)

Withdraw = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="reserve", type="address"),
        ABIEventParams(indexed=True, name="user", type="address"),
        ABIEventParams(indexed=True, name="to", type="address"),
        ABIEventParams(indexed=False, name="amount", type="uint256"),
    ],
    name="Withdraw",
    type="event",
)


@dataclass
class ErrorInfo:
    """Custom contract error information."""

    name: str
    selector: str
    signature: str
    inputs: list[ErrorParams]


@dataclass
class ErrorParams:
    """Parameter info for custom contract errors."""

    name: str
    solidity_type: str
    python_type: str
