"""Dataclasses for all structs in the ForceRevertDelegatecallTest contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name
# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments
# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import
# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return
from __future__ import annotations

from dataclasses import dataclass

from web3.types import ABIEvent, ABIEventParams

log = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="", type="string"),
    ],
    name="log",
    type="event",
)

log_address = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="", type="address"),
    ],
    name="log_address",
    type="event",
)

log_array = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="val", type="address[]"),
    ],
    name="log_array",
    type="event",
)

log_bytes = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="", type="bytes"),
    ],
    name="log_bytes",
    type="event",
)

log_bytes32 = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="", type="bytes32"),
    ],
    name="log_bytes32",
    type="event",
)

log_int = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="", type="int256"),
    ],
    name="log_int",
    type="event",
)

log_named_address = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="address"),
    ],
    name="log_named_address",
    type="event",
)

log_named_array = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="address[]"),
    ],
    name="log_named_array",
    type="event",
)

log_named_bytes = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="bytes"),
    ],
    name="log_named_bytes",
    type="event",
)

log_named_bytes32 = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="bytes32"),
    ],
    name="log_named_bytes32",
    type="event",
)

log_named_decimal_int = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="int256"),
        ABIEventParams(indexed=False, name="decimals", type="uint256"),
    ],
    name="log_named_decimal_int",
    type="event",
)

log_named_decimal_uint = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="uint256"),
        ABIEventParams(indexed=False, name="decimals", type="uint256"),
    ],
    name="log_named_decimal_uint",
    type="event",
)

log_named_int = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="int256"),
    ],
    name="log_named_int",
    type="event",
)

log_named_string = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="string"),
    ],
    name="log_named_string",
    type="event",
)

log_named_uint = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="key", type="string"),
        ABIEventParams(indexed=False, name="val", type="uint256"),
    ],
    name="log_named_uint",
    type="event",
)

log_string = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="", type="string"),
    ],
    name="log_string",
    type="event",
)

log_uint = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="", type="uint256"),
    ],
    name="log_uint",
    type="event",
)

logs = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=False, name="", type="bytes"),
    ],
    name="logs",
    type="event",
)


@dataclass
class ErrorInfo:
    """Custom contract error information."""

    name: str
    selector: str
    signature: str
    inputs: list[ErrorParams]


@dataclass
class ErrorParams:
    """Parameter info for custom contract errors."""

    name: str
    solidity_type: str
    python_type: str
