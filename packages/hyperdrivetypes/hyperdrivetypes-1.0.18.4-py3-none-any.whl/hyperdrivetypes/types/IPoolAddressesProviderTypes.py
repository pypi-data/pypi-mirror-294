"""Dataclasses for all structs in the IPoolAddressesProvider contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name
# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments
# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import
# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return
from __future__ import annotations

from dataclasses import dataclass

from web3.types import ABIEvent, ABIEventParams

ACLAdminUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="oldAddress", type="address"),
        ABIEventParams(indexed=True, name="newAddress", type="address"),
    ],
    name="ACLAdminUpdated",
    type="event",
)

ACLManagerUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="oldAddress", type="address"),
        ABIEventParams(indexed=True, name="newAddress", type="address"),
    ],
    name="ACLManagerUpdated",
    type="event",
)

AddressSet = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="id", type="bytes32"),
        ABIEventParams(indexed=True, name="oldAddress", type="address"),
        ABIEventParams(indexed=True, name="newAddress", type="address"),
    ],
    name="AddressSet",
    type="event",
)

AddressSetAsProxy = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="id", type="bytes32"),
        ABIEventParams(indexed=True, name="proxyAddress", type="address"),
        ABIEventParams(
            indexed=False, name="oldImplementationAddress", type="address"
        ),
        ABIEventParams(
            indexed=True, name="newImplementationAddress", type="address"
        ),
    ],
    name="AddressSetAsProxy",
    type="event",
)

MarketIdSet = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="oldMarketId", type="string"),
        ABIEventParams(indexed=True, name="newMarketId", type="string"),
    ],
    name="MarketIdSet",
    type="event",
)

PoolConfiguratorUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="oldAddress", type="address"),
        ABIEventParams(indexed=True, name="newAddress", type="address"),
    ],
    name="PoolConfiguratorUpdated",
    type="event",
)

PoolDataProviderUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="oldAddress", type="address"),
        ABIEventParams(indexed=True, name="newAddress", type="address"),
    ],
    name="PoolDataProviderUpdated",
    type="event",
)

PoolUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="oldAddress", type="address"),
        ABIEventParams(indexed=True, name="newAddress", type="address"),
    ],
    name="PoolUpdated",
    type="event",
)

PriceOracleSentinelUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="oldAddress", type="address"),
        ABIEventParams(indexed=True, name="newAddress", type="address"),
    ],
    name="PriceOracleSentinelUpdated",
    type="event",
)

PriceOracleUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="oldAddress", type="address"),
        ABIEventParams(indexed=True, name="newAddress", type="address"),
    ],
    name="PriceOracleUpdated",
    type="event",
)

ProxyCreated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="id", type="bytes32"),
        ABIEventParams(indexed=True, name="proxyAddress", type="address"),
        ABIEventParams(
            indexed=True, name="implementationAddress", type="address"
        ),
    ],
    name="ProxyCreated",
    type="event",
)


@dataclass
class ErrorInfo:
    """Custom contract error information."""

    name: str
    selector: str
    signature: str
    inputs: list[ErrorParams]


@dataclass
class ErrorParams:
    """Parameter info for custom contract errors."""

    name: str
    solidity_type: str
    python_type: str
