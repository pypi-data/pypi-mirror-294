"""Dataclasses for all structs in the IMulticall3 contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name
# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments
# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import
# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return
from __future__ import annotations

from dataclasses import dataclass


@dataclass
class Call:
    """Call struct."""

    target: str
    callData: bytes


@dataclass
class Call3:
    """Call3 struct."""

    target: str
    allowFailure: bool
    callData: bytes


@dataclass
class Result:
    """Result struct."""

    success: bool
    returnData: bytes


@dataclass
class Call3Value:
    """Call3Value struct."""

    target: str
    allowFailure: bool
    value: int
    callData: bytes


@dataclass
class ErrorInfo:
    """Custom contract error information."""

    name: str
    selector: str
    signature: str
    inputs: list[ErrorParams]


@dataclass
class ErrorParams:
    """Parameter info for custom contract errors."""

    name: str
    solidity_type: str
    python_type: str
