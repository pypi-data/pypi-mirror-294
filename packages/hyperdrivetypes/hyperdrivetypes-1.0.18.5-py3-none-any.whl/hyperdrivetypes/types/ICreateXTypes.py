"""Dataclasses for all structs in the ICreateX contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name
# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments
# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import
# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return
from __future__ import annotations

from dataclasses import dataclass

from eth_typing import ABIComponentIndexed, ABIEvent


@dataclass
class Values:
    """Values struct."""

    constructorAmount: int
    initCallAmount: int


ContractCreation = ABIEvent(
    anonymous=False,
    inputs=[
        ABIComponentIndexed(indexed=True, name="newContract", type="address"),
    ],
    name="ContractCreation",
    type="event",
)

Create3ProxyContractCreation = ABIEvent(
    anonymous=False,
    inputs=[
        ABIComponentIndexed(indexed=True, name="newContract", type="address"),
        ABIComponentIndexed(indexed=True, name="salt", type="bytes32"),
    ],
    name="Create3ProxyContractCreation",
    type="event",
)


@dataclass
class ErrorInfo:
    """Custom contract error information."""

    name: str
    selector: str
    signature: str
    inputs: list[ErrorParams]


@dataclass
class ErrorParams:
    """Parameter info for custom contract errors."""

    name: str
    solidity_type: str
    python_type: str


FailedContractCreationError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
    ],
    name="FailedContractCreation",
    selector="0xc05cee7a",
    signature="FailedContractCreation(address)",
)

FailedContractInitialisationError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
        ErrorParams(
            name="revertData", python_type="bytes", solidity_type="bytes"
        ),
    ],
    name="FailedContractInitialisation",
    selector="0xa57ca239",
    signature="FailedContractInitialisation(address,bytes)",
)

FailedEtherTransferError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
        ErrorParams(
            name="revertData", python_type="bytes", solidity_type="bytes"
        ),
    ],
    name="FailedEtherTransfer",
    selector="0xc2b3f445",
    signature="FailedEtherTransfer(address,bytes)",
)

InvalidNonceValueError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
    ],
    name="InvalidNonceValue",
    selector="0x3c55ab3b",
    signature="InvalidNonceValue(address)",
)

InvalidSaltError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
    ],
    name="InvalidSalt",
    selector="0x13b3a2a1",
    signature="InvalidSalt(address)",
)
