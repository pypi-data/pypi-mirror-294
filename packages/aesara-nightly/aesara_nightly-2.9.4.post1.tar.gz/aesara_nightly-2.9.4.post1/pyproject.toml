
[build-system]
  build-backend = "hatchling.build"
  requires = ["hatchling >=1.11.1,<2.0.0", "hatch-vcs >=0.3.0,<0.4.0"]

[project]
  classifiers = ["Development Status :: 6 - Mature", "Intended Audience :: Education", "Intended Audience :: Science/Research", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Compilers", "Topic :: Scientific/Engineering :: Mathematics", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Operating System :: POSIX :: SunOS/Solaris", "Operating System :: Unix", "Operating System :: MacOS", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11"]
  dependencies = ["numpy >=1.17.0,<2.0.0", "scipy >=0.14,<=1.12.0", "filelock", "etuples", "logical-unification", "miniKanren", "cons", "typing_extensions", "setuptools >=48.0.0"]
  description = "A library for defining, optimizing, and efficiently evaluating mathematical expressions involving multi-dimensional arrays."
  dynamic = ["version"]
  keywords = ["aesara", "math", "numerical", "symbolic", "blas", "numpy", "autodiff", "differentiation"]
  name = "aesara-nightly"
  requires-python = ">=3.8"

  [[project.authors]]
    email = "aesara.devs@gmail.com"
    name = "aesara-devs"

  [project.license]
    text = "BSD-3-Clause"

  [project.license-files]
    paths = ["LICENSE.txt"]

  [project.readme]
    content-type = "text/x-rst"
    file = "DESCRIPTION.txt"

  [project.scripts]
    aesara-cache = "aesara.bin.aesara_cache:main"

  [project.urls]
    Homepage = "https://github.com/aesara-devs/aesara"

[tool]

  [tool.coverage]

    [tool.coverage.report]
      exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]
      omit = ["tests/*"]
      show_missing = true

    [tool.coverage.run]
      branch = true
      omit = ["tests/*", "aesara/assert_op.py", "aesara/version.py", "aesara/bin/aesara_cache.py", "aesara/graph/opt.py", "aesara/graph/opt_utils.py", "aesara/graph/optdb.py", "aesara/graph/kanren.py", "aesara/graph/unify.py", "aesara/link/jax/jax_linker.py", "aesara/link/jax/jax_dispatch.py", "aesara/graph/toolbox.py", "aesara/scalar/basic_scipy.py", "bin/aesara_cache.py"]
      relative_files = true

  [tool.hatch]

    [tool.hatch.build]
      exclude = ["/.github", "/.flake8", "/.gitignore", "/.hgignore", "/.pre-commit-config.yaml", "/.github/CODE_OF_CONDUCT.md", "/.github/CONTRIBUTING.md", "Makefile", "codecov.yml", "environment-arm.yml", "environment.yml", "readthedocs.yml"]

      [tool.hatch.build.hooks]

        [tool.hatch.build.hooks.vcs]
          version-file = "aesara/_version.py"

      [tool.hatch.build.targets]

        [tool.hatch.build.targets.wheel]
          packages = ["aesara", "bin"]

    [tool.hatch.version]
      source = "vcs"
      tag-pattern = "^rel-(?P<version>[vV]?\\d+(?:\\.\\d+){0,2}[^\\+]*)(?:\\+.*)?$"

      [tool.hatch.version.raw-options]
        local_scheme = "no-local-version"
        version_scheme = "post-release"

  [tool.isort]
    honor_noqa = true
    lines_after_imports = 2
    lines_between_sections = 1
    profile = "black"
    skip = ["aesara/version.py"]
    skip_gitignore = true
    skip_glob = ["**/*.pyx"]

  [tool.mypy]
    allow_redefinition = false
    check_untyped_defs = false
    files = ["aesara", "tests"]
    ignore_missing_imports = true
    no_implicit_optional = true
    plugins = ["numpy.typing.mypy_plugin"]
    show_error_codes = true
    strict_equality = true
    warn_no_return = false
    warn_redundant_casts = true
    warn_return_any = true
    warn_unreachable = true
    warn_unused_configs = true
    warn_unused_ignores = true

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["doc.*"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["setup"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["tests.*"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.compile.mode"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.compile.builders"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.compile.sharedvalue"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.compile.compilelock"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.compile.function.pfunc"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.compile.function.types"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.compile.debugmode"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.type"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.var"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.basic"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.elemwise"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.math"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.rewriting.basic"]

    [[tool.mypy.overrides]]
      module = ["aesara.tensor.rewriting.shape"]
      warn_unused_ignores = false

    [[tool.mypy.overrides]]
      module = ["aesara.tensor.rewriting.elemwise"]
      warn_unused_ignores = false

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.subtensor"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.shape"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.extra_ops"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.type_other"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.blas"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.blas_headers"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.slinalg"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.sharedvar"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.rewriting.math"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.blas_c"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.random.op"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.random.basic"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.random.utils"]

    [[tool.mypy.overrides]]
      module = ["aesara.scan.op"]
      warn_unused_ignores = false

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.link.numba.dispatch.extra_ops"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.link.numba.dispatch.elemwise"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.link.numba.dispatch.random"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.link.jax.dispatch"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.raise_op"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.nnet.conv3d2d"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.nnet.neighbours"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.nnet.abstract_conv"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.tensor.nnet.ctc"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.sandbox.*"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.ifelse"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.typed_list.*"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.sparse.basic"]

    [[tool.mypy.overrides]]
      check_untyped_defs = false
      ignore_errors = true
      module = ["aesara.sparse.sharedvar"]

  [tool.pylint]
    max-line-length = "88"

  [tool."pylint.messages_control"]
    disable = "C0330, C0326"

  [tool.pytest]

    [tool.pytest.ini_options]
      addopts = "--durations=50"
      testpaths = ["tests/"]
