from socket import AddressFamily, SocketKind, socket
from typing_extensions import Buffer

class SocketWrapper:
    SOCKET_TIMEOUT: float
    SERVER_CONNECT_TIMEOUT: float
    def __init__(self, family: AddressFamily, kind: SocketKind) -> None: ...
    def raw_socket(self) -> socket: ...
    def settimeout(self, timeout: float | None) -> None: ...
    def connect(self, address: tuple[str, int]) -> None: ...
    def setsockopt(self, level: int, option: int, value: int | Buffer) -> None: ...
    def shutdown(self, how: int) -> None: ...
    def close(self) -> None: ...
    def getsockname(self) -> tuple[str, int]: ...
    def sendall(self, data: bytes) -> None: ...
    def recv(self, size: int) -> bytes: ...
