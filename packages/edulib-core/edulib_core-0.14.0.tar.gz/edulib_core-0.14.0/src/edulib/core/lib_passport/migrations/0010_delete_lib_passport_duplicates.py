# Generated by Django 2.2.28 on 2023-07-05 17:13

from django.contrib.postgres.aggregates import (
    ArrayAgg,
)
from django.db import (
    migrations,
)
from django.db.models import (
    Count,
    Exists,
    OuterRef,
)


def delete_lib_passport_duplicates(apps, schema_editor):
    """Функция для удаления дублей LibPassport.

    Дубликатами являются объекты, имеющие одинаковый school_id.
    Из дубликатов оставлям последний созданный объект как оригинал.

    Объекты LibraryEvent и LibRegistryExample, связанные с дубликатами,
    связываем с оригиналом.
    """
    LibPassport = apps.get_model('lib_passport', 'LibPassport')  # noqa: N806
    LibraryEvent = apps.get_model('library_event', 'LibraryEvent')  # noqa: N806
    LibRegistryExample = apps.get_model('lib_registry', 'LibRegistryExample')  # noqa: N806

    duplicate_groups = LibPassport.objects.values('school_id').annotate(
        duplicates_count=Count('school_id'),
        ids=ArrayAgg('id', ordering='created')
    ).filter(duplicates_count__gt=1)

    duplicate_ids = set()
    for duplicate_group in duplicate_groups:
        original_lib_passport_id = duplicate_group['ids'].pop()

        # LibraryEvent, связынные с дубликатами, привязываем
        # к паспорту библиотеки, который определили как оригинал
        LibraryEvent.objects.filter(
            library_id__in=duplicate_group['ids']
        ).update(
            library_id=original_lib_passport_id
        )

        # LibRegistryExample, связынные с дубликатами, привязываем
        # к паспорту библиотеки, который определили как оригинал
        LibRegistryExample.objects.filter(
            library_id__in=duplicate_group['ids']
        ).update(
            library_id=original_lib_passport_id
        )

        duplicate_ids |= set(duplicate_group['ids'])

    LibPassport.objects.filter(id__in=duplicate_ids).delete()


def delete_lib_passport_without_school(apps, schema_editor):
    """Функция для удаления паспортов библиотеки, связанных с несуществующей школой."""
    LibPassport = apps.get_model('lib_passport', 'LibPassport')  # noqa: N806
    School = apps.get_model('school', 'School')  # noqa: N806

    LibPassport.objects.annotate(
        school_exists=Exists(
            School.objects.filter(id=OuterRef('school_id'))
        ),
    ).filter(
        school_exists=False,
    ).delete()


class Migration(migrations.Migration):
    """Миграция для нормализации базы данных модели LibPassport.

    Удаялем объекты, имеющие одинаковый school_id, оставляя последний созданный.
    Удаляем объекты, в которых в поле school_id указан идентификатор несуществующей школы.
    """

    dependencies = [
        ('lib_passport', '0009_auto_20230322_1311'),
        ('library_event', '0002_auto_20180420_0941'),
        ('lib_registry', '0033_auto_20220704_2008'),
    ]

    operations = [
        # Миграция считается пройденной в ЭШ и не должна выполняться на чистой БД.
        #
        # migrations.RunPython(delete_lib_passport_without_school, migrations.RunPython.noop),
        # migrations.RunPython(delete_lib_passport_duplicates, migrations.RunPython.noop),
    ]
