# Generated by Django 1.9.13 on 2018-06-26 04:12
from django.db import (
    migrations,
)
from django.db.migrations.operations.base import (
    Operation,
)
from django.db.models import (
    F,
    Func,
)


class Cast(Func):
    """Coerce an expression to a new field type."""

    function = 'CAST'
    template = '%(function)s(%(expressions)s AS %(db_type)s)'

    def __init__(self, expression, output_field_type):
        super(Cast, self).__init__(expression, db_type=output_field_type)


class MigratePriceValues(Operation):
    """Миграция цен на книги.

    При миграции назад потеряются значения после запятой.
    """

    def state_forwards(self, app_label, state):
        pass

    def database_forwards(self, app_label, schema_editor, from_state,
                          to_state):

        self.LibRegistryExample = to_state.apps.get_model(
            'lib_registry', 'LibRegistryExample')

        if self.allow_migrate_model(
            schema_editor.connection.alias, self.LibRegistryExample
        ):
            self.LibRegistryExample.objects.filter(
                price__isnull=False,
                price__iregex=r'^\d*$'
            ).update(
                decimal_price=Cast(F('price'), 'INTEGER')
            )

    def database_backwards(self, app_label, schema_editor, from_state,
                           to_state):

        self.LibRegistryExample = to_state.apps.get_model(
            'lib_registry', 'LibRegistryExample')

        if self.allow_migrate_model(
            schema_editor.connection.alias, self.LibRegistryExample
        ):
            self.LibRegistryExample.objects.filter(
                decimal_price__isnull=False
            ).update(
                price=Cast(F('decimal_price'), 'INTEGER')
            )


class Migration(migrations.Migration):

    dependencies = [
        ('lib_registry', '0007_libregistryexample_decimal_price'),
    ]

    operations = [
        MigratePriceValues()
    ]
