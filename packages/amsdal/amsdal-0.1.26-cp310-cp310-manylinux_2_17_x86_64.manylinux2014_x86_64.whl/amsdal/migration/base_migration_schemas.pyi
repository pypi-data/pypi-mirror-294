import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from amsdal.configs.constants import BASE_DIR as BASE_DIR
from amsdal_models.classes.model import Model
from amsdal_models.schemas.data_models.core import DictSchema, LegacyDictSchema, TypeData
from amsdal_models.schemas.data_models.schema import ObjectSchema, PropertyData
from amsdal_utils.models.enums import SchemaTypes as SchemaTypes, Versions
from pathlib import Path

class BaseMigrationSchemas(ABC, metaclass=abc.ABCMeta):
    _classes: Incomplete
    _classes_versions: Incomplete
    _buffered_classes: Incomplete
    def __init__(self) -> None: ...
    def get_model(self, name: str) -> type[Model]: ...
    @abstractmethod
    def register_model(self, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    @abstractmethod
    def unregister_model(self, class_name: str) -> None: ...
    @abstractmethod
    def compile_buffered_classes(self) -> None: ...
    @staticmethod
    def register_model_version(class_name: str, class_version: str | Versions) -> None: ...

class DefaultMigrationSchemas(BaseMigrationSchemas):
    model_class_template_layout: Path
    model_class_template: Path
    dict_validator_template: Path
    options_validator_template: Path
    def register_model(self, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    def compile_buffered_classes(self) -> None: ...
    def unregister_model(self, class_name: str) -> None: ...
    def _compile_buffered_classes(self) -> list[tuple[str, type[Model]]]: ...
    def _build_class_source(self, class_name: str, schema: ObjectSchema, schema_type: SchemaTypes) -> tuple[str, str]: ...
    @staticmethod
    def _resolve_class_inheritance(schema: ObjectSchema) -> str: ...
    @staticmethod
    def _process_custom_code(custom_code: str | None) -> tuple[str, str]: ...
    def _render_property(self, name: str, property_schema: PropertyData, required: list[str]) -> str: ...
    def _render_type_annotation(self, type_: str, items: TypeData | DictSchema | LegacyDictSchema | None) -> str: ...
    def _render_validators(self, schema: ObjectSchema) -> list[str]: ...
    def _get_all_types(self, type_: str, items: TypeData | DictSchema | LegacyDictSchema | None) -> set[str]: ...
    def _is_reference(self, type_: str) -> bool: ...
