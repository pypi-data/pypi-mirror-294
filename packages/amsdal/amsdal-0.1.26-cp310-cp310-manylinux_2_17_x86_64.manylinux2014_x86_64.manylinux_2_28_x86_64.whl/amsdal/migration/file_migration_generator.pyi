from _typeshed import Incomplete
from amsdal.configs.main import settings as settings
from amsdal.migration.base_migration_schemas import BaseMigrationSchemas as BaseMigrationSchemas
from amsdal.migration.data_classes import MigrateOperation as MigrateOperation, MigrationFile as MigrationFile, ModuleTypes as ModuleTypes, OperationTypes as OperationTypes
from amsdal.migration.executors.state_executor import StateMigrationExecutor as StateMigrationExecutor
from amsdal.migration.file_migration_executor import FileMigrationExecutorManager as FileMigrationExecutorManager
from amsdal.migration.file_migration_store import BaseMigrationStore as BaseMigrationStore
from amsdal.migration.file_migration_writer import FileMigrationWriter as FileMigrationWriter
from amsdal.migration.migrations_loader import MigrationsLoader as MigrationsLoader
from amsdal.migration.schemas_loaders import BaseClassSchemaLoader as BaseClassSchemaLoader
from amsdal_models.schemas.data_models.schema import ObjectSchema
from amsdal_utils.models.enums import SchemaTypes
from collections.abc import Callable as Callable
from pathlib import Path
from typing import ClassVar

class StateMigrationStore(BaseMigrationStore):
    def save_migration(self, migration: MigrationFile) -> None: ...
    def delete_migration(self, migration: MigrationFile) -> None: ...
    def fetch_migrations(self) -> list[MigrationFile]: ...

class StateMigrationSchemas(BaseMigrationSchemas):
    state: Incomplete
    def __init__(self) -> None: ...
    def register_model(self, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    def unregister_model(self, class_name: str) -> None: ...
    def compile_buffered_classes(self) -> None: ...

class FileMigrationGenerator:
    _operations: ClassVar[dict[OperationTypes, Callable[..., MigrateOperation]]]
    _app_migrations_path: Incomplete
    _app_migrations_loader: Incomplete
    _schema_loader: Incomplete
    _state: Incomplete
    def __init__(self, schema_loader: BaseClassSchemaLoader, app_migrations_path: Path | None = None) -> None: ...
    def make_migrations(self, name: str | None = None, *, is_data: bool = False, schema_type: SchemaTypes = ...) -> MigrationFile: ...
    def generate_operations(self, schema_type: SchemaTypes) -> list[MigrateOperation]: ...
    def _make_data_migrations(self, name: str | None = None) -> MigrationFile: ...
    def _init_state(self) -> None: ...
    @classmethod
    def build_operations(cls, schema_type: SchemaTypes, class_schema: ObjectSchema, old_class_schema: ObjectSchema | None) -> list[MigrateOperation]: ...
    def write_migration_file(self, operations: list[MigrateOperation], name: str | None = None) -> MigrationFile: ...
    def write_data_migration_file(self, name: str | None = None) -> MigrationFile: ...
    @staticmethod
    def generate_name_from_operations(operations: list[MigrateOperation]) -> str: ...
    @staticmethod
    def _get_migration_file_name(number: int, name: str) -> str: ...
