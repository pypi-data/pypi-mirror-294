import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from amsdal.migration.base_migration_schemas import BaseMigrationSchemas as BaseMigrationSchemas
from amsdal_models.schemas.data_models.schema import ObjectSchema
from amsdal_utils.models.enums import SchemaTypes as SchemaTypes
from pydantic import BaseModel

class FieldDescription(BaseModel):
    field_name: str
    field_id: str
    field_type: str
    is_deleted: bool

def _schema_to_table_description(schema: ObjectSchema | None) -> dict[str, str]: ...
def _compare_schemas(previous_scheme: dict[str, str], new_scheme: dict[str, str]) -> list[tuple[str, str, str]]: ...
def _id_for_column(field_name: str, iteration: str | int) -> str: ...
def _new_table_schemas(previous_scheme: ObjectSchema | None, new_scheme: ObjectSchema, iteration: int, existing_table_structure: list[FieldDescription]) -> None: ...

class BaseMigrationExecutor(ABC, metaclass=abc.ABCMeta):
    schemas: BaseMigrationSchemas
    _buffer: Incomplete
    _non_flushable_buffer: Incomplete
    def __init__(self) -> None: ...
    def generate_full_object_schema(self, class_name: str, object_schema: ObjectSchema, buffer: list[tuple[str, ObjectSchema, SchemaTypes]]) -> list[FieldDescription]: ...
    @abstractmethod
    def create_class(self, schemas: BaseMigrationSchemas, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    @abstractmethod
    def update_class(self, schemas: BaseMigrationSchemas, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    @abstractmethod
    def delete_class(self, schemas: BaseMigrationSchemas, class_name: str, schema_type: SchemaTypes) -> None: ...
    def forward_schema(self, schemas: BaseMigrationSchemas, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    @staticmethod
    def _resolve_base_class_name(class_name: str, meta_class: str) -> str: ...
    def buffer_class_migration(self, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    def flush_buffer(self) -> None: ...
