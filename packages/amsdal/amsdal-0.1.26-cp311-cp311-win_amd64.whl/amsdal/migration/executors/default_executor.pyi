from _typeshed import Incomplete
from amsdal.migration.base_migration_schemas import BaseMigrationSchemas as BaseMigrationSchemas
from amsdal.migration.data_classes import Action as Action, ClassSaveResult as ClassSaveResult
from amsdal.migration.executors.base import BaseMigrationExecutor as BaseMigrationExecutor
from amsdal.migration.utils import object_schema_to_table_schema as object_schema_to_table_schema
from amsdal_models.classes.model import Model
from amsdal_models.schemas.data_models.schema import ObjectSchema
from amsdal_utils.models.enums import SchemaTypes, Versions
from typing import Any

class DefaultMigrationExecutor(BaseMigrationExecutor):
    schemas: Incomplete
    _table_schemas_manager: Incomplete
    def __init__(self, schemas: BaseMigrationSchemas) -> None: ...
    def create_class(self, schemas: BaseMigrationSchemas, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    def update_class(self, schemas: BaseMigrationSchemas, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    def delete_class(self, schemas: BaseMigrationSchemas, class_name: str, schema_type: SchemaTypes) -> None: ...
    def flush_buffer(self) -> None: ...
    def _save_class(self, base_class: type[Model], object_schema: ObjectSchema, schema_type: SchemaTypes) -> ClassSaveResult: ...
    def _create_table(self, object_schema: ObjectSchema, class_version: str | Versions) -> None: ...
    def _migrate_historical_data(self, schemas: BaseMigrationSchemas, class_name: str, prior_version: str, new_version: str) -> None: ...
    def _clean_data(self, model_class: type[Model], data: dict[str, Any]) -> dict[str, Any]: ...
    def _process_object_schema(self, object_schema: ObjectSchema, class_name: str, buffer: list[tuple[str, ObjectSchema, SchemaTypes]]) -> ObjectSchema: ...
    def register_schemas(self) -> None: ...
