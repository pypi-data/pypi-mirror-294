from _typeshed import Incomplete
from amsdal.schemas.manager import SchemaManager as SchemaManager
from amsdal_models.classes.manager import ClassManager
from amsdal_models.schemas.data_models.core import DictSchema, TypeData
from amsdal_models.schemas.data_models.schema import PropertyData
from amsdal_utils.config.manager import AmsdalConfigManager as AmsdalConfigManager
from pathlib import Path
from pydantic import BaseModel
from typing import Any

logger: Incomplete

class FixtureData(BaseModel):
    class_name: str
    external_id: str
    data: dict[str, Any]

class FixturesManager:
    fixtures_path: Incomplete
    fixtures: Incomplete
    _created_cache: Incomplete
    data_to_process: Incomplete
    _class_manager: Incomplete
    _config_manager: Incomplete
    _schema_manager: Incomplete
    def __init__(self, fixtures_path: Path, class_manager: ClassManager, config_manager: AmsdalConfigManager, schema_manager: SchemaManager) -> None: ...
    def load_fixtures(self) -> None: ...
    def construct_nested_object(self, external_id: Any) -> Any: ...
    def _process_object_data(self, model_properties: dict[str, PropertyData], data: dict[str, Any]) -> dict[str, Any]: ...
    def _process_object_value(self, field_configuration: PropertyData | DictSchema | TypeData, value: Any) -> Any: ...
    def process_fixture_object_data(self, class_name: str, external_id: str, data: dict[str, Any]) -> None: ...
    def process_fixture(self, fixture: dict[str, Any]) -> None: ...
    def apply_fixtures(self) -> None: ...
    def _process_data(self) -> None: ...
    def apply_file_fixtures(self) -> None: ...
    def _process_file_fixture(self, file_path: Path, file_key: str) -> None: ...
