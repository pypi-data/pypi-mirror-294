import ast
from _typeshed import Incomplete
from amsdal.configs.main import settings as settings
from amsdal.errors import TransactionNotFoundError as TransactionNotFoundError
from amsdal_utils.utils.singleton import Singleton
from collections.abc import Callable as Callable, Generator
from pathlib import Path
from typing import Any

logger: Incomplete

def is_transaction(statement: ast.AST) -> bool: ...

class TransactionExecutionService(metaclass=Singleton):
    _transactions: Incomplete
    def __init__(self) -> None: ...
    def execute_transaction(self, transaction_name: str, args: dict[str, Any], *, load_references: bool = True) -> Any: ...
    def get_transaction_func(self, transaction_name: str) -> Callable[..., Any]: ...
    @staticmethod
    def _run_async_transaction(transaction_func: Callable[..., Any], args: dict[str, Any]) -> Any: ...
    def _load_transaction(self, transaction_name: str) -> Callable[..., Any]: ...
    @classmethod
    def _get_transaction_definitions(cls) -> Generator[tuple[ast.FunctionDef | ast.AsyncFunctionDef, Path], None, None]: ...
    @classmethod
    def _iterate_module(cls, module_path: Path) -> Generator[tuple[ast.FunctionDef | ast.AsyncFunctionDef, Path], None, None]: ...
    @classmethod
    def _iterate_file(cls, file_path: Path) -> Generator[tuple[ast.FunctionDef | ast.AsyncFunctionDef, Path], None, None]: ...
