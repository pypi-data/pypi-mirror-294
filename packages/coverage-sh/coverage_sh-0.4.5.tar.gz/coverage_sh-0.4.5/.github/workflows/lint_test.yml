name: lint_pytest

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint_test:
    name: "Run linters and pytest with python ${{ matrix.python-version }}"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
          version: '0.39.0'
      - name: "Pin python-version ${{ matrix.python-version }}"
        run: rye pin ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          rye sync --no-lock
      - name: Lint with ruff
        run: |
          rye run ruff format --check .
          rye run ruff check .
      - name: Run mypy
        run: |
          rye run mypy coverage_sh
      - name: Test with pytest
        run: |
          rye run coverage run --parallel-mode -m pytest
          ls -lah
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.python-version }}
          path: .coverage.*
          if-no-files-found: error
          include-hidden-files: true


  coverage:
    name: Combine & check coverage.
    runs-on: ubuntu-latest
    needs: lint_test

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: pip

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage & fail if it's <100%.
        run: |
          python -Im pip install coverage[toml]
          
          rm -f .coverage.sh.*
          python -Im coverage combine
          python -Im coverage html --skip-covered --skip-empty
          python -Im coverage json
          
          # Report and write to summary.
          python -Im coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          
          # Report again and fail if under 100%.
          python -Im coverage report --fail-under=100
          
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

      - name: "Make badge"
        if: github.ref == 'refs/heads/main'
        uses: "schneegans/dynamic-badges-action@v1.4.0"
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: f16009049fe5091e6d750a7bb7b4d68a
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}
