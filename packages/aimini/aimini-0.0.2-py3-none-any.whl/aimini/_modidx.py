# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/aimini/',
                'doc_host': 'https://anubhavmaity.github.io',
                'git_url': 'https://github.com/anubhavmaity/aimini/',
                'lib_path': 'aimini'},
  'syms': { 'aimini.accel': { 'aimini.accel.AccelerateCB': ('lectures/ddpm_v2.html#acceleratecb', 'aimini/accel.py'),
                              'aimini.accel.AccelerateCB.__init__': ('lectures/ddpm_v2.html#acceleratecb.__init__', 'aimini/accel.py'),
                              'aimini.accel.AccelerateCB.backward': ('lectures/ddpm_v2.html#acceleratecb.backward', 'aimini/accel.py'),
                              'aimini.accel.AccelerateCB.before_fit': ('lectures/ddpm_v2.html#acceleratecb.before_fit', 'aimini/accel.py'),
                              'aimini.accel.MixedPrecision': ('lectures/ddpm_v2.html#mixedprecision', 'aimini/accel.py'),
                              'aimini.accel.MixedPrecision.after_loss': ( 'lectures/ddpm_v2.html#mixedprecision.after_loss',
                                                                          'aimini/accel.py'),
                              'aimini.accel.MixedPrecision.backward': ('lectures/ddpm_v2.html#mixedprecision.backward', 'aimini/accel.py'),
                              'aimini.accel.MixedPrecision.before_batch': ( 'lectures/ddpm_v2.html#mixedprecision.before_batch',
                                                                            'aimini/accel.py'),
                              'aimini.accel.MixedPrecision.before_fit': ( 'lectures/ddpm_v2.html#mixedprecision.before_fit',
                                                                          'aimini/accel.py'),
                              'aimini.accel.MixedPrecision.step': ('lectures/ddpm_v2.html#mixedprecision.step', 'aimini/accel.py')},
            'aimini.activations': { 'aimini.activations.ActivationStats': ( 'lectures/activations.html#activationstats',
                                                                            'aimini/activations.py'),
                                    'aimini.activations.ActivationStats.__init__': ( 'lectures/activations.html#activationstats.__init__',
                                                                                     'aimini/activations.py'),
                                    'aimini.activations.ActivationStats.color_dim': ( 'lectures/activations.html#activationstats.color_dim',
                                                                                      'aimini/activations.py'),
                                    'aimini.activations.ActivationStats.dead_chart': ( 'lectures/activations.html#activationstats.dead_chart',
                                                                                       'aimini/activations.py'),
                                    'aimini.activations.ActivationStats.plot_stats': ( 'lectures/activations.html#activationstats.plot_stats',
                                                                                       'aimini/activations.py'),
                                    'aimini.activations.Hook': ('lectures/activations.html#hook', 'aimini/activations.py'),
                                    'aimini.activations.Hook.__del__': ('lectures/activations.html#hook.__del__', 'aimini/activations.py'),
                                    'aimini.activations.Hook.__init__': ( 'lectures/activations.html#hook.__init__',
                                                                          'aimini/activations.py'),
                                    'aimini.activations.Hook.remove': ('lectures/activations.html#hook.remove', 'aimini/activations.py'),
                                    'aimini.activations.Hooks': ('lectures/activations.html#hooks', 'aimini/activations.py'),
                                    'aimini.activations.Hooks.__del__': ( 'lectures/activations.html#hooks.__del__',
                                                                          'aimini/activations.py'),
                                    'aimini.activations.Hooks.__delitem__': ( 'lectures/activations.html#hooks.__delitem__',
                                                                              'aimini/activations.py'),
                                    'aimini.activations.Hooks.__enter__': ( 'lectures/activations.html#hooks.__enter__',
                                                                            'aimini/activations.py'),
                                    'aimini.activations.Hooks.__exit__': ( 'lectures/activations.html#hooks.__exit__',
                                                                           'aimini/activations.py'),
                                    'aimini.activations.Hooks.__init__': ( 'lectures/activations.html#hooks.__init__',
                                                                           'aimini/activations.py'),
                                    'aimini.activations.Hooks.remove': ('lectures/activations.html#hooks.remove', 'aimini/activations.py'),
                                    'aimini.activations.HooksCallback': ( 'lectures/activations.html#hookscallback',
                                                                          'aimini/activations.py'),
                                    'aimini.activations.HooksCallback.__init__': ( 'lectures/activations.html#hookscallback.__init__',
                                                                                   'aimini/activations.py'),
                                    'aimini.activations.HooksCallback.__iter__': ( 'lectures/activations.html#hookscallback.__iter__',
                                                                                   'aimini/activations.py'),
                                    'aimini.activations.HooksCallback.__len__': ( 'lectures/activations.html#hookscallback.__len__',
                                                                                  'aimini/activations.py'),
                                    'aimini.activations.HooksCallback._hookfunc': ( 'lectures/activations.html#hookscallback._hookfunc',
                                                                                    'aimini/activations.py'),
                                    'aimini.activations.HooksCallback.after_fit': ( 'lectures/activations.html#hookscallback.after_fit',
                                                                                    'aimini/activations.py'),
                                    'aimini.activations.HooksCallback.before_fit': ( 'lectures/activations.html#hookscallback.before_fit',
                                                                                     'aimini/activations.py'),
                                    'aimini.activations.append_stats': ('lectures/activations.html#append_stats', 'aimini/activations.py'),
                                    'aimini.activations.get_hist': ('lectures/activations.html#get_hist', 'aimini/activations.py'),
                                    'aimini.activations.get_min': ('lectures/activations.html#get_min', 'aimini/activations.py'),
                                    'aimini.activations.set_seed': ('lectures/activations.html#set_seed', 'aimini/activations.py')},
            'aimini.augment': { 'aimini.augment.CapturePreds': ('lectures/augment.html#capturepreds', 'aimini/augment.py'),
                                'aimini.augment.CapturePreds.after_batch': ( 'lectures/augment.html#capturepreds.after_batch',
                                                                             'aimini/augment.py'),
                                'aimini.augment.CapturePreds.after_fit': ( 'lectures/augment.html#capturepreds.after_fit',
                                                                           'aimini/augment.py'),
                                'aimini.augment.CapturePreds.before_fit': ( 'lectures/augment.html#capturepreds.before_fit',
                                                                            'aimini/augment.py'),
                                'aimini.augment.RandCopy': ('lectures/augment.html#randcopy', 'aimini/augment.py'),
                                'aimini.augment.RandCopy.__init__': ('lectures/augment.html#randcopy.__init__', 'aimini/augment.py'),
                                'aimini.augment.RandCopy.forward': ('lectures/augment.html#randcopy.forward', 'aimini/augment.py'),
                                'aimini.augment.RandErase': ('lectures/augment.html#randerase', 'aimini/augment.py'),
                                'aimini.augment.RandErase.__init__': ('lectures/augment.html#randerase.__init__', 'aimini/augment.py'),
                                'aimini.augment.RandErase.forward': ('lectures/augment.html#randerase.forward', 'aimini/augment.py'),
                                'aimini.augment._flops': ('lectures/augment.html#_flops', 'aimini/augment.py'),
                                'aimini.augment._rand_copy1': ('lectures/augment.html#_rand_copy1', 'aimini/augment.py'),
                                'aimini.augment._rand_erase': ('lectures/augment.html#_rand_erase', 'aimini/augment.py'),
                                'aimini.augment.capture_preds': ('lectures/augment.html#capture_preds', 'aimini/augment.py'),
                                'aimini.augment.rand_copy': ('lectures/augment.html#rand_copy', 'aimini/augment.py'),
                                'aimini.augment.rand_erase': ('lectures/augment.html#rand_erase', 'aimini/augment.py'),
                                'aimini.augment.summary': ('lectures/augment.html#summary', 'aimini/augment.py')},
            'aimini.conv': { 'aimini.conv.collate_device': ('lectures/convolutions.html#collate_device', 'aimini/conv.py'),
                             'aimini.conv.conv': ('lectures/convolutions.html#conv', 'aimini/conv.py'),
                             'aimini.conv.to_device': ('lectures/convolutions.html#to_device', 'aimini/conv.py')},
            'aimini.datasets': { 'aimini.datasets.collate_dict': ('lectures/datasets.html#collate_dict', 'aimini/datasets.py'),
                                 'aimini.datasets.get_grid': ('lectures/datasets.html#get_grid', 'aimini/datasets.py'),
                                 'aimini.datasets.inplace': ('lectures/datasets.html#inplace', 'aimini/datasets.py'),
                                 'aimini.datasets.show_image': ('lectures/datasets.html#show_image', 'aimini/datasets.py'),
                                 'aimini.datasets.show_images': ('lectures/datasets.html#show_images', 'aimini/datasets.py'),
                                 'aimini.datasets.subplots': ('lectures/datasets.html#subplots', 'aimini/datasets.py')},
            'aimini.fid': { 'aimini.fid.ImageEval': ('lectures/fid.html#imageeval', 'aimini/fid.py'),
                            'aimini.fid.ImageEval.__init__': ('lectures/fid.html#imageeval.__init__', 'aimini/fid.py'),
                            'aimini.fid.ImageEval.fid': ('lectures/fid.html#imageeval.fid', 'aimini/fid.py'),
                            'aimini.fid.ImageEval.get_feats': ('lectures/fid.html#imageeval.get_feats', 'aimini/fid.py'),
                            'aimini.fid.ImageEval.kid': ('lectures/fid.html#imageeval.kid', 'aimini/fid.py'),
                            'aimini.fid._calc_fid': ('lectures/fid.html#_calc_fid', 'aimini/fid.py'),
                            'aimini.fid._calc_kid': ('lectures/fid.html#_calc_kid', 'aimini/fid.py'),
                            'aimini.fid._calc_stats': ('lectures/fid.html#_calc_stats', 'aimini/fid.py'),
                            'aimini.fid._sqrtm_newton_schulz': ('lectures/fid.html#_sqrtm_newton_schulz', 'aimini/fid.py'),
                            'aimini.fid._squared_mmd': ('lectures/fid.html#_squared_mmd', 'aimini/fid.py')},
            'aimini.init': { 'aimini.init.BatchTransformCB': ('lectures/initializing.html#batchtransformcb', 'aimini/init.py'),
                             'aimini.init.BatchTransformCB.__init__': ( 'lectures/initializing.html#batchtransformcb.__init__',
                                                                        'aimini/init.py'),
                             'aimini.init.BatchTransformCB.before_batch': ( 'lectures/initializing.html#batchtransformcb.before_batch',
                                                                            'aimini/init.py'),
                             'aimini.init.GeneralRelu': ('lectures/initializing.html#generalrelu', 'aimini/init.py'),
                             'aimini.init.GeneralRelu.__init__': ('lectures/initializing.html#generalrelu.__init__', 'aimini/init.py'),
                             'aimini.init.GeneralRelu.forward': ('lectures/initializing.html#generalrelu.forward', 'aimini/init.py'),
                             'aimini.init._lsuv_stats': ('lectures/initializing.html#_lsuv_stats', 'aimini/init.py'),
                             'aimini.init.clean_ipython_hist': ('lectures/initializing.html#clean_ipython_hist', 'aimini/init.py'),
                             'aimini.init.clean_mem': ('lectures/initializing.html#clean_mem', 'aimini/init.py'),
                             'aimini.init.clean_tb': ('lectures/initializing.html#clean_tb', 'aimini/init.py'),
                             'aimini.init.conv': ('lectures/initializing.html#conv', 'aimini/init.py'),
                             'aimini.init.get_model': ('lectures/initializing.html#get_model', 'aimini/init.py'),
                             'aimini.init.init_weights': ('lectures/initializing.html#init_weights', 'aimini/init.py'),
                             'aimini.init.lsuv_init': ('lectures/initializing.html#lsuv_init', 'aimini/init.py'),
                             'aimini.init.plot_func': ('lectures/initializing.html#plot_func', 'aimini/init.py')},
            'aimini.learner': { 'aimini.learner.Accuracy': ('lectures/learner.html#accuracy', 'aimini/learner.py'),
                                'aimini.learner.Accuracy.calc': ('lectures/learner.html#accuracy.calc', 'aimini/learner.py'),
                                'aimini.learner.Callback': ('lectures/learner.html#callback', 'aimini/learner.py'),
                                'aimini.learner.Callback.__getattr__': ('lectures/learner.html#callback.__getattr__', 'aimini/learner.py'),
                                'aimini.learner.Callback.__setattr__': ('lectures/learner.html#callback.__setattr__', 'aimini/learner.py'),
                                'aimini.learner.Callback.training': ('lectures/learner.html#callback.training', 'aimini/learner.py'),
                                'aimini.learner.CancelBatchException': ('lectures/learner.html#cancelbatchexception', 'aimini/learner.py'),
                                'aimini.learner.CancelEpochException': ('lectures/learner.html#cancelepochexception', 'aimini/learner.py'),
                                'aimini.learner.CancelFitException': ('lectures/learner.html#cancelfitexception', 'aimini/learner.py'),
                                'aimini.learner.DataLoaders': ('lectures/learner.html#dataloaders', 'aimini/learner.py'),
                                'aimini.learner.DataLoaders.__init__': ('lectures/learner.html#dataloaders.__init__', 'aimini/learner.py'),
                                'aimini.learner.DataLoaders.from_dd': ('lectures/learner.html#dataloaders.from_dd', 'aimini/learner.py'),
                                'aimini.learner.DeviceCB': ('lectures/learner.html#devicecb', 'aimini/learner.py'),
                                'aimini.learner.DeviceCB.__init__': ('lectures/learner.html#devicecb.__init__', 'aimini/learner.py'),
                                'aimini.learner.DeviceCB.before_batch': ( 'lectures/learner.html#devicecb.before_batch',
                                                                          'aimini/learner.py'),
                                'aimini.learner.DeviceCB.before_fit': ('lectures/learner.html#devicecb.before_fit', 'aimini/learner.py'),
                                'aimini.learner.LRFinderCB': ('lectures/learner.html#lrfindercb', 'aimini/learner.py'),
                                'aimini.learner.LRFinderCB.__init__': ('lectures/learner.html#lrfindercb.__init__', 'aimini/learner.py'),
                                'aimini.learner.LRFinderCB.after_batch': ( 'lectures/learner.html#lrfindercb.after_batch',
                                                                           'aimini/learner.py'),
                                'aimini.learner.LRFinderCB.before_fit': ( 'lectures/learner.html#lrfindercb.before_fit',
                                                                          'aimini/learner.py'),
                                'aimini.learner.LRFinderCB.cleanup_fit': ( 'lectures/learner.html#lrfindercb.cleanup_fit',
                                                                           'aimini/learner.py'),
                                'aimini.learner.Learner': ('lectures/learner.html#learner', 'aimini/learner.py'),
                                'aimini.learner.Learner.__getattr__': ('lectures/learner.html#learner.__getattr__', 'aimini/learner.py'),
                                'aimini.learner.Learner.__init__': ('lectures/learner.html#learner.__init__', 'aimini/learner.py'),
                                'aimini.learner.Learner._fit': ('lectures/learner.html#learner._fit', 'aimini/learner.py'),
                                'aimini.learner.Learner._one_batch': ('lectures/learner.html#learner._one_batch', 'aimini/learner.py'),
                                'aimini.learner.Learner._one_epoch': ('lectures/learner.html#learner._one_epoch', 'aimini/learner.py'),
                                'aimini.learner.Learner.callback': ('lectures/learner.html#learner.callback', 'aimini/learner.py'),
                                'aimini.learner.Learner.fit': ('lectures/learner.html#learner.fit', 'aimini/learner.py'),
                                'aimini.learner.Learner.one_epoch': ('lectures/learner.html#learner.one_epoch', 'aimini/learner.py'),
                                'aimini.learner.Learner.training': ('lectures/learner.html#learner.training', 'aimini/learner.py'),
                                'aimini.learner.Metric': ('lectures/learner.html#metric', 'aimini/learner.py'),
                                'aimini.learner.Metric.__init__': ('lectures/learner.html#metric.__init__', 'aimini/learner.py'),
                                'aimini.learner.Metric.add': ('lectures/learner.html#metric.add', 'aimini/learner.py'),
                                'aimini.learner.Metric.calc': ('lectures/learner.html#metric.calc', 'aimini/learner.py'),
                                'aimini.learner.Metric.reset': ('lectures/learner.html#metric.reset', 'aimini/learner.py'),
                                'aimini.learner.Metric.value': ('lectures/learner.html#metric.value', 'aimini/learner.py'),
                                'aimini.learner.MetricsCB': ('lectures/learner.html#metricscb', 'aimini/learner.py'),
                                'aimini.learner.MetricsCB.__init__': ('lectures/learner.html#metricscb.__init__', 'aimini/learner.py'),
                                'aimini.learner.MetricsCB._log': ('lectures/learner.html#metricscb._log', 'aimini/learner.py'),
                                'aimini.learner.MetricsCB.after_batch': ( 'lectures/learner.html#metricscb.after_batch',
                                                                          'aimini/learner.py'),
                                'aimini.learner.MetricsCB.after_epoch': ( 'lectures/learner.html#metricscb.after_epoch',
                                                                          'aimini/learner.py'),
                                'aimini.learner.MetricsCB.before_epoch': ( 'lectures/learner.html#metricscb.before_epoch',
                                                                           'aimini/learner.py'),
                                'aimini.learner.MetricsCB.before_fit': ('lectures/learner.html#metricscb.before_fit', 'aimini/learner.py'),
                                'aimini.learner.MomentumLearner': ('lectures/learner.html#momentumlearner', 'aimini/learner.py'),
                                'aimini.learner.MomentumLearner.__init__': ( 'lectures/learner.html#momentumlearner.__init__',
                                                                             'aimini/learner.py'),
                                'aimini.learner.MomentumLearner.zero_grad': ( 'lectures/learner.html#momentumlearner.zero_grad',
                                                                              'aimini/learner.py'),
                                'aimini.learner.ProgressCB': ('lectures/learner.html#progresscb', 'aimini/learner.py'),
                                'aimini.learner.ProgressCB.__init__': ('lectures/learner.html#progresscb.__init__', 'aimini/learner.py'),
                                'aimini.learner.ProgressCB._log': ('lectures/learner.html#progresscb._log', 'aimini/learner.py'),
                                'aimini.learner.ProgressCB.after_batch': ( 'lectures/learner.html#progresscb.after_batch',
                                                                           'aimini/learner.py'),
                                'aimini.learner.ProgressCB.before_epoch': ( 'lectures/learner.html#progresscb.before_epoch',
                                                                            'aimini/learner.py'),
                                'aimini.learner.ProgressCB.before_fit': ( 'lectures/learner.html#progresscb.before_fit',
                                                                          'aimini/learner.py'),
                                'aimini.learner.SingleBatchCB': ('lectures/learner.html#singlebatchcb', 'aimini/learner.py'),
                                'aimini.learner.SingleBatchCB.after_batch': ( 'lectures/learner.html#singlebatchcb.after_batch',
                                                                              'aimini/learner.py'),
                                'aimini.learner.TrainCB': ('lectures/learner.html#traincb', 'aimini/learner.py'),
                                'aimini.learner.TrainCB.__init__': ('lectures/learner.html#traincb.__init__', 'aimini/learner.py'),
                                'aimini.learner.TrainCB.backward': ('lectures/learner.html#traincb.backward', 'aimini/learner.py'),
                                'aimini.learner.TrainCB.get_loss': ('lectures/learner.html#traincb.get_loss', 'aimini/learner.py'),
                                'aimini.learner.TrainCB.predict': ('lectures/learner.html#traincb.predict', 'aimini/learner.py'),
                                'aimini.learner.TrainCB.step': ('lectures/learner.html#traincb.step', 'aimini/learner.py'),
                                'aimini.learner.TrainCB.zero_grad': ('lectures/learner.html#traincb.zero_grad', 'aimini/learner.py'),
                                'aimini.learner.TrainLearner': ('lectures/learner.html#trainlearner', 'aimini/learner.py'),
                                'aimini.learner.TrainLearner.backward': ( 'lectures/learner.html#trainlearner.backward',
                                                                          'aimini/learner.py'),
                                'aimini.learner.TrainLearner.get_loss': ( 'lectures/learner.html#trainlearner.get_loss',
                                                                          'aimini/learner.py'),
                                'aimini.learner.TrainLearner.predict': ('lectures/learner.html#trainlearner.predict', 'aimini/learner.py'),
                                'aimini.learner.TrainLearner.step': ('lectures/learner.html#trainlearner.step', 'aimini/learner.py'),
                                'aimini.learner.TrainLearner.zero_grad': ( 'lectures/learner.html#trainlearner.zero_grad',
                                                                           'aimini/learner.py'),
                                'aimini.learner.lr_find': ('lectures/learner.html#lr_find', 'aimini/learner.py'),
                                'aimini.learner.run_cbs': ('lectures/learner.html#run_cbs', 'aimini/learner.py'),
                                'aimini.learner.to_cpu': ('lectures/learner.html#to_cpu', 'aimini/learner.py'),
                                'aimini.learner.with_cbs': ('lectures/learner.html#with_cbs', 'aimini/learner.py'),
                                'aimini.learner.with_cbs.__call__': ('lectures/learner.html#with_cbs.__call__', 'aimini/learner.py'),
                                'aimini.learner.with_cbs.__init__': ('lectures/learner.html#with_cbs.__init__', 'aimini/learner.py')},
            'aimini.lsh': { 'aimini.lsh.FastLSH': ('hw/locality_sensitive_hashing_lsh.html#fastlsh', 'aimini/lsh.py'),
                            'aimini.lsh.FastLSH.__init__': ('hw/locality_sensitive_hashing_lsh.html#fastlsh.__init__', 'aimini/lsh.py'),
                            'aimini.lsh.FastLSH.hashing': ('hw/locality_sensitive_hashing_lsh.html#fastlsh.hashing', 'aimini/lsh.py'),
                            'aimini.lsh.FastLSH.query_neigbours': ( 'hw/locality_sensitive_hashing_lsh.html#fastlsh.query_neigbours',
                                                                    'aimini/lsh.py')},
            'aimini.resnet': { 'aimini.resnet.ResBlock': ('lectures/resnet.html#resblock', 'aimini/resnet.py'),
                               'aimini.resnet.ResBlock.__init__': ('lectures/resnet.html#resblock.__init__', 'aimini/resnet.py'),
                               'aimini.resnet.ResBlock.forward': ('lectures/resnet.html#resblock.forward', 'aimini/resnet.py'),
                               'aimini.resnet._conv_block': ('lectures/resnet.html#_conv_block', 'aimini/resnet.py')},
            'aimini.sgd': { 'aimini.sgd.BaseSchedCB': ('lectures/accel_sgd.html#baseschedcb', 'aimini/sgd.py'),
                            'aimini.sgd.BaseSchedCB.__init__': ('lectures/accel_sgd.html#baseschedcb.__init__', 'aimini/sgd.py'),
                            'aimini.sgd.BaseSchedCB._step': ('lectures/accel_sgd.html#baseschedcb._step', 'aimini/sgd.py'),
                            'aimini.sgd.BaseSchedCB.before_fit': ('lectures/accel_sgd.html#baseschedcb.before_fit', 'aimini/sgd.py'),
                            'aimini.sgd.BatchSchedCB': ('lectures/accel_sgd.html#batchschedcb', 'aimini/sgd.py'),
                            'aimini.sgd.BatchSchedCB.after_batch': ('lectures/accel_sgd.html#batchschedcb.after_batch', 'aimini/sgd.py'),
                            'aimini.sgd.EpochSchedCB': ('lectures/accel_sgd.html#epochschedcb', 'aimini/sgd.py'),
                            'aimini.sgd.EpochSchedCB.after_epoch': ('lectures/accel_sgd.html#epochschedcb.after_epoch', 'aimini/sgd.py'),
                            'aimini.sgd.HasLearnCB': ('lectures/accel_sgd.html#haslearncb', 'aimini/sgd.py'),
                            'aimini.sgd.HasLearnCB.after_fit': ('lectures/accel_sgd.html#haslearncb.after_fit', 'aimini/sgd.py'),
                            'aimini.sgd.HasLearnCB.before_fit': ('lectures/accel_sgd.html#haslearncb.before_fit', 'aimini/sgd.py'),
                            'aimini.sgd.RecorderCB': ('lectures/accel_sgd.html#recordercb', 'aimini/sgd.py'),
                            'aimini.sgd.RecorderCB.__init__': ('lectures/accel_sgd.html#recordercb.__init__', 'aimini/sgd.py'),
                            'aimini.sgd.RecorderCB.after_batch': ('lectures/accel_sgd.html#recordercb.after_batch', 'aimini/sgd.py'),
                            'aimini.sgd.RecorderCB.before_fit': ('lectures/accel_sgd.html#recordercb.before_fit', 'aimini/sgd.py'),
                            'aimini.sgd.RecorderCB.plot': ('lectures/accel_sgd.html#recordercb.plot', 'aimini/sgd.py')},
            'aimini.training': { 'aimini.training.Dataset': ('lectures/minibatch_training.html#dataset', 'aimini/training.py'),
                                 'aimini.training.Dataset.__getitem__': ( 'lectures/minibatch_training.html#dataset.__getitem__',
                                                                          'aimini/training.py'),
                                 'aimini.training.Dataset.__init__': ( 'lectures/minibatch_training.html#dataset.__init__',
                                                                       'aimini/training.py'),
                                 'aimini.training.Dataset.__len__': ( 'lectures/minibatch_training.html#dataset.__len__',
                                                                      'aimini/training.py'),
                                 'aimini.training.accuracy': ('lectures/minibatch_training.html#accuracy', 'aimini/training.py'),
                                 'aimini.training.char': ('lectures/minibatch_training.html#char', 'aimini/training.py'),
                                 'aimini.training.fit': ('lectures/minibatch_training.html#fit', 'aimini/training.py'),
                                 'aimini.training.get_dls': ('lectures/minibatch_training.html#get_dls', 'aimini/training.py'),
                                 'aimini.training.report': ('lectures/minibatch_training.html#report', 'aimini/training.py')}}}
